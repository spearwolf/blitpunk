webpackJsonpBLITPUNK([1],{

/***/ 335:
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["BLITPUNK"] = factory();
	else
		root["BLITPUNK"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 75);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function (obj) {
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return;
  if (obj.destroyed) return;

  if (eventize.is(obj) && typeof obj.off === 'function') {
    // TODO eventize.destroy(obj)
    obj.off();
  }

  Object.keys(obj).forEach(function (key) {
    delete obj[key];
  });

  Object.defineProperty(obj, 'destroyed', { value: true });
};

var eventize = __webpack_require__(19);

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARRAY_TYPE", function() { return ARRAY_TYPE; });
/* harmony export (immutable) */ __webpack_exports__["setMatrixArrayType"] = setMatrixArrayType;
/* harmony export (immutable) */ __webpack_exports__["toRadian"] = toRadian;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * Common utilities
 * @module glMatrix
 */

// Configuration Constants
const EPSILON = 0.000001;
/* harmony export (immutable) */ __webpack_exports__["EPSILON"] = EPSILON;

let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
const RANDOM = Math.random;
/* harmony export (immutable) */ __webpack_exports__["RANDOM"] = RANDOM;


/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}

const degree = Math.PI / 180;

/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */
function toRadian(a) {
  return a * degree;
}

/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */
function equals(a, b) {
  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

// https://github.com/kelektiv/node-uuid
/** @private */
var uuid = __webpack_require__(79);

exports.default = uuid;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Generic container for shader variables. eg. uniform, vertex attributes, textures ..
 * @desc
 * Each time you change the value, a serial number will be increased.
 * Use `.touch()` if you want to increase the serial number without changing the value.
 */
var ShaderVariable = function () {
  /**
   * @param {string} name
   * @param {string} type
   * @param {number|Object} value
   */
  function ShaderVariable(name, type, value) {
    _classCallCheck(this, ShaderVariable);

    this.name = name;
    this.type = type;
    this._value = value;

    /**
     * The serial number increases each time you change the value.
     * @type {number}
     */
    this.serial = 0;
  }

  /**
   * Increase serial number.
   */
  ShaderVariable.prototype.touch = function touch() {
    ++this.serial;
  };

  _createClass(ShaderVariable, [{
    key: 'value',
    get: function get() {
      return this._value;
    },
    set: function set(val) {
      if (this._value !== val) {
        this._value = val;
        ++this.serial;
      }
    }
  }]);

  return ShaderVariable;
}();

exports.default = ShaderVariable;


ShaderVariable.TYPE = Object.freeze({
  UNIFORM: 'uniform',
  ATTRIB: 'attrib',
  TEXTURE_2D: 'tex2d'
});

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _generate_uuid = __webpack_require__(2);

var _generate_uuid2 = _interopRequireDefault(_generate_uuid);

var _serial = __webpack_require__(82);

var _serial2 = _interopRequireDefault(_serial);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents a resource reference which points to a *renderable resource*.
 * Every resource has an id, serial and possible resource allocation *hints*.
 * The resource reference will be used by the resource library to find or
 * create *renderable resources* (like WebGlBuffer, WebGlTexture, ..).
 */
var ResourceRef = function () {
  function ResourceRef(resource) {
    var hints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ResourceRef);

    this.resource = resource;
    this.hints = hints;
    this.id = hints.id || (0, _generate_uuid2.default)();
    this.serial = new _serial2.default(typeof hints.serial === 'number' ? hints.serial : 1);
  }

  /**
   * @param {ResourceRef} sourceRef
   * @returns {boolean}
   */


  ResourceRef.prototype.isSynced = function isSynced(sourceRef) {
    var value = this.serial.value;

    return value > 0 && value === sourceRef.serial.value;
  };

  /**
   * @param {ResourceRef} sourceRef
   * @returns {boolean}
   */


  ResourceRef.prototype.needSync = function needSync(sourceRef) {
    return !this.isSynced(sourceRef);
  };

  /**
   * @param {ResourceRef} sourceRef
   * @param {function} cb
   */


  ResourceRef.prototype.sync = function sync(sourceRef, cb) {
    if (this.needSync(sourceRef)) {
      cb(this.resource);
      this.serial.value = sourceRef.serial.value;
    }
  };

  return ResourceRef;
}();

exports.default = ResourceRef;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

/** @private */
var BYTES_PER_ELEMENT = Object.freeze({
  float32: 4,
  int16: 2,
  int32: 4,
  int8: 1,
  uint16: 2,
  uint32: 4,
  uint8: 1
});

/** @private */
var TYPED_ARRAY_CONSTRUCTOR = Object.freeze({
  float32: Float32Array,
  int16: Int16Array,
  int32: Int32Array,
  int8: Int8Array,
  uint16: Uint16Array,
  uint32: Uint32Array,
  uint8: Uint8Array
});

/** @private */
var TYPED_ARRAY_GETTER = Object.freeze({
  float32: function float32(obj) {
    return obj.float32Array;
  },
  int32: function int32(obj) {
    return obj.int32Array;
  },
  int16: function int16(obj) {
    return obj.int16Array;
  },
  int8: function int8(obj) {
    return obj.int8Array;
  },
  uint32: function uint32(obj) {
    return obj.uint32Array;
  },
  uint16: function uint16(obj) {
    return obj.uint16Array;
  },
  uint8: function uint8(obj) {
    return obj.uint8Array;
  }
});

/** @private */
var GL_ITEM_TYPES = Object.freeze({
  float32: 'FLOAT',
  int16: 'SHORT',
  int32: 'INT',
  int8: 'BYTE',
  uint16: 'UNSIGNED_SHORT',
  uint32: 'UNSIGNED_INT',
  uint8: 'UNSIGNED_BYTE'
});

exports.BYTES_PER_ELEMENT = BYTES_PER_ELEMENT;
exports.TYPED_ARRAY_CONSTRUCTOR = TYPED_ARRAY_CONSTRUCTOR;
exports.TYPED_ARRAY_GETTER = TYPED_ARRAY_GETTER;
exports.GL_ITEM_TYPES = GL_ITEM_TYPES;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _resource_ref = __webpack_require__(5);

var _resource_ref2 = _interopRequireDefault(_resource_ref);

var _typed_array_helpers = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Vertex Object Array
 *
 * @class VOArray
 *
 * @param {VODescriptor} descriptor - *Vertex object* descriptor
 * @param {number} capacity - Maximum number of *vertex objects*
 * @param {?ArrayBuffer|DataView|Float32Array} data
 * @param {string} [usage=VOArray.USAGE.DYNAMIC] usage hint
 * @param {boolean} [autotouch] autotouch
 *
 * @desc
 * An array of *vertex objects*.
 * Has a maximum capacity and a reference to the *vertex object descriptor*.
 *
 */

var VOArray = function () {
  function VOArray(descriptor, capacity, data) {
    var _this = this;

    var usage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : VOArray.USAGE.DYNAMIC;
    var autotouch = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

    _classCallCheck(this, VOArray);

    /** @type {ResourceRef} */
    this.resourceRef = new _resource_ref2.default(this, { usage: usage });

    /** @type {VODescriptor} */
    this.descriptor = descriptor;
    /** @type {number} */
    this.capacity = capacity;

    if (data instanceof ArrayBuffer) {
      this.float32Array = new Float32Array(data);
    } else if (data instanceof DataView) {
      this.float32Array = new Float32Array(data.buffer, data.byteOffset, data.byteLength / 4);
    } else if (data instanceof Float32Array) {
      this.float32Array = data;
    } else {
      this.float32Array = new Float32Array(new ArrayBuffer(capacity * descriptor.bytesPerVO));
    }

    // needed by WebGlRenderer#syncBuffer
    this.resourceRef.hints.typedArray = this.float32Array;

    var buffer = this.buffer,
        bufferByteOffset = this.bufferByteOffset,
        bufferByteLength = this.bufferByteLength;

    descriptor.typeList.filter(function (type) {
      return type !== 'float32';
    }).forEach(function (type) {
      _this[type + 'Array'] = new _typed_array_helpers.TYPED_ARRAY_CONSTRUCTOR[type](buffer, bufferByteOffset, bufferByteLength / _typed_array_helpers.BYTES_PER_ELEMENT[type]);
    });

    /** @type {boolean} */
    this.enableAutotouch = typeof autotouch === 'boolean' ? autotouch : usage === VOArray.USAGE.DYNAMIC;

    Object.freeze(this);
  }

  /**
   * increase serial value from resource reference
   */


  VOArray.prototype.touch = function touch() {
    this.resourceRef.serial.touch();
  };

  /** @type {ArrayBuffer} */


  /**
   * Copy **all** *vertex object* data from an external vertex array to the internal array
   * @param {VOArray} fromVOArray - The source vertex array
   * @param {number} [toOffset=0] - *Vertex object* offset for the internal vertex array
   */
  VOArray.prototype.copy = function copy(fromVOArray, toOffset) {
    var offset = 0;

    if (toOffset === undefined) {
      offset = toOffset * (this.descriptor.bytesPerVO >> 2);
    }

    this.float32Array.set(fromVOArray.float32Array, offset);
  };

  /**
   * Create a VOArray *sub* array
   * @desc
   * This will **not** *copy* the internal vertex data - this will create a new view into the internal buffer.
   * Both (the new VOArray and the current one) will share the
   * same memory buffer.
   *
   * @param {number} begin - Index of first vertex object
   * @param {number} [size=1]
   * @return {VOArray}
   */


  VOArray.prototype.subarray = function subarray(begin) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    return new VOArray(this.descriptor, size, new DataView(this.buffer, this.bufferByteOffset + begin * this.descriptor.bytesPerVO, size * this.descriptor.bytesPerVO));
  };

  _createClass(VOArray, [{
    key: 'buffer',
    get: function get() {
      return this.float32Array.buffer;
    }

    /** @type {number} */

  }, {
    key: 'bufferByteOffset',
    get: function get() {
      return this.float32Array.byteOffset;
    }

    /** @type {number} */

  }, {
    key: 'bufferByteLength',
    get: function get() {
      return this.float32Array.byteLength;
    }
  }]);

  return VOArray;
}();

exports.default = VOArray;


VOArray.USAGE = Object.freeze({
  STATIC: 'static',
  DYNAMIC: 'dynamic'
});

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typed_array_helpers = __webpack_require__(6);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Vertex object *attribute* descriptor.
 */
var VOAttrDescriptor = function () {
  /**
   * @param {string} name
   * @param {string} type
   * @param {number} size
   * @param {number} [offset] - either `offset` or `byteOffset` must be specified
   * @param {number} [byteOffset] - either `offset` or `byteOffset` must be specified
   * @param {boolean} uniform
   * @param {string[]} [attrNames]
   */
  function VOAttrDescriptor(name, type, size, offset, byteOffset, uniform, attrNames) {
    _classCallCheck(this, VOAttrDescriptor);

    this.name = name;
    this.type = type;
    this.size = size;
    this.uniform = uniform;
    this.attrNames = attrNames;

    this.bytesPerElement = _typed_array_helpers.BYTES_PER_ELEMENT[this.type];
    this.bytesPerVertex = this.bytesPerElement * size;

    if (typeof byteOffset !== 'number') {
      this.byteOffset = offset * this.bytesPerElement;
    } else {
      this.byteOffset = byteOffset;
    }

    if (typeof offset !== 'number') {
      this.offset = byteOffset / this.bytesPerElement;
    } else {
      this.offset = offset;
    }
  }

  /**
   * Number of attributes per vertex
   * @type {number}
   */


  VOAttrDescriptor.prototype.vertexAttrCount = function vertexAttrCount(descriptor) {
    return descriptor.bytesPerVertex / this.bytesPerElement;
  };

  /**
   * @private
   */


  VOAttrDescriptor.defineProperties = function defineProperties(attrDesc, propertiesObject, descriptor) {
    var name = attrDesc.name;

    var getArray = _typed_array_helpers.TYPED_ARRAY_GETTER[attrDesc.type];
    var vertexCount = descriptor.vertexCount;
    var vertexAttrCount = attrDesc.vertexAttrCount(descriptor);
    var offset = attrDesc.byteOffset / attrDesc.bytesPerElement;

    var i = void 0,
        j = void 0;

    if (attrDesc.size === 1) {
      if (attrDesc.uniform) {
        var valueGetter = getV1u(getArray, offset);
        var valueSetter = setV1u(getArray, vertexCount, vertexAttrCount, offset);

        attrDesc.getValue = function (vo) {
          return valueGetter.call(vo);
        };
        attrDesc.setValue = function (vo, arg) {
          return valueSetter.call(vo, arg);
        };

        propertiesObject[name] = {
          get: valueGetter,
          set: valueSetter,
          enumerable: true
        };
      } else {
        var _valueSetter = setVNv(getArray, 1, vertexCount, vertexAttrCount, offset);

        attrDesc.setValue = function (vo, args) {
          return _valueSetter.apply(vo, args);
        };

        propertiesObject['set' + camelize(name)] = {
          value: _valueSetter,
          enumerable: true
        };

        var valueGetters = [];

        for (i = 0; i < descriptor.vertexCount; ++i) {
          var curValueGetter = getV1u(getArray, offset + i * vertexAttrCount);

          valueGetters.push(curValueGetter);

          propertiesObject[name + i] = {

            get: curValueGetter,
            set: setVNv(getArray, 1, 1, 0, offset + i * vertexAttrCount),
            enumerable: true

          };
        }

        attrDesc.getValue = function (vo, vi) {
          return valueGetters[vi].call(vo);
        };
      }
    } else if (attrDesc.size >= 2) {
      if (attrDesc.uniform) {
        var _valueGetter = getVNu(getArray, offset);
        var _valueSetter2 = setVNu(getArray, attrDesc.size, vertexCount, vertexAttrCount, offset);

        attrDesc.getValue = function (vo, vi, idx) {
          return _valueGetter.call(vo, idx);
        };
        attrDesc.setValue = function (vo, args) {
          return _valueSetter2.apply(vo, args);
        };

        propertiesObject['get' + camelize(name)] = {
          value: _valueGetter,
          enumerable: true
        };

        propertiesObject['set' + camelize(name)] = {
          value: _valueSetter2,
          enumerable: true
        };

        for (i = 0; i < attrDesc.size; ++i) {
          var setterName = attrPostfix(attrDesc, name, i);

          propertiesObject[setterName] = {

            get: getV1u(getArray, offset + i),
            set: setV1u(getArray, vertexCount, vertexAttrCount, offset + i),
            enumerable: true

          };
        }
      } else {
        var _valueSetter3 = setVNv(getArray, attrDesc.size, vertexCount, vertexAttrCount, offset);

        attrDesc.setValue = function (vo, args) {
          return _valueSetter3.apply(vo, args);
        };

        propertiesObject['set' + camelize(name)] = {
          value: _valueSetter3,
          enumerable: true
        };

        var _valueGetters = [];

        for (i = 0; i < descriptor.vertexCount; ++i) {
          var curVertexValueGetters = [];

          for (j = 0; j < attrDesc.size; ++j) {
            var _setterName = attrPostfix(attrDesc, name, j) + i;
            var _curValueGetter = getV1u(getArray, offset + i * vertexAttrCount + j);

            curVertexValueGetters.push(_curValueGetter);

            propertiesObject[_setterName] = {

              get: _curValueGetter,
              set: setVNv(getArray, 1, 1, 0, offset + i * vertexAttrCount + j),
              enumerable: true

            };
          }

          _valueGetters.push(curVertexValueGetters);
        }

        attrDesc.getValue = function (vo, vi, idx) {
          return _valueGetters[vi][idx].call(vo);
        };
      }
    }
  };

  return VOAttrDescriptor;
}();

/** @private */


exports.default = VOAttrDescriptor;
function attrPostfix(attrDesc, name, index) {
  if (attrDesc.attrNames) {
    var postfix = attrDesc.attrNames[index];

    if (postfix !== undefined) {
      return postfix;
    }
  }

  return name + '_' + index;
}

/** @private */
function getVNu(getArray, offset) {
  return function (attrIndex) {
    return getArray(this.voArray)[offset + attrIndex];
  };
}

/** @private */
function setVNu(getArray, vectorLength, vertexCount, vertexAttrCount, offset) {
  return function () {
    var _array = getArray(this.voArray);
    var i = void 0;
    var n = void 0;

    for (i = 0; i < vertexCount; ++i) {
      for (n = 0; n < vectorLength; ++n) {
        _array[i * vertexAttrCount + offset + n] = arguments[n];
      }
    }
  };
}

/** @private */
function getV1u(getArray, offset) {
  return function () {
    return getArray(this.voArray)[offset];
  };
}

/** @private */
function setVNv(getArray, vectorLength, vertexCount, vertexAttrCount, offset) {
  return function () {
    var _array = getArray(this.voArray);
    var i = void 0;
    var n = void 0;

    for (i = 0; i < vertexCount; ++i) {
      for (n = 0; n < vectorLength; ++n) {
        _array[i * vertexAttrCount + offset + n] = arguments[i * vectorLength + n];
      }
    }
  };
}

/** @private */
function setV1u(getArray, vertexCount, vertexAttrCount, offset) {
  return function (value) {
    var _array = getArray(this.voArray);

    for (var i = 0; i < vertexCount; ++i) {
      _array[i * vertexAttrCount + offset] = value;
    }
  };
}

/** @private */
function camelize(name) {
  return name[0].toUpperCase() + name.substr(1);
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(21);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Group of shader variables.
 */
var ShaderVariableGroup = function () {
  /**
  * @param {Array<ShaderVariable|ShaderVariableAlias>} shaderVars
   */
  function ShaderVariableGroup(shaderVars) {
    _classCallCheck(this, ShaderVariableGroup);

    this.shaderVars = shaderVars;
  }

  ShaderVariableGroup.prototype.pushVar = function pushVar(shaderContext) {
    this.shaderVars.forEach(shaderContext.pushVar.bind(shaderContext));
  };

  ShaderVariableGroup.prototype.popVar = function popVar(shaderContext) {
    this.shaderVars.forEach(shaderContext.popVar.bind(shaderContext));
  };

  return ShaderVariableGroup;
}();

exports.default = ShaderVariableGroup;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(3),
    isKey = __webpack_require__(125),
    stringToPath = __webpack_require__(126),
    toString = __webpack_require__(20);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(27);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(58);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(151);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _power_of_2_image = __webpack_require__(25);

var _power_of_2_image2 = _interopRequireDefault(_power_of_2_image);

var _resource_ref = __webpack_require__(5);

var _resource_ref2 = _interopRequireDefault(_resource_ref);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var getOption = function getOption(options, key, defaultValue) {
  return options != null ? options[key] !== undefined ? options[key] : defaultValue : defaultValue;
};

/**
 * Represents texture coordinates and holds a reference to a `<img>` or `<canvas>` element.
 * Textures can form hierachical structures.
 * The *root* texture contains always the image reference, all other *sub* textures contain
 * references to their parent (and the root).
 *
 * @class Texture
 *
 * @example
 * const canvas = document.createElement("canvas")
 * const texture = new Texture(canvas)
 * texture.width    // => 300 <- default size of <canvas> element
 * texture.height   // => 150
 *
 * let subTex = new Texture(texture, 30, 15, 100, 100)
 * subTex.width    // => 100
 *
 * Texture.load('test/assets/bird-chicken-penguin.png').then(tex => {
 *   tex.width    // => 640
 *   tex.height   // => 480
 * })
 */

var Texture = function () {
  /**
   * @param {Texture|PowerOf2Image|HTMLImageElement|HTMLCanvasElement} source - image elements must be *completed* (loaded)
   * @param {number} [width]
   * @param {number} [height]
   * @param {number} [x=0]
   * @param {number} [y=0]
   * @param {Object} [hints] texture hints
   * @param {boolean} [hints.flipY=false]
   * @param {boolean} [hints.repeatable=false]
   * @param {boolean} [hints.premultiplyAlpha=true]
   */
  function Texture(source, width, height) {
    var x = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var y = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var hints = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

    _classCallCheck(this, Texture);

    if (source instanceof Texture) {
      /**
       * @type {Texture}
       */
      this.parent = source;
      /**
       * @type {PowerOf2Image|HTMLImageElement|HTMLCanvasElement}
       */
      this.image = null;
    } else if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' && 'width' in source && 'height' in source) {
      this.image = source;
      this.parent = null;

      this._resourceRef = new _resource_ref2.default(this, {
        flipY: getOption(hints, 'flipY', false),
        repeatable: getOption(hints, 'repeatable', false),
        premultiplyAlpha: getOption(hints, 'premultiplyAlpha', true),
        nearest: getOption(hints, 'nearest', false)
      });

      if ('origWidth' in source && 'origHeight' in source) {
        width = source.origWidth;
        height = source.origHeight;
      }
    } else {
      throw new Error('new Texture() panic: unexpected source argument!');
    }

    this._width = width;
    this._height = height;

    /**
     * @type {number}
     */
    this.x = x;
    /**
     * @type {number}
     */
    this.y = y;
  }

  /**
   * @type {Texture}
   */


  /**
    * Loads an image from url and returns a texture.
    * @param {string} url
    * @param {object} [textureHints]
    * @returns {Promise<Texture>}
    */
  Texture.load = function load(url, textureHints) {
    return new _power_of_2_image2.default(url).complete.then(function (p2img) {
      return new Texture(p2img, undefined, undefined, 0, 0, textureHints);
    });
  };

  _createClass(Texture, [{
    key: 'root',
    get: function get() {
      return this.parent && this.parent.root || this;
    }

    /**
     * @type {HTMLImageElement|HTMLCanvasElement}
     */

  }, {
    key: 'imgEl',
    get: function get() {
      var root = this.root;

      return root.image.imgEl || root.image;
    }

    /**
     * @type {ResourceRef}
     */

  }, {
    key: 'resourceRef',
    get: function get() {
      return this._resourceRef || this.root.resourceRef;
    }

    /**
     * @type {number}
     */

  }, {
    key: 'width',
    get: function get() {
      return typeof this._width === 'number' ? this._width : this.image ? this.image.width : this.parent ? this.root.width : 0;
    },
    set: function set(w) {
      this._width = w;
    }

    /**
     * @type {number}
     */

  }, {
    key: 'height',
    get: function get() {
      return typeof this._height === 'number' ? this._height : this.image ? this.image.height : this.parent ? this.root.height : 0;
    },
    set: function set(h) {
      this._height = h;
    }

    /**
     * @type {number}
     */

  }, {
    key: 'minS',
    get: function get() {
      var x = this.x;
      var texture = this;

      while ((texture = texture.parent) != null) {
        x += texture.x;
      }

      return x / this.root.image.width;
    }

    /**
     * @type {number}
     */

  }, {
    key: 'minT',
    get: function get() {
      var y = this.y;
      var texture = this;

      while ((texture = texture.parent) != null) {
        y += texture.y;
      }

      return y / this.root.image.height;
    }

    /**
     * @type {number}
     */

  }, {
    key: 'maxS',
    get: function get() {
      var x = this.x + this.width;
      var texture = this;

      while ((texture = texture.parent) != null) {
        x += texture.x;
      }

      return x / this.root.image.width;
    }

    /**
     * @type {number}
     */

  }, {
    key: 'maxT',
    get: function get() {
      var y = this.y + this.height;
      var texture = this;

      while ((texture = texture.parent) != null) {
        y += texture.y;
      }

      return y / this.root.image.height;
    }
  }]);

  return Texture;
}();

exports.default = Texture;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License

(function(Math) {

var trimLeft = /^\s+/,
    trimRight = /\s+$/,
    tinyCounter = 0,
    mathRound = Math.round,
    mathMin = Math.min,
    mathMax = Math.max,
    mathRandom = Math.random;

function tinycolor (color, opts) {

    color = (color) ? color : '';
    opts = opts || { };

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
       return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._originalInput = color,
    this._r = rgb.r,
    this._g = rgb.g,
    this._b = rgb.b,
    this._a = rgb.a,
    this._roundA = mathRound(100*this._a) / 100,
    this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) { this._r = mathRound(this._r); }
    if (this._g < 1) { this._g = mathRound(this._g); }
    if (this._b < 1) { this._b = mathRound(this._b); }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
}

tinycolor.prototype = {
    isDark: function() {
        return this.getBrightness() < 128;
    },
    isLight: function() {
        return !this.isDark();
    },
    isValid: function() {
        return this._ok;
    },
    getOriginalInput: function() {
      return this._originalInput;
    },
    getFormat: function() {
        return this._format;
    },
    getAlpha: function() {
        return this._a;
    },
    getBrightness: function() {
        //http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function() {
        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r/255;
        GsRGB = rgb.g/255;
        BsRGB = rgb.b/255;

        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
    },
    setAlpha: function(value) {
        this._a = boundAlpha(value);
        this._roundA = mathRound(100*this._a) / 100;
        return this;
    },
    toHsv: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
    },
    toHsvString: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
        return (this._a == 1) ?
          "hsv("  + h + ", " + s + "%, " + v + "%)" :
          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
    },
    toHsl: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
    },
    toHslString: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
        return (this._a == 1) ?
          "hsl("  + h + ", " + s + "%, " + l + "%)" :
          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
    },
    toHex: function(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function(allow3Char) {
        return '#' + this.toHex(allow3Char);
    },
    toHex8: function(allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function(allow4Char) {
        return '#' + this.toHex8(allow4Char);
    },
    toRgb: function() {
        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
    },
    toRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function() {
        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
    },
    toPercentageRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function() {
        if (this._a === 0) {
            return "transparent";
        }

        if (this._a < 1) {
            return false;
        }

        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function(secondColor) {
        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";

        if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }

        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
    },
    toString: function(format) {
        var formatSet = !!format;
        format = format || this._format;

        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
                return this.toName();
            }
            return this.toRgbString();
        }
        if (format === "rgb") {
            formattedString = this.toRgbString();
        }
        if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
        }
        if (format === "hex3") {
            formattedString = this.toHexString(true);
        }
        if (format === "hex4") {
            formattedString = this.toHex8String(true);
        }
        if (format === "hex8") {
            formattedString = this.toHex8String();
        }
        if (format === "name") {
            formattedString = this.toName();
        }
        if (format === "hsl") {
            formattedString = this.toHslString();
        }
        if (format === "hsv") {
            formattedString = this.toHsvString();
        }

        return formattedString || this.toHexString();
    },
    clone: function() {
        return tinycolor(this.toString());
    },

    _applyModification: function(fn, args) {
        var color = fn.apply(null, [this].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
    },
    lighten: function() {
        return this._applyModification(lighten, arguments);
    },
    brighten: function() {
        return this._applyModification(brighten, arguments);
    },
    darken: function() {
        return this._applyModification(darken, arguments);
    },
    desaturate: function() {
        return this._applyModification(desaturate, arguments);
    },
    saturate: function() {
        return this._applyModification(saturate, arguments);
    },
    greyscale: function() {
        return this._applyModification(greyscale, arguments);
    },
    spin: function() {
        return this._applyModification(spin, arguments);
    },

    _applyCombination: function(fn, args) {
        return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function() {
        return this._applyCombination(analogous, arguments);
    },
    complement: function() {
        return this._applyCombination(complement, arguments);
    },
    monochromatic: function() {
        return this._applyCombination(monochromatic, arguments);
    },
    splitcomplement: function() {
        return this._applyCombination(splitcomplement, arguments);
    },
    triad: function() {
        return this._applyCombination(triad, arguments);
    },
    tetrad: function() {
        return this._applyCombination(tetrad, arguments);
    }
};

// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function(color, opts) {
    if (typeof color == "object") {
        var newColor = {};
        for (var i in color) {
            if (color.hasOwnProperty(i)) {
                if (i === "a") {
                    newColor[i] = color[i];
                }
                else {
                    newColor[i] = convertToPercentage(color[i]);
                }
            }
        }
        color = newColor;
    }

    return tinycolor(color, opts);
};

// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {

    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;

    if (typeof color == "string") {
        color = stringInputToObject(color);
    }

    if (typeof color == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
        }

        if (color.hasOwnProperty("a")) {
            a = color.a;
        }
    }

    a = boundAlpha(a);

    return {
        ok: ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a: a
    };
}


// Conversion Functions
// --------------------

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b){
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}

// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }

        h /= 6;
    }

    return { h: h, s: s, l: l };
}

// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
    var r, g, b;

    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
        if(t < 0) t += 1;
        if(t > 1) t -= 1;
        if(t < 1/6) return p + (q - p) * 6 * t;
        if(t < 1/2) return q;
        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
        return p;
    }

    if(s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, v = max;

    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if(max == min) {
        h = 0; // achromatic
    }
    else {
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h, s: s, v: v };
}

// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
 function hsvToRgb(h, s, v) {

    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);

    var i = Math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join("");
}

// `rgbaToHex`
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b are contained in the set [0, 255] and
// a in [0, 1]. Returns a 4 or 8 character rgba hex
function rgbaToHex(r, g, b, a, allow4Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16)),
        pad2(convertDecimalToHex(a))
    ];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }

    return hex.join("");
}

// `rgbaToArgbHex`
// Converts an RGBA color to an ARGB Hex8 string
// Rarely used, but required for "toFilter()"
function rgbaToArgbHex(r, g, b, a) {

    var hex = [
        pad2(convertDecimalToHex(a)),
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    return hex.join("");
}

// `equals`
// Can be called with any tinycolor input
tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) { return false; }
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};

tinycolor.random = function() {
    return tinycolor.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
    });
};


// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

function desaturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function saturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function greyscale(color) {
    return tinycolor(color).desaturate(100);
}

function lighten (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

function brighten(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
    return tinycolor(rgb);
}

function darken (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
}

// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

function complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
}

function triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
    ];
}

function tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
    ];
}

function splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
    ];
}

function analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;

    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
    }
    return ret;
}

function monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
        ret.push(tinycolor({ h: h, s: s, v: v}));
        v = (v + modification) % 1;
    }

    return ret;
}

// Utility Functions
// ---------------------

tinycolor.mix = function(color1, color2, amount) {
    amount = (amount === 0) ? 0 : (amount || 50);

    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();

    var p = amount / 100;

    var rgba = {
        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
    };

    return tinycolor(rgba);
};


// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// `contrast`
// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
tinycolor.readability = function(color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
};

// `isReadable`
// Ensure that foreground and background color combinations meet WCAG2 guidelines.
// The third argument is an optional Object.
//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// *Example*
//    tinycolor.isReadable("#000", "#111") => false
//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
tinycolor.isReadable = function(color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;

    out = false;

    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
        case "AAsmall":
        case "AAAlarge":
            out = readability >= 4.5;
            break;
        case "AAlarge":
            out = readability >= 3;
            break;
        case "AAAsmall":
            out = readability >= 7;
            break;
    }
    return out;

};

// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// Optionally returns Black or White if the most readable color is unreadable.
// *Example*
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size ;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors ;
    level = args.level;
    size = args.size;

    for (var i= 0; i < colorList.length ; i++) {
        readability = tinycolor.readability(baseColor, colorList[i]);
        if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
        }
    }

    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
        return bestColor;
    }
    else {
        args.includeFallbackColors=false;
        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
    }
};


// Big List of Colors
// ------------------
// <http://www.w3.org/TR/css3-color/#svg-color>
var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};

// Make it easy to access colors via `hexNames[hex]`
var hexNames = tinycolor.hexNames = flip(names);


// Utilities
// ---------

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o) {
    var flipped = { };
    for (var i in o) {
        if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
        }
    }
    return flipped;
}

// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }

    return a;
}

// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
    if (isOnePointZero(n)) { n = "100%"; }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if ((Math.abs(n - max) < 0.000001)) {
        return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return (n % max) / parseFloat(max);
}

// Force a number between 0 and 1
function clamp01(val) {
    return mathMin(1, mathMax(0, val));
}

// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
    return parseInt(val, 16);
}

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
}

// Check to see if string passed in is a percentage
function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
}

// Force a hex value to have 2 characters
function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
}

// Replace a decimal with it's percentage value
function convertToPercentage(n) {
    if (n <= 1) {
        n = (n * 100) + "%";
    }

    return n;
}

// Converts a decimal to a hex value
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
    return (parseIntFromHex(h) / 255);
}

var matchers = (function() {

    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

    return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
})();

// `isValidCSSUnit`
// Take in a single string / number and check to see if it looks like a CSS unit
// (see `matchers` above for definition).
function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
}

// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color) {

    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    }
    else if (color == 'transparent') {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if ((match = matchers.rgb.exec(color))) {
        return { r: match[1], g: match[2], b: match[3] };
    }
    if ((match = matchers.rgba.exec(color))) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    if ((match = matchers.hsl.exec(color))) {
        return { h: match[1], s: match[2], l: match[3] };
    }
    if ((match = matchers.hsla.exec(color))) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    if ((match = matchers.hsv.exec(color))) {
        return { h: match[1], s: match[2], v: match[3] };
    }
    if ((match = matchers.hsva.exec(color))) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    if ((match = matchers.hex8.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex6.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    if ((match = matchers.hex4.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex3.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
        };
    }

    return false;
}

function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {"level":"AA", "size":"small"};
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
        level = "AA";
    }
    if (size !== "small" && size !== "large") {
        size = "small";
    }
    return {"level":level, "size":size};
}

// Node: Export function
if (typeof module !== "undefined" && module.exports) {
    module.exports = tinycolor;
}
// AMD/requirejs: Define the module
else if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {return tinycolor;}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}
// Browser: Expose to window
else {
    window.tinycolor = tinycolor;
}

})(Math);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
/* eslint no-multi-spaces: ["error", { exceptions: { "VariableDeclarator": true } }] */

var DOM_ELEM_ENTITY = exports.DOM_ELEM_ENTITY = 'blitpunk-entity';
var DOM_ELEM_CANVAS = exports.DOM_ELEM_CANVAS = 'blitpunk-canvas';
var DOM_ELEM_SCENE = exports.DOM_ELEM_SCENE = 'blitpunk-scene';
var DOM_ELEM_SPRITE_GROUP = exports.DOM_ELEM_SPRITE_GROUP = 'blitpunk-sprite-group';
var DOM_ELEM_TEXTURE_ATLAS = exports.DOM_ELEM_TEXTURE_ATLAS = 'blitpunk-texture-atlas';

var NODE_NAME_ENTITY = exports.NODE_NAME_ENTITY = DOM_ELEM_ENTITY.toUpperCase();
var NODE_NAME_CANVAS = exports.NODE_NAME_CANVAS = DOM_ELEM_CANVAS.toUpperCase();
var NODE_NAME_SCENE = exports.NODE_NAME_SCENE = DOM_ELEM_SCENE.toUpperCase();
var NODE_NAME_SPRITE_GROUP = exports.NODE_NAME_SPRITE_GROUP = DOM_ELEM_SPRITE_GROUP.toUpperCase();
var NODE_NAME_TEXTURE_ATLAS = exports.NODE_NAME_TEXTURE_ATLAS = DOM_ELEM_TEXTURE_ATLAS.toUpperCase();

var COMP_PRIO_CLEAR = exports.COMP_PRIO_CLEAR = 2000;
var COMP_PRIO_PROJECTION = exports.COMP_PRIO_PROJECTION = 1000;
var COMP_PRIO_BLEND_BEFORE = exports.COMP_PRIO_BLEND_BEFORE = 500;
var COMP_PRIO_CHILDREN = exports.COMP_PRIO_CHILDREN = 100;
var COMP_PRIO_BLEND_AFTER = exports.COMP_PRIO_BLEND_AFTER = -500;

var ATTR_ALPHA = exports.ATTR_ALPHA = 'alpha';
var ATTR_ANTIALIAS = exports.ATTR_ANTIALIAS = 'antialias';
var ATTR_BLEND_MODE = exports.ATTR_BLEND_MODE = 'blend-mode';
var ATTR_CAPACITY = exports.ATTR_CAPACITY = 'capacity';
var ATTR_CLEAR_COLOR = exports.ATTR_CLEAR_COLOR = 'clear-color';
var ATTR_DEPTH = exports.ATTR_DEPTH = 'depth';
var ATTR_DESCRIPTOR = exports.ATTR_DESCRIPTOR = 'descriptor';
var ATTR_FLIP_Y = exports.ATTR_FLIP_Y = 'flip-y';
var ATTR_FRAGMENT_SHADER = exports.ATTR_FRAGMENT_SHADER = 'fragment-shader';
var ATTR_MODULE_SRC = exports.ATTR_MODULE_SRC = 'module-src';
var ATTR_NEAREST = exports.ATTR_NEAREST = 'nearest';
var ATTR_PREMULTIPLIED_ALPHA = exports.ATTR_PREMULTIPLIED_ALPHA = 'premultiplied-alpha';
var ATTR_PREMULTIPLY_ALPHA = exports.ATTR_PREMULTIPLY_ALPHA = 'premultiply-alpha';
var ATTR_PRESERVE_DRAW = exports.ATTR_PRESERVE_DRAW = 'preserve-drawing-buffer';
var ATTR_PRIMITIVE = exports.ATTR_PRIMITIVE = 'primitive';
var ATTR_PROJECTION = exports.ATTR_PROJECTION = 'projection';
var ATTR_REPEATABLE = exports.ATTR_REPEATABLE = 'repeatable';
var ATTR_SRC = exports.ATTR_SRC = 'src';
var ATTR_STENCIL = exports.ATTR_STENCIL = 'stencil';
var ATTR_TEXTURE_MAP = exports.ATTR_TEXTURE_MAP = 'texture-map';
var ATTR_VERTEX_SHADER = exports.ATTR_VERTEX_SHADER = 'vertex-shader';
var ATTR_VO_NEW = exports.ATTR_VO_NEW = 'vo-new';
var ATTR_VO_ZERO = exports.ATTR_VO_ZERO = 'vo-zero';

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _generate_uuid = __webpack_require__(2);

var _generate_uuid2 = _interopRequireDefault(_generate_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /* global HTMLElement */


var ShaderSource =
/**
 * @param {string} type - `VERTEX_SHADER` or `FRAGMENT_SHADER`
 * @param {HTMLElement|string} source
 */
function ShaderSource(type, source) {
  _classCallCheck(this, ShaderSource);

  /**
   * @type {string}
   */
  this.id = (0, _generate_uuid2.default)();

  this.type = type;

  /**
   * @type {string}
   */
  this.source = source instanceof HTMLElement ? source.textContent : source;
};

exports.default = ShaderSource;


ShaderSource.VERTEX_SHADER = 'VERTEX_SHADER';
ShaderSource.FRAGMENT_SHADER = 'FRAGMENT_SHADER';

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hasMap = canUseMap();
var hasSymbol = canUseSymbol();
var hasConsole = typeof console !== 'undefined';

var warn = hasConsole ? console[console.warn ? 'warn' : 'log'].bind(console) : function () {};

var PROP_NAMESPACE  = !hasSymbol ? '@@eventize' : (function () {
    if (!Symbol.eventize) {
        Symbol.eventize = Symbol('eventize');
    }
    return Symbol.eventize;
})();

var CATCH_ALL_EVENT = '*';
var LOG_NAMESPACE   = '[eventize.js]';

// =====================================================================
//
// eventize( object )
//
// =====================================================================

function eventize (o) {

    if (o[PROP_NAMESPACE]) return o;

    var _e = {
        lastCallbackId : 0,
        callbacks      : {},
        boundObjects   : []
    };

    _e.callbacks[CATCH_ALL_EVENT] = [];

    var _ePublic = definePublicPropertiesRO({}, {
        silenced : false,
        off      : []
    });

    defineHiddenPropertyRO(o, PROP_NAMESPACE, _ePublic);

    if (eventize.PRIO_DEFAULT === undefined) {

        definePublicPropertiesRO(eventize, {
            PRIO_MAX     : Number.POSITIVE_INFINITY,
            PRIO_A       : 1000000000,
            PRIO_B       : 10000000,
            PRIO_C       : 100000,
            PRIO_DEFAULT : 0,
            PRIO_LOW     : -100000,
            PRIO_MIN     : Number.NEGATIVE_INFINITY
        });

    }

    // -----------------------------------------------------------------
    //
    // object.on( eventName, [ prio, ] callbackFunc )
    // object.on( eventName, [ prio, ] obj )
    //
    // object.on( callbackFunc )    => object.on( '*', callbackFunc )
    // object.on( obj )             => object.on( '*', obj )
    //
    // object.on( eventName )
    // object.on()
    //
    // -----------------------------------------------------------------

    o.on = function (eventName, prio, fn) {  // --- {{{

        var argsLen = arguments.length;

        if (argsLen === 0) {
            if (_ePublic.silenced) {
                definePublicPropertyRO(_ePublic, 'silenced', false);
                _ePublic.off.length = 0;
            }
            return;
        }

        var i;

        if (argsLen === 1) {
            if (typeof eventName === 'string') {

                i = _ePublic.off.indexOf(eventName);
                if (i >= 0) {
                    _ePublic.off.splice(i, 1);
                }
                return;

            } else if (typeof eventName === 'object' || typeof eventName === 'function') {

                // alias for: on('*', listener)

                fn = eventName;
                eventName = CATCH_ALL_EVENT;
                prio = eventize.PRIO_DEFAULT;

            } else {
                if (hasConsole) {
                    warn(LOG_NAMESPACE, '.on() called with insufficient arguments!', arguments);
                }
                return;
            }
        }

        if (argsLen === 2) {
            fn = prio;
            prio = eventize.PRIO_DEFAULT;
        }

        var eventizeCallbacks = _e.callbacks;
        var eventListener = eventizeCallbacks[eventName] || (eventizeCallbacks[eventName] = []);
        var listenerId = createId();
        var listener = definePublicPropertiesRO({}, {
            id         : listenerId,
            fn         : fn,
            prio       : (typeof prio !== 'number' ? eventize.PRIO_DEFAULT : prio),
            isFunction : (typeof fn === 'function'),
        });

        eventListener.push(listener);
        eventListener.sort(sortListenerByPrio);

        return listenerId;

    };

    function createId () {
        return ++_e.lastCallbackId;
    }

    function sortListenerByPrio (a, b) {
        return a.prio !== b.prio ? b.prio - a.prio : a.id - b.id;
    }

    // --- on }}}

    // ----------------------------------------------------------------------
    //
    // object.once( eventName, [ prio, ] callbackFunc )
    // object.once( eventName, [ prio, ] obj )
    //
    // object.once( callbackFunc )      => object.once( '*', callbackFunc )
    // object.once( obj )               => object.once( '*', obj )
    //
    // ----------------------------------------------------------------------

    o.once = function (eventName, prio, fn) {  // --- {{{

        var argsLen = arguments.length;

        if (!argsLen || argsLen > 3) {
            if (hasConsole) {
                warn(LOG_NAMESPACE, '.once() called with insufficient arguments!', arguments);
            }
            return;
        }

        if (argsLen === 1) {

            fn = eventName;
            eventName = CATCH_ALL_EVENT;
            prio = eventize.PRIO_DEFAULT;

        } else if (argsLen === 2) {

            fn = prio;
            prio = eventize.PRIO_DEFAULT;

        }

        var id = o.on(eventName, prio, function () {
            var res = fn.apply(this, arguments);
            o.off(id);
            return res;
        });

        return id;

    };

    // --- once }}}

    // -----------------------------------------------------------------
    //
    // object.off( id )
    // object.off( callback )
    // object.off( obj )
    // object.off( eventName )
    // object.off()
    //
    // deactive listener by id or previously bound object or
    // function reference or event name or silence all events
    //
    // -----------------------------------------------------------------

    o.off = function (id) {  // -- {{{

        if (arguments.length === 0) {
            if (!_ePublic.silenced) {
                definePublicPropertyRO(_ePublic, 'silenced', true);
                _ePublic.off.length = 0;
            }
            return;
        }

        if (typeof id === 'string') {
            //
            // by event name
            //
            if (_ePublic.off.indexOf(id) === -1) {
                _ePublic.off.push(id);
            }
            return;
        }

        var eventizeCallbacks = _e.callbacks;
        var cb, i, j, _callbacks, keys;
        var isObject = typeof id === 'object';

        if (typeof id === 'number' || typeof id === 'function' || isObject) {
            //
            // by id or function reference
            //
            keys = Object.keys(eventizeCallbacks);
            for (j = 0; j < keys.length; j++) {
                _callbacks = eventizeCallbacks[keys[j]];
                for (i = 0; i < _callbacks.length; i++) {
                    cb = _callbacks[i];
                    if (cb.id === id || cb.fn === id) {
                        _callbacks.splice(i, 1);
                        if (!isObject) return;
                    }
                }
            }
        }

        if (isObject) {
            //
            // by bound object reference
            //
            i = _e.boundObjects.indexOf(id);
            if ( i >= 0 ) {
                _e.boundObjects.splice(i, 1);
            }
        }

    };

    // --- off }}}

    // -----------------------------------------------------------------
    //
    // object.connect( obj, mapping )
    //
    // Example:
    //
    //   object.connect(options, {
    //        onProjectionUpdated : [100, 'projectionUpdated'],
    //        onFrame             : 'frame',
    //        onFrameEnd          : 'frameEnd'
    //   })
    //
    // -----------------------------------------------------------------

    o.connect = function (obj, mapping) {  // --- {{{
        var argsLen = arguments.length;
        if (argsLen === 2) {
            return _connectWithMapping(this, obj, mapping);
        } else {
            if (hasConsole) {
                warn(LOG_NAMESPACE, '.connect() called with insufficient arguments (need 2 args, but got ' + argsLen + ')', arguments);
            }
        }
    };

    function _bindObject (obj) {

        // TODO connect(obj) should ..
        // - support priority
        // - support filters? (via only, except options)
        // - support senderContextArgument?: 'prepend'|'append'|false

        if (!obj) return;
        var i = _e.boundObjects.indexOf(obj);
        if (i === -1) {
            _e.boundObjects.push(obj);
        }
        return obj;

    }

    function _connectWithMapping (obj, options, listenerMap) {

        var eventName, listenName, listenFunc, prio;

        for (listenName in listenerMap) {
            if (listenerMap.hasOwnProperty(listenName)) {
                listenFunc = options[listenName];
                if (typeof listenFunc === 'function') {
                    eventName = listenerMap[listenName];
                    if (Array.isArray(eventName)) {
                        prio = eventName[0];
                        eventName = eventName[1];
                    } else {
                        prio = eventize.PRIO_DEFAULT;
                    }
                    obj.on(eventName, prio, listenFunc);
                }
            }
        }

        return obj;

    }

    // --- connect }}}

    // -----------------------------------------------------------------
    //
    // object.emit( eventName [, arguments .. ] )
    //
    // -----------------------------------------------------------------

    o.emit = function () {  // --- {{{

        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments
        var argsWithEventName = new Array(arguments.length);
        for (var i = 0; i < argsWithEventName.length; ++i) {
            argsWithEventName[i] = arguments[i];
        }

        var eventName = argsWithEventName[0];
        var argsWithoutEventName = argsWithEventName.slice(1);
        var senderCtx = this;

        _dispatch(eventName, function (listener) {

            if (listener.isFunction) {
                listener.fn.apply(senderCtx, argsWithoutEventName);
            } else {
                var fn = listener.fn[eventName];
                if (typeof fn === 'function') {
                    fn.apply(listener.fn, argsWithoutEventName);
                } else if (listener.fn.emit) {
                    listener.fn.emit.apply(listener.fn, argsWithEventName);
                }
            }

        }, function (fn, boundObj) {

            if (fn) {
                fn.apply(boundObj, argsWithoutEventName);
            } else if (boundObj.emit) {
                boundObj.emit.apply(boundObj, argsWithEventName);
            }

        });

    }

    function _dispatch (eventName, emitListener, emitBoundObject) {

        if (_ePublic.silenced) return;
        if (_ePublic.off.indexOf(eventName) >= 0) return;

        var listeners              = _e.callbacks[eventName];
        var catchAllListeners      = _e.callbacks[CATCH_ALL_EVENT];
        var boundObjsCount         = _e.boundObjects.length;
        var hasBoundObjectsEmitted = false;

        function _emitBoundObjects () {
            var j, bo, fn;
            if (boundObjsCount) {
                for (j = 0; j < boundObjsCount; j++) {
                    bo = _e.boundObjects[j];
                    fn = bo[eventName];
                    if (typeof fn === 'function') {
                        emitBoundObject(fn, bo);
                    } else if (bo[PROP_NAMESPACE]) {
                        emitBoundObject(null, bo);
                    }
                }
            }
        }

        var i, len, listen;

        if (listeners || catchAllListeners.length) {

            listeners = listeners ? listeners.concat(catchAllListeners) : catchAllListeners;
            len = listeners.length;

            for (i = 0; i < len; i++) {
                listen = listeners[i];
                if (!hasBoundObjectsEmitted && listen && listen.prio < eventize.PRIO_DEFAULT) {
                    _emitBoundObjects();
                    hasBoundObjectsEmitted = true;
                }
                emitListener(listen);
            }
        }

        if (!hasBoundObjectsEmitted) _emitBoundObjects();

    }

    // --- emit }}}

    // --------------------------------------------------------------------
    //
    // object.emitReduce( eventName [, value= {} ] [, arguments .. ] )
    //
    // --------------------------------------------------------------------

    o.emitReduce = function () {  // --- {{{

        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i) {
            args[i] = arguments[i];
        }

        var eventName = args.shift();
        var value;

        function setValue (val) {
            if (val !== undefined) {
                value = val;
            }
        }

        if (args.length === 0) {
            value = {};
            args.push(value);
        } else {
            setValue(args[0]);
        }

        var ctx = this;
        var argsWithEventName = [eventName].concat(args);

        _dispatch(eventName, function (listener) {

            if (listener.isFunction) {
                args[0] = value;
                setValue(listener.fn.apply(ctx, args));
            } else {
                var fn = listener.fn[eventName];
                if (typeof fn === 'function') {
                    args[0] = value;
                    setValue(fn.apply(listener.fn, args));
                } else if (listener.fn.emitReduce) {
                    argsWithEventName[1] = value;
                    setValue(listener.fn.emitReduce.apply(listener.fn, argsWithEventName));
                }
            }

        }, function (fn, boundObj) {

            if (fn) {
                args[0] = value;
                setValue(fn.apply(boundObj, args));
            }

        });

        return value;

    };

    // --- emit }}}

    // --------------------------------------------------------------------
    //
    // object.from( eventName, Observable )
    //
    // See https://github.com/tc39/proposal-observable
    //
    // Example:
    //
    //      object
    //          .from('foo', Rx.Observable)
    //          .filter(x => x % 2 === 0)
    //          .subscribe(x => console.log(x));
    //
    //
    // --------------------------------------------------------------------

    o.from = function (eventName, observable) {  // --- {{{
        var self = this;
        return new observable(function (observer) {

            var id = self.on(eventName, function (data) {
                observer.next(data);
            });

            return function () {
                self.off(id);
            };

        });
    };

    // --- from }}}

    // --------------------------------------------------------------------
    //
    // object.subscribe( Observable, onNext[, onError][, onComplete] )
    //
    // Example:
    //
    //      object.subscribe(a, 'value', 'error');   // a => Observable
    //
    // --------------------------------------------------------------------

    o.subscribe = function (source, onNext, onError, onComplete) {  // --- {{{
        var self = this;
        return source.subscribe(function (value) {
            self.emit(onNext, value);
        }, onError ? function (errorValue) {
            self.emit(onError, errorValue);
        } : undefined, onComplete ? function (completeValue) {
            self.emit(onComplete, completeValue);
        } : undefined);
    };

    // --- subscribe }}}

    return o;

} // <= eventize()


eventize.is = function (obj) {
    return !!( obj && obj[PROP_NAMESPACE] );
};


defineHiddenPropertyRO( eventize,
    'EventizeNamespace', PROP_NAMESPACE);


// ==========================================================================
//
// eventize.queue([ queueId ][, options]) : queue
//
// options are:
//    - replace: true|false  - replace previous events with same name
//                             when queue is in collection mode
//
// queue.play()              - activate play (immediately emit) mode
// queue.collect()           - activate collection (store all events) mode
// queue.toggle()            - toggle state
// queue.state               - 'play'|'collect'
//
// ==========================================================================

defineHiddenPropertyRO(eventize, 'queues', hasMap ? new Map : {});

eventize.queue = function (id/*, options */) {

    var queue, options;
    var len = arguments.length;

    if (len >= 1) {
        if (typeof id !== 'object' || len === 2) {
            queue = hasMap ? eventize.queues.get(id) : eventize.queues[id];
        }
        if (len === 2) {
            options = arguments[1];
        } else if (len === 1 && typeof id === 'object') {
            options = id;
        }
    }

    if (!queue) {
        queue = createQueue(id, options);
        if (hasMap) {
            eventize.queues.set(queue.id, queue);
        } else {
            eventize.queues[queue.id] = queue;
        }
    }

    return queue;

};


var STATE = 'state';
var PLAY = 'play';
var COLLECT = 'collect';

function createQueue (id, options) {

    var queueId = ((typeof id === 'string' || typeof id === 'symbol') && id) || createUuid();
    var queue = eventize({});
    var isReplace = !!(options && options.replace);

    var setState = function (state) {
        definePublicPropertyRO(queue, STATE, state);
    };

    var emit = (function (_emit) {
            return function (args) {
            _emit.apply(queue, args);
        };
    })(queue.emit);

    defineHiddenPropertyRO(queue, 'events', []);
    definePublicPropertyRO(queue, 'id', queueId);

    queue.collect = function () {
        if (queue[STATE] !== COLLECT) {
            setState(COLLECT);
        }
        return queue;
    };

    queue.emit = function () {
        var args = new Array(arguments.length);
        var i;
        for (i = 0; i < args.length; ++i) {
            args[i] = arguments[i];
        }
        if (queue[STATE] === PLAY) {
            emit(args);
        } else {  // COLLECT
            if (isReplace) {
                var len, eventName = args[0];
                for (i = 0, len = queue.events.length; i < len; i++) {
                    if (queue.events[i][0] === eventName) {
                        queue.events[i] = args;
                        return;
                    }
                }
            }
            queue.events.push(args);
        }
    };

    queue.play = function () {
        if (queue[STATE] !== PLAY) {
            setState(PLAY);
            queue.events.forEach(emit);
            queue.events.length = 0;
        }
        return queue;
    };

    queue.toggle = function () {
        return queue[STATE] !== PLAY ? queue.play() : queue.collect();
    };

    return queue.play();

}


// =====================================================================
//
// helper functions
//
// =====================================================================


function createUuid () {
    // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
    });
    return hasSymbol ? Symbol(uuid) : uuid;
}

function canUseSymbol () {
    return typeof Symbol !== 'undefined';
}

function canUseMap () {
    return typeof Map !== 'undefined';
}

function definePublicPropertyRO (obj, name, value) {
    Object.defineProperty(obj, name, {
        value        : value,
        configurable : true,
        enumerable   : true
    });
    return obj;
}

function definePublicPropertiesRO (obj, attrs) {
    var i, keys = Object.keys(attrs);
    for (i = keys.length; i--;) {
        definePublicPropertyRO(obj, keys[i], attrs[keys[i]]);
    }
    return obj;
}

function defineHiddenPropertyRO (obj, name, value) {
    Object.defineProperty(obj, name, {
        value        : value,
        configurable : true
    });
    return obj;
}


// --- end
//
module.exports = eventize;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(103);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(104);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(23),
    isObjectLike = __webpack_require__(24);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9),
    getRawTag = __webpack_require__(106),
    objectToString = __webpack_require__(107);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),
/* 24 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _math_helpers = __webpack_require__(45);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents a `<img>` or `<canvas>` element which sizes (width and height) are
 * always power of 2.
 */
var PowerOf2Image = function () {
  /**
   * If image dimension is NOT power of 2 then create a new `<canvas>`
   * (with power of 2 dimension) and copy the original image content onto it.
   * Since fetching imge data from server is a *async* operation the `imgEl` property
   * can be `null` right after object construction and will be set later after
   * image is loaded (and possible converted).
   *
   * @param {string|HTMLImageElement|HTMLCanvasElement} from - url or html *image* element
   */
  function PowerOf2Image(from) {
    var _this = this;

    _classCallCheck(this, PowerOf2Image);

    var imgEl = void 0;
    if (typeof from === 'string') {
      imgEl = new window.Image();
      imgEl.src = from;
    } else {
      imgEl = from;
    }
    if (imgEl.complete === false || imgEl.width === 0 && imgEl.height === 0) {
      /**
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.imgEl = null;
      /**
       * @type {Promise<PowerOf2Image>}
       */
      this.complete = new Promise(function (resolve) {
        var origOnLoad = imgEl.onload;
        imgEl.onload = function () {
          if (origOnLoad) origOnLoad.call(imgEl);
          setPowerOf2ImgEl(_this, imgEl);
          resolve(_this);
        };
      });
    } else {
      setPowerOf2ImgEl(this, imgEl);
      /**
       * @type {Promise<PowerOf2Image>}
       */
      this.complete = Promise.resolve(this);
    }
  }

  /**
   * A boolean that is `true` if the image has loaded and possible converted.
   * @type {boolean}
   */


  _createClass(PowerOf2Image, [{
    key: 'isComplete',
    get: function get() {
      return this.imgEl != null;
    }

    /**
     * Returns image width or `0` if image loading is not finished.
     * @type {number}
     */

  }, {
    key: 'width',
    get: function get() {
      return this.imgEl && this.imgEl.width || 0;
    }

    /**
     * Returns image height or `0` if image loading is not finished.
     * @type {number}
     */

  }, {
    key: 'height',
    get: function get() {
      return this.imgEl && this.imgEl.height || 0;
    }
  }]);

  return PowerOf2Image;
}();

exports.default = PowerOf2Image;


function setPowerOf2ImgEl(p2img, imgEl) {
  p2img.imgEl = (0, _math_helpers.isPowerOf2)(imgEl.width) && (0, _math_helpers.isPowerOf2)(imgEl.height) ? imgEl : convertToPowerOf2(imgEl);
  p2img.origWidth = imgEl.width;
  p2img.origHeight = imgEl.height;
}

function convertToPowerOf2(image) {
  var w = (0, _math_helpers.findNextPowerOf2)(image.width);
  var h = (0, _math_helpers.findNextPowerOf2)(image.height);

  var canvas = document.createElement('canvas');
  canvas.width = w;
  canvas.height = h;
  canvas.getContext('2d').drawImage(image, 0, 0);

  return canvas;
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _shader_variable = __webpack_require__(4);

var _shader_variable2 = _interopRequireDefault(_shader_variable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Shader texture 2d variable.
 */
var ShaderTexture2dVariable = function (_ShaderVariable) {
  _inherits(ShaderTexture2dVariable, _ShaderVariable);

  /**
   * @param {string} name
   * @param {number|Object} value
   */
  function ShaderTexture2dVariable(name, value) {
    _classCallCheck(this, ShaderTexture2dVariable);

    var _this = _possibleConstructorReturn(this, _ShaderVariable.call(this, name, _shader_variable2.default.TYPE.TEXTURE_2D, value));

    _this.texture = null;
    return _this;
  }

  /**
   * Sync texture to gpu and update `.value` to the gl texture unit.
   *
   * @param {WebGlRenderer} renderer
   */


  ShaderTexture2dVariable.prototype.syncTextureAndValue = function syncTextureAndValue(renderer) {
    if (this.texture != null) {
      var glTex = renderer.syncTexture(this.texture);
      this.value = glTex.bind();
    }
  };

  return ShaderTexture2dVariable;
}(_shader_variable2.default);

exports.default = ShaderTexture2dVariable;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(133),
    getValue = __webpack_require__(138);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),
/* 28 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(22);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _texture = __webpack_require__(15);

var _texture2 = _interopRequireDefault(_texture);

var _texture_atlas_spec = __webpack_require__(62);

var _texture_atlas_spec2 = _interopRequireDefault(_texture_atlas_spec);

var _sample = __webpack_require__(63);

var _sample2 = _interopRequireDefault(_sample);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
  * @example
  * TextureAtlas.load('nobinger.json').then(atlas => {
  *   const blau = atlas.getFrame('nobinger-blau.png')
  *   blau.width   # => 55
  *   blau.height  # => 61
  * })
  */
var TextureAtlas = function () {
  /**
   * @param {Texture} rootTexture
   * @param {TextureAtlasSpec} [spec=null]
   */
  function TextureAtlas(rootTexture) {
    var spec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, TextureAtlas);

    /**
     * @type {Texture}
     */
    this.rootTexture = rootTexture;
    /**
     * @type {TextureAtlasSpec}
     */
    this.spec = spec;
    /**
     * @type {Map<string,Texture>}
     */
    this.frames = new Map();
  }

  /**
   * @param {string} name
   * @param {number} width
   * @param {number} height
   * @param {number} x
   * @param {number} y
   */


  TextureAtlas.prototype.addFrame = function addFrame(name, width, height, x, y) {
    this.frames.set(name, new _texture2.default(this.rootTexture, width, height, x, y));
  };

  /**
   * @param {string} name
   * @returns {Texture}
   */


  TextureAtlas.prototype.getFrame = function getFrame(name) {
    return this.frames.get(name);
  };

  /**
   * @returns {Texture}
   */


  TextureAtlas.prototype.getRandomFrame = function getRandomFrame() {
    return (0, _sample2.default)(Array.from(this.frames.values()));
  };

  /**
   * @returns {string}
   */


  TextureAtlas.prototype.getRandomFrameName = function getRandomFrameName() {
    return (0, _sample2.default)(this.frameNames());
  };

  /**
   * @returns {Array<string>}
   */


  TextureAtlas.prototype.frameNames = function frameNames() {
    return Array.from(this.frames.keys());
  };

  /**
   * Loads a TextureAtlas.
   * @param {string} url - should point to the *texture atlas json spec*
   * @param {object} [fetchOptions=undefined] - options for the `fetch()` call
   * @param {string|function|PowerOf2Image|HTMLImageElement|HTMLCanvasElement} [image=null] - per default the image will be loaded from `meta.image` url from the *texture atlas spec*
   * @param {object} [textureHints=undefined] - texture hints
   * @returns {Promise<TextureAtlas>}
   */


  TextureAtlas.load = function load(url) {
    var fetchOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var image = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var textureHints = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

    return _texture_atlas_spec2.default.load(url, fetchOptions || {}).then(function (atlasSpec) {
      return atlasSpec.createTextureAtlas(image || atlasSpec.imageUrl, textureHints);
    });
  };

  return TextureAtlas;
}();

exports.default = TextureAtlas;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _component_registry = __webpack_require__(66);

var _component_registry2 = _interopRequireDefault(_component_registry);

var _registerCoreComponents = __webpack_require__(67);

var _registerCoreComponents2 = _interopRequireDefault(_registerCoreComponents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var componentRegistry = new _component_registry2.default();
(0, _registerCoreComponents2.default)(componentRegistry);

exports.default = componentRegistry;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getDefaultOption = exports.removeItem = exports.sample = exports.parseCssStyledProperties = exports.maxOf = exports.isPowerOf2 = exports.generateUuid = exports.findNextPowerOf2 = exports.Mat4 = undefined;

var _generate_uuid = __webpack_require__(2);

var _generate_uuid2 = _interopRequireDefault(_generate_uuid);

var _mat = __webpack_require__(46);

var _mat2 = _interopRequireDefault(_mat);

var _math_helpers = __webpack_require__(45);

var _parseCssStyledProperties = __webpack_require__(177);

var _parseCssStyledProperties2 = _interopRequireDefault(_parseCssStyledProperties);

var _sample = __webpack_require__(63);

var _sample2 = _interopRequireDefault(_sample);

var _removeItem = __webpack_require__(69);

var _removeItem2 = _interopRequireDefault(_removeItem);

var _getDefaultOption = __webpack_require__(178);

var _getDefaultOption2 = _interopRequireDefault(_getDefaultOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Mat4 = _mat2.default;
exports.findNextPowerOf2 = _math_helpers.findNextPowerOf2;
exports.generateUuid = _generate_uuid2.default;
exports.isPowerOf2 = _math_helpers.isPowerOf2;
exports.maxOf = _math_helpers.maxOf;
exports.parseCssStyledProperties = _parseCssStyledProperties2.default;
exports.sample = _sample2.default;
exports.removeItem = _removeItem2.default;
exports.getDefaultOption = _getDefaultOption2.default;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _entity_manager = __webpack_require__(70);

var _entity_manager2 = _interopRequireDefault(_entity_manager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var entityManager = new _entity_manager2.default();

exports.default = entityManager;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var log = typeof console !== 'undefined' ? typeof console.debug === 'function' ? function () {
  var _console;

  return (_console = console).debug.apply(_console, arguments);
} : function () {
  var _console2;

  return (_console2 = console).log.apply(_console2, arguments);
} : function () {
  return 1;
};

var error = typeof console !== 'undefined' ? typeof console.error === 'function' ? function () {
  var _console3;

  return (_console3 = console).error.apply(_console3, arguments);
} : function () {
  var _console4;

  return (_console4 = console).log.apply(_console4, arguments);
} : function () {
  return 1;
};

exports.default = log;
exports.error = error;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.textureLibrary = exports.resourceLibrary = exports.entityManager = exports.componentRegistry = exports.utils = exports.ecs = exports.core = exports.App = undefined;

var _app = __webpack_require__(77);

var _app2 = _interopRequireDefault(_app);

var _core = __webpack_require__(40);

var core = _interopRequireWildcard(_core);

var _ecs = __webpack_require__(190);

var ecs = _interopRequireWildcard(_ecs);

var _utils = __webpack_require__(32);

var utils = _interopRequireWildcard(_utils);

var _componentRegistry = __webpack_require__(31);

var _componentRegistry2 = _interopRequireDefault(_componentRegistry);

var _entityManager = __webpack_require__(33);

var _entityManager2 = _interopRequireDefault(_entityManager);

var _resourceLibrary = __webpack_require__(72);

var _resourceLibrary2 = _interopRequireDefault(_resourceLibrary);

var _textureLibrary = __webpack_require__(73);

var _textureLibrary2 = _interopRequireDefault(_textureLibrary);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.App = _app2.default;
exports.core = core;
exports.ecs = ecs;
exports.utils = utils;
exports.componentRegistry = _componentRegistry2.default;
exports.entityManager = _entityManager2.default;
exports.resourceLibrary = _resourceLibrary2.default;
exports.textureLibrary = _textureLibrary2.default;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _web_gl_resource_library = __webpack_require__(78);

var _web_gl_resource_library2 = _interopRequireDefault(_web_gl_resource_library);

var _web_gl_texture_manager = __webpack_require__(89);

var _web_gl_texture_manager2 = _interopRequireDefault(_web_gl_texture_manager);

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebGlContext = function () {
  function WebGlContext(gl) {
    _classCallCheck(this, WebGlContext);

    Object.defineProperty(this, 'gl', { value: gl });

    initialize(this);

    this.resourceLibrary = new _web_gl_resource_library2.default(this);
    this.boundBuffers = new Map();
    this.currentProgram = 0;
    this.enabledVertexAttribLocations = [];

    this.textureManager = new _web_gl_texture_manager2.default(this);

    this.boundTextures = new Array(this.MAX_TEXTURE_IMAGE_UNITS);
    for (var i = 0; i < this.boundTextures.length; i++) {
      this.boundTextures[i] = { TEXTURE_2D: null };
    }

    this.readCurrentState();
    this.activeTexture(0); // enable first texture unit by default
  }

  WebGlContext.prototype.destroy = function destroy() {
    this.textureManager.destroy();
    this.boundBuffers.clear();
    this.resourceLibrary.destroy();
    (0, _destroy3.default)(this);
  };

  /**
   * @param {BlendMode} blendMode
   */


  WebGlContext.prototype.blend = function blend(blendMode) {
    var gl = this.gl;

    if (blendMode.enable) {
      if (!this.blendEnabled) {
        gl.enable(gl.BLEND);
        this.blendEnabled = true;
      }
      gl.blendFunc(gl[blendMode.sfactor], gl[blendMode.dfactor]);
    } else if (this.blendEnabled) {
      gl.disable(gl.BLEND);
      this.blendEnabled = false;
    }
  };

  /**
   * @param {number} texUnit
   */


  WebGlContext.prototype.activeTexture = function activeTexture(texUnit) {
    var gl = this.gl;

    var tex = gl.TEXTURE0 + texUnit;

    if (this.activeTexUnit !== tex) {
      this.activeTexUnit = tex;
      gl.activeTexture(this.activeTexUnit);
    }
  };

  /**
   * @param {number} glTextureId
   */


  WebGlContext.prototype.bindTexture2d = function bindTexture2d(glTextureId) {
    var gl = this.gl;

    var bound = this.boundTextures[this.activeTexUnit - gl.TEXTURE0];

    if (bound.TEXTURE_2D !== glTextureId) {
      bound.TEXTURE_2D = glTextureId;
      gl.bindTexture(gl.TEXTURE_2D, glTextureId);
    }
  };

  WebGlContext.prototype.readCurrentState = function readCurrentState() {
    var gl = this.gl;

    // https://developer.mozilla.org/de/docs/Web/API/WebGLRenderingContext/getParameter

    this.boundBuffers.set(gl.ARRAY_BUFFER, gl.getParameter(gl.ARRAY_BUFFER_BINDING));
    this.boundBuffers.set(gl.ELEMENT_ARRAY_BUFFER, gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING));

    this.currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);
    this.blendEnabled = gl.getParameter(gl.BLEND);
  };

  WebGlContext.prototype.bindBuffer = function bindBuffer(target, buffer) {
    if (this.boundBuffers.get(target) !== buffer) {
      this.gl.bindBuffer(target, buffer);
      this.boundBuffers.set(target, buffer);
    }
  };

  /**
   * @return {boolean}
   */


  WebGlContext.prototype.useProgram = function useProgram(glProgram) {
    if (this.currentProgram !== glProgram) {
      this.gl.useProgram(glProgram);
      this.currentProgram = glProgram;
      return true;
    }
    return false;
  };

  WebGlContext.prototype.enableVertexAttribArrays = function enableVertexAttribArrays(enableLocations) {
    var _this = this;

    var gl = this.gl;


    this.enabledVertexAttribLocations.filter(function (location) {
      return enableLocations.indexOf(location) === -1;
    }).forEach(function (location) {
      gl.disableVertexAttribArray(location);
      _this.enabledVertexAttribLocations.splice(enableLocations.indexOf(location), 1);
    });

    enableLocations.forEach(function (loc) {
      var idx = _this.enabledVertexAttribLocations.indexOf(loc);
      if (idx === -1) {
        gl.enableVertexAttribArray(loc);
        _this.enabledVertexAttribLocations.push(loc);
      }
    });
  };

  return WebGlContext;
}();

/** @private */


exports.default = WebGlContext;
function initialize(glx) {
  var gl = glx.gl;


  glx.DEPTH_BITS = gl.getParameter(gl.DEPTH_BITS);
  glx.STENCIL_BITS = gl.getParameter(gl.STENCIL_BITS);
  glx.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
}

/***/ }),
/* 37 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebGlBuffer = function () {
  function WebGlBuffer(glx) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebGlBuffer.ARRAY_BUFFER;
    var usage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : WebGlBuffer.STATIC_DRAW;

    _classCallCheck(this, WebGlBuffer);

    this.glx = glx;

    var gl = glx.gl;

    this.target = gl[target];
    this.usage = gl[usage];

    this.glBuffer = gl.createBuffer();
  }

  WebGlBuffer.prototype.bindBuffer = function bindBuffer() {
    this.glx.bindBuffer(this.target, this.glBuffer);
  };

  /**
   * Upload array buffer content to gpu via `g.bufferData(..)`.
   */


  WebGlBuffer.prototype.bufferData = function bufferData(typedArray) {
    this.bindBuffer();
    this.glx.gl.bufferData(this.target, typedArray, this.usage);
  };

  return WebGlBuffer;
}();

exports.default = WebGlBuffer;


WebGlBuffer.ARRAY_BUFFER = 'ARRAY_BUFFER';
WebGlBuffer.ELEMENT_ARRAY_BUFFER = 'ELEMENT_ARRAY_BUFFER';

WebGlBuffer.STATIC_DRAW = 'STATIC_DRAW';
WebGlBuffer.DYNAMIC_DRAW = 'DYNAMIC_DRAW';

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _core = __webpack_require__(40);

var _clear_buffer = __webpack_require__(176);

var _clear_buffer2 = _interopRequireDefault(_clear_buffer);

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var autotouchBuffer = function autotouchBuffer(renderer, resourceRef) {
  var resource = resourceRef.resource;

  if (resource.enableAutotouch) {
    if (!renderer.autotouchResources.has(resourceRef.id)) {
      renderer.autotouchResources.set(resourceRef.id, true);
      resource.touch();
    }
  }
};

var applyBlendMode = function applyBlendMode(renderer) {
  var blendMode = renderer.blendStack[renderer.blendStack.length - 1] || renderer.initialBlendMode;
  if (blendMode && !blendMode.isEqual(renderer.currentBlendMode)) {
    renderer.glx.blend(blendMode);
    renderer.currentBlendMode = blendMode;
  }
};

var WebGlRenderer = function () {
  function WebGlRenderer(glx) {
    _classCallCheck(this, WebGlRenderer);

    Object.defineProperty(this, 'glx', { value: glx });

    this.shaderContext = new _core.ShaderContext();
    this.autotouchResources = new Map();
    this.clearBuffer = new _clear_buffer2.default(this.glx);
    this.blendStack = [];
    this.initialBlendMode = null;
    this.currentBlendMode = null;
    this.viewport = null;
  }

  WebGlRenderer.prototype.destroy = function destroy() {
    this.shaderContext.destroy();
    this.autotouchResources.clear();
    this.blendStack.length = 0;
    (0, _destroy3.default)(this);
  };

  WebGlRenderer.prototype.setViewport = function setViewport(x, y, width, height) {
    var viewport = this.viewport;

    if (!viewport) {
      this.viewport = new _core.Viewport();
      viewport = this.viewport;
    }
    viewport.x = x;
    viewport.y = y;
    viewport.width = width;
    viewport.height = height;
  };

  /**
   * Set the initial blend mode.
   *
   * @param {BlendMode} blendMode
   */


  WebGlRenderer.prototype.setInitialBlendMode = function setInitialBlendMode(blendMode) {
    this.initialBlendMode = blendMode;
  };

  WebGlRenderer.prototype.renderFrame = function renderFrame(renderCallback) {
    this.beginRenderFrame();
    renderCallback();
    this.endRenderFrame();
  };

  WebGlRenderer.prototype.beginRenderFrame = function beginRenderFrame() {
    this.shaderContext.clear();
    this.clearBuffer.reset();
    this.setGlViewport(this.viewport);
  };

  WebGlRenderer.prototype.endRenderFrame = function endRenderFrame() {
    this.autotouchResources.clear();
  };

  WebGlRenderer.prototype.setGlViewport = function setGlViewport(viewport) {
    var gl = this.glx.gl;

    if (viewport) {
      gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
    } else {
      gl.viewport(0, 0);
    }
  };

  /**
   * Push a new blend mode to the stack.
   *
   * @param {BlendMode} blendMode
   */


  WebGlRenderer.prototype.pushBlendMode = function pushBlendMode(blendMode) {
    this.blendStack.push(blendMode);
  };

  /**
   * Remove the current blend mode from internal stack.
   * The initial blend mode can't be removed.
   */


  WebGlRenderer.prototype.popBlendMode = function popBlendMode() {
    this.blendStack.pop();
  };

  /**
   * @param {ShaderProgram} shaderProgram
   */


  WebGlRenderer.prototype.useShaderProgram = function useShaderProgram(shaderProgram) {
    var program = this.glx.resourceLibrary.loadProgram(shaderProgram);
    var shaderContext = this.shaderContext;

    program.use(shaderContext);
    program.loadUniforms(shaderContext, this);
    program.loadAttributes(shaderContext, this);
  };

  /**
   * @param {string} primitive
   * @param {number} count
   * @param {number} [startIndex=0]
   */


  WebGlRenderer.prototype.drawArrays = function drawArrays(primitive, count) {
    var startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    applyBlendMode(this);

    var gl = this.glx.gl;

    gl.drawArrays(gl[primitive], startIndex, count);
  };

  /**
   * @param {string} primitive
   * @param {ElementIndexArray} elementIndexArray
   * @param {number} [count]
   * @param {number} [offset=0]
   */


  WebGlRenderer.prototype.drawIndexed = function drawIndexed(primitive, elementIndexArray, count) {
    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    applyBlendMode(this);
    this.syncBuffer(elementIndexArray).bindBuffer();

    var gl = this.glx.gl;

    gl.drawElements(gl[primitive], count || elementIndexArray.length, gl.UNSIGNED_SHORT, offset * elementIndexArray.array.BYTES_PER_ELEMENT);
  };

  /**
   * @param {VOArray|ElementIndexArray} resource
   * @return {WebGlBuffer}
   */


  WebGlRenderer.prototype.syncBuffer = function syncBuffer(resource) {
    var resourceRef = resource.resourceRef;

    autotouchBuffer(this, resourceRef);

    var bufferRef = this.glx.resourceLibrary.loadBuffer(resourceRef);
    bufferRef.sync(resourceRef, function (buffer) {
      return buffer.bufferData(resourceRef.hints.typedArray);
    });
    return bufferRef.resource;
  };

  /**
   * @param {Texture} texture
   * @return {WebGlTexture}
   */


  WebGlRenderer.prototype.syncTexture = function syncTexture(texture) {
    var texRef = texture.resourceRef;
    var glTexRef = this.glx.resourceLibrary.loadTexture(texRef);
    glTexRef.sync(texRef, function (tex) {
      return tex.uploadImageData();
    });
    return glTexRef.resource;
  };

  return WebGlRenderer;
}();

exports.default = WebGlRenderer;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Viewport = exports.VOPool = exports.VODescriptor = exports.VOAttrDescriptor = exports.VOArray = exports.TextureState = exports.TextureLibrary = exports.TextureAtlasSpec = exports.TextureAtlas = exports.Texture = exports.SpriteGroup = exports.ShaderVariableGroup = exports.ShaderVariableBufferGroup = exports.ShaderVariableAlias = exports.ShaderVariable = exports.ShaderUniformVariable = exports.ShaderTextureGroup = exports.ShaderTexture2dVariable = exports.ShaderSource = exports.ShaderProgram = exports.ShaderContext = exports.ShaderAttribVariable = exports.ShaderAttribValue = exports.ResourceLibrary = exports.Projection = exports.PowerOf2Image = exports.ElementIndexArray = exports.BlendMode = exports.AABB2 = undefined;

var _v_o_descriptor = __webpack_require__(41);

var _v_o_descriptor2 = _interopRequireDefault(_v_o_descriptor);

var _v_o_pool = __webpack_require__(42);

var _v_o_pool2 = _interopRequireDefault(_v_o_pool);

var _aabb = __webpack_require__(43);

var _aabb2 = _interopRequireDefault(_aabb);

var _blend_mode = __webpack_require__(96);

var _blend_mode2 = _interopRequireDefault(_blend_mode);

var _element_index_array = __webpack_require__(44);

var _element_index_array2 = _interopRequireDefault(_element_index_array);

var _power_of_2_image = __webpack_require__(25);

var _power_of_2_image2 = _interopRequireDefault(_power_of_2_image);

var _projection = __webpack_require__(112);

var _projection2 = _interopRequireDefault(_projection);

var _resource_library = __webpack_require__(51);

var _resource_library2 = _interopRequireDefault(_resource_library);

var _shader_attrib_value = __webpack_require__(52);

var _shader_attrib_value2 = _interopRequireDefault(_shader_attrib_value);

var _shader_attrib_variable = __webpack_require__(53);

var _shader_attrib_variable2 = _interopRequireDefault(_shader_attrib_variable);

var _shader_context = __webpack_require__(119);

var _shader_context2 = _interopRequireDefault(_shader_context);

var _shader_program = __webpack_require__(54);

var _shader_program2 = _interopRequireDefault(_shader_program);

var _shader_source = __webpack_require__(18);

var _shader_source2 = _interopRequireDefault(_shader_source);

var _shader_texture_2d_variable = __webpack_require__(26);

var _shader_texture_2d_variable2 = _interopRequireDefault(_shader_texture_2d_variable);

var _shader_texture_group = __webpack_require__(55);

var _shader_texture_group2 = _interopRequireDefault(_shader_texture_group);

var _shader_uniform_variable = __webpack_require__(50);

var _shader_uniform_variable2 = _interopRequireDefault(_shader_uniform_variable);

var _shader_variable = __webpack_require__(4);

var _shader_variable2 = _interopRequireDefault(_shader_variable);

var _shader_variable_alias = __webpack_require__(56);

var _shader_variable_alias2 = _interopRequireDefault(_shader_variable_alias);

var _shader_variable_buffer_group = __webpack_require__(57);

var _shader_variable_buffer_group2 = _interopRequireDefault(_shader_variable_buffer_group);

var _shader_variable_group = __webpack_require__(10);

var _shader_variable_group2 = _interopRequireDefault(_shader_variable_group);

var _sprite_group = __webpack_require__(120);

var _sprite_group2 = _interopRequireDefault(_sprite_group);

var _texture = __webpack_require__(15);

var _texture2 = _interopRequireDefault(_texture);

var _texture_atlas = __webpack_require__(30);

var _texture_atlas2 = _interopRequireDefault(_texture_atlas);

var _texture_atlas_spec = __webpack_require__(62);

var _texture_atlas_spec2 = _interopRequireDefault(_texture_atlas_spec);

var _texture_library = __webpack_require__(64);

var _texture_library2 = _interopRequireDefault(_texture_library);

var _texture_state = __webpack_require__(65);

var _texture_state2 = _interopRequireDefault(_texture_state);

var _v_o_array = __webpack_require__(7);

var _v_o_array2 = _interopRequireDefault(_v_o_array);

var _v_o_attr_descriptor = __webpack_require__(8);

var _v_o_attr_descriptor2 = _interopRequireDefault(_v_o_attr_descriptor);

var _Viewport = __webpack_require__(175);

var _Viewport2 = _interopRequireDefault(_Viewport);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.AABB2 = _aabb2.default;
exports.BlendMode = _blend_mode2.default;
exports.ElementIndexArray = _element_index_array2.default;
exports.PowerOf2Image = _power_of_2_image2.default;
exports.Projection = _projection2.default;
exports.ResourceLibrary = _resource_library2.default;
exports.ShaderAttribValue = _shader_attrib_value2.default;
exports.ShaderAttribVariable = _shader_attrib_variable2.default;
exports.ShaderContext = _shader_context2.default;
exports.ShaderProgram = _shader_program2.default;
exports.ShaderSource = _shader_source2.default;
exports.ShaderTexture2dVariable = _shader_texture_2d_variable2.default;
exports.ShaderTextureGroup = _shader_texture_group2.default;
exports.ShaderUniformVariable = _shader_uniform_variable2.default;
exports.ShaderVariable = _shader_variable2.default;
exports.ShaderVariableAlias = _shader_variable_alias2.default;
exports.ShaderVariableBufferGroup = _shader_variable_buffer_group2.default;
exports.ShaderVariableGroup = _shader_variable_group2.default;
exports.SpriteGroup = _sprite_group2.default;
exports.Texture = _texture2.default;
exports.TextureAtlas = _texture_atlas2.default;
exports.TextureAtlasSpec = _texture_atlas_spec2.default;
exports.TextureLibrary = _texture_library2.default;
exports.TextureState = _texture_state2.default;
exports.VOArray = _v_o_array2.default;
exports.VOAttrDescriptor = _v_o_attr_descriptor2.default;
exports.VODescriptor = _v_o_descriptor2.default;
exports.VOPool = _v_o_pool2.default;
exports.Viewport = _Viewport2.default;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _v_o_helper = __webpack_require__(90);

var _v_o_array = __webpack_require__(7);

var _v_o_array2 = _interopRequireDefault(_v_o_array);

var _create_v_o_prototype = __webpack_require__(91);

var _create_v_o_prototype2 = _interopRequireDefault(_create_v_o_prototype);

var _create_typed_arrays = __webpack_require__(92);

var _create_typed_arrays2 = _interopRequireDefault(_create_typed_arrays);

var _create_attributes = __webpack_require__(93);

var _create_attributes2 = _interopRequireDefault(_create_attributes);

var _create_aliases = __webpack_require__(94);

var _create_aliases2 = _interopRequireDefault(_create_aliases);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Vertex object descriptor.
 *
 * @class VODescriptor
 *
 * @param {Object} options
 * @param {number} options.vertexCount - number of vertices
 * @param {Object[]} options.attributes - list of vertex attribute descriptions (see example)
 * @param {Object} [options.aliases] - *optional* list of attribute aliases
 * @param {Object} [options.proto]
 *
 * @example
 * const descriptor = new VODescriptor({
 *
 *     proto: {
 *         foo() {
 *             return this.voArray.float32Array[0];
 *         }
 *     },
 *
 *     // vertex buffer layout
 *     // --------------------
 *     //
 *     // v0: (x0)(y0)(z0)(rotate](s0)(t0)(tx)(ty)(scale)(opacity)
 *     // v1: (x1)(y1)(z1)(rotate](s1)(t1)(tx)(ty)(scale)(opacity)
 *     // v2: (x2)(y2)(z2)(rotate](s2)(t2)(tx)(ty)(scale)(opacity)
 *     // v3: (x3)(y3)(z3)(rotate](s3)(t3)(tx)(ty)(scale)(opacity)
 *     //
 *     vertexCount: 4,
 *
 *     attributes: [
 *
 *         { name: 'position',  type: 'float32', size: 3, attrNames: [ 'x', 'y', 'z' ] },
 *         { name: 'rotate',    type: 'float32', size: 1, uniform: true },
 *         { name: 'texCoords', type: 'float32', size: 2, attrNames: [ 's', 't' ] },
 *         { name: 'translate', type: 'float32', size: 2, attrNames: [ 'tx', 'ty' ], uniform: true },
 *         { name: 'scale',     type: 'float32', size: 1, uniform: true },
 *         { name: 'opacity',   type: 'float32', size: 1, uniform: true }
 *
 *     ],
 *
 *     aliases: {
 *
 *         pos2d: { size: 2, type: 'float32', offset: 0 },
 *         posZ:  { size: 1, type: 'float32', offset: 2, uniform: true },
 *         r:     { size: 1, type: 'float32', offset: 3 },
 *         uv:    'texCoords',
 *
 *     }
 *
 * });
 *
 */

var VODescriptor = function () {
  function VODescriptor(_ref) {
    var _this = this;

    var vertexCount = _ref.vertexCount,
        attributes = _ref.attributes,
        aliases = _ref.aliases,
        proto = _ref.proto;

    _classCallCheck(this, VODescriptor);

    this.vertexCount = parseInt(vertexCount, 10);

    (0, _create_attributes2.default)(this, attributes);
    (0, _create_aliases2.default)(this, aliases);
    (0, _create_v_o_prototype2.default)(this, proto);
    (0, _create_typed_arrays2.default)(this);

    // === winterkälte jetzt

    Object.keys(this.attr).forEach(function (name) {
      return Object.freeze(_this.attr[name]);
    });
    Object.freeze(this.attr);
    Object.freeze(this);
  }

  /**
   * @param {number} [size=1]
   * @param {string} [usage]
   * @returns {VOArray}
   */


  VODescriptor.prototype.createVOArray = function createVOArray() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    return new _v_o_array2.default(this, size, null, usage);
  };

  /**
   * Create a new *vertex object*
   *
   * @param {VOArray} [voArray]
   * @returns {Object} the *vertex object*
   */


  VODescriptor.prototype.createVO = function createVO(voArray) {
    return (0, _v_o_helper.createVO)(Object.create(this.voPrototype), this, voArray);
  };

  /**
   * @param {string} name
   * @param {number} size - attribute item count
   * @returns {boolean}
   */


  VODescriptor.prototype.hasAttribute = function hasAttribute(name, size) {
    var attr = this.attr[name];
    return attr && attr.size === size;
  };

  /**
   * Max number of vertex objects when a vertex buffer is used together
   * with a indexed element array to draw primitives. the reason for
   * such a limit is that webgl restricts element array indices
   * to an uin16 data type.
   * @type {number}
   */

  _createClass(VODescriptor, [{
    key: 'maxIndexedVOPoolSize',
    get: function get() {
      return Math.floor(65536 / this.vertexCount);
    }
  }]);

  return VODescriptor;
}();

exports.default = VODescriptor;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _create_vertex_objects = __webpack_require__(95);

var _create_vertex_objects2 = _interopRequireDefault(_create_vertex_objects);

var _generate_uuid = __webpack_require__(2);

var _generate_uuid2 = _interopRequireDefault(_generate_uuid);

var _v_o_array = __webpack_require__(7);

var _v_o_array2 = _interopRequireDefault(_v_o_array);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VOPool = function () {
  /**
   * @param {VODescriptor} descriptor - vertex object descriptor
   * @param {Object} [options] - Advanced options
   * @param {number} [options.capacity] - Maximum number of *vertex objects*
   * @param {VOArray} [options.voArray] - Vertex object array
   * @param {VertexObject} [options.voZero] - *vertex object* **prototype**
   * @param {VertexObject} [options.voNew] - *vertex object* **prototype**
   * @param {VertexObject} [options.maxAllocVOSize] - never allocate more than *maxAllocVOSize* vertex objects at once
   * @param {string} [options.usage=VOPool.USAGE.DYNAMIC] - vertex data usage hint
   */

  function VOPool(descriptor, options) {
    _classCallCheck(this, VOPool);

    this.id = (0, _generate_uuid2.default)();

    this.descriptor = descriptor;
    this.capacity = options && options.capacity || this.descriptor.maxIndexedVOPoolSize;
    this.maxAllocVOSize = options && options.maxAllocVOSize || 0;

    this.usage = options && options.usage || VOPool.USAGE.DYNAMIC;

    var voArray = options && options.voArray;
    if (voArray) {
      if (voArray.usage !== this.usage) {
        throw new Error('VOPool usage(=' + this.usage + ') mismatch with given voArray(usage=' + voArray.usage + ')');
      }
    } else {
      voArray = descriptor.createVOArray(this.capacity, this.usage);
    }
    this.voArray = voArray;

    this.voZero = options && options.voZero || descriptor.createVO();
    this.voNew = options && options.voNew || descriptor.createVO();

    this.availableVOs = [];
    this.usedVOs = [];

    (0, _create_vertex_objects2.default)(this, this.maxAllocVOSize);
  }

  /**
   * Number of in use *vertex objects*.
   * @type {number}
   */

  /**
   * Return **size** *vertex objects*
   * @return {VertexObject|VertexObject[]}
   */

  VOPool.prototype.alloc = function alloc() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    if (size > 1) {
      var arr = [];
      for (var i = 0; i < size; ++i) {
        var _vo2 = this.alloc(1);
        if (_vo2 !== undefined) {
          arr.push(_vo2);
        } else {
          break;
        }
      }
      return arr;
    }

    var vo = this.availableVOs.shift();

    if (vo === undefined) {
      if (this.capacity - this.allocatedCount > 0) {
        (0, _create_vertex_objects2.default)(this, this.maxAllocVOSize);
        return this.alloc();
      } else {
        return;
      }
    }

    this.usedVOs.push(vo);

    vo.voArray.copy(this.voNew.voArray);

    return vo;
  };

  /**
   * @param {VertexObject|VertexObject[]} vo - vertex object(s)
   */

  VOPool.prototype.free = function free(vo) {
    if (Array.isArray(vo)) {
      vo.forEach(function (_vo) {
        return _vo.free();
      });
      return;
    }

    var idx = this.usedVOs.indexOf(vo);

    if (idx === -1) return;

    var lastIdx = this.usedVOs.length - 1;

    if (idx !== lastIdx) {
      var last = this.usedVOs[lastIdx];
      vo.voArray.copy(last.voArray);

      var tmp = last.voArray;
      last.voArray = vo.voArray;
      vo.voArray = tmp;

      this.usedVOs.splice(idx, 1, last);
    }

    this.usedVOs.pop();
    this.availableVOs.unshift(vo);

    vo.voArray.copy(this.voZero.voArray);
  };

  _createClass(VOPool, [{
    key: 'usedCount',
    get: function get() {
      return this.usedVOs.length;
    }

    /**
     * Number of free and unused *vertex objects*.
     * @type {number}
     */

  }, {
    key: 'availableCount',
    get: function get() {
      return this.capacity - this.usedVOs.length;
    }

    /**
     * Number of **allocated** *vertex objects*.
     * @type {number}
     */

  }, {
    key: 'allocatedCount',
    get: function get() {
      return this.availableVOs.length + this.usedVOs.length;
    }
  }]);

  return VOPool;
}();

exports.default = VOPool;


VOPool.USAGE = _v_o_array2.default.USAGE;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var posNum = function posNum(num) {
  return num < 0 ? 0 : num;
};

/**
 * Represents a 2d axis aligned boundary box.
 *
 * @class AABB2
 * @param {number} [x0=0] - x0
 * @param {number} [x1=0] - x1
 * @param {number} [y0=0] - y0
 * @param {number} [y1=0] - y1
 */

var AABB2 = function () {
  function AABB2() {
    var x0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var x1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var y0 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var y1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    _classCallCheck(this, AABB2);

    if (x0 < x1) {
      /**
       * @type {number}
       */
      this.minX = x0;
      /**
       * @type {number}
       */
      this.maxX = x1;
    } else {
      /**
       * @type {number}
       */
      this.minX = x1;
      /**
       * @type {number}
       */
      this.maxX = x0;
    }

    if (y0 < y1) {
      /**
       * @type {number}
       */
      this.minY = y0;
      /**
       * @type {number}
       */
      this.maxY = y1;
    } else {
      /**
       * @type {number}
       */
      this.minY = y1;
      /**
       * @type {number}
       */
      this.maxY = y0;
    }
  }

  /**
   * @type {number}
   */


  /**
   * Extend the boundary box.
   *
   * @param {number} x - x
   * @param {number} y - y
   */
  AABB2.prototype.addPoint = function addPoint(x, y) {
    if (x < this.minX) {
      this.minX = x;
    } else if (x > this.maxX) {
      this.maxX = x;
    }

    if (y < this.minY) {
      this.minY = y;
    } else if (y > this.maxY) {
      this.maxY = y;
    }
  };

  /**
   * Determinates wether or the 2d point is inside this AABB.
   *
   * @param {number} x - x
   * @param {number} y - y
   * @return {boolean} return true when point is inside the aabb
   */


  AABB2.prototype.isInside = function isInside(x, y) {
    return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;
  };

  /**
   * Determinates wether or not this AABB intersects *aabb*.
   *
   * @param {AABB2} aabb - aabb
   * @return {boolean} return true when there is some intersection between both
   */


  AABB2.prototype.isIntersection = function isIntersection(aabb) {
    return !(aabb.maxX < this.minX || aabb.minX > this.maxX || aabb.maxY < this.minY || aabb.minY > this.maxY);
  };

  _createClass(AABB2, [{
    key: "width",
    get: function get() {
      return posNum(this.maxX - this.minX + 1);
    }

    /**
     * @type {number}
     */

  }, {
    key: "height",
    get: function get() {
      return posNum(this.maxY - this.minY + 1);
    }

    /**
     * @type {number}
     */

  }, {
    key: "centerX",
    get: function get() {
      return posNum((this.maxX - this.minX) / 2);
    }

    /**
     * @type {number}
     */

  }, {
    key: "centerY",
    get: function get() {
      return posNum((this.maxY - this.minY) / 2);
    }
  }]);

  return AABB2;
}();

exports.default = AABB2;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _resource_ref = __webpack_require__(5);

var _resource_ref2 = _interopRequireDefault(_resource_ref);

var _web_gl_buffer = __webpack_require__(38);

var _web_gl_buffer2 = _interopRequireDefault(_web_gl_buffer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ElementIndexArray = function () {
  function ElementIndexArray(objectCount) {
    var itemCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    _classCallCheck(this, ElementIndexArray);

    this.resourceRef = new _resource_ref2.default(this, {
      target: _web_gl_buffer2.default.ELEMENT_ARRAY_BUFFER,
      usage: 'static'
    });

    this.objectCount = objectCount;
    this.itemCount = itemCount;
    this.length = objectCount * itemCount;

    this.array = new Uint16Array(this.length);

    // needed by WebGlRenderer#syncBuffer
    this.resourceRef.hints.typedArray = this.array;
  }

  /**
   * @param {number} objectCount
   * @param {number[]} indices
   * @param {number} [stride=4]
   * @param {number} [objectOffset=0]
   * @return {ElementIndexArray}
   * @example
   * // Create a ElementIndexArray for 10 quads where each quad made up of 2x triangles (4x vertices and 6x indices)
   * const quadIndices = ElementIndexArray.Generate(10, [0, 1, 2, 0, 2, 3], 4)
   * quadIndices.length        // => 60
   * quadIndices.itemCount     // => 6
   */


  ElementIndexArray.Generate = function Generate(objectCount, indices) {
    var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;
    var objectOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    var arr = new ElementIndexArray(objectCount, indices.length);

    for (var i = 0; i < objectCount; ++i) {
      for (var j = 0; j < indices.length; ++j) {
        arr.array[i * arr.itemCount + j] = indices[j] + (i + objectOffset) * stride;
      }
    }

    return arr;
  };

  return ElementIndexArray;
}();

exports.default = ElementIndexArray;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
var maxOf = function maxOf(a, b) {
  return a > b ? a : b;
};

/**
 * @param {number} x
 * @return {number}
 */
function findNextPowerOf2(x) {
  var p = 1;
  while (x > p) {
    p <<= 1;
  }return p;
}

/**
 * @param {number} n
 * @return {boolean}
 */
var isPowerOf2 = function isPowerOf2(n) {
  return n !== 0 && (n & n - 1) === 0;
};

exports.maxOf = maxOf;
exports.findNextPowerOf2 = findNextPowerOf2;
exports.isPowerOf2 = isPowerOf2;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(113),
    mat4 = _require.mat4;

var DEG2RAD = Math.PI / 180.0;

var Mat4 = function () {
  function Mat4() {
    _classCallCheck(this, Mat4);

    this.mat4 = mat4.create();
    Object.freeze(this);
  }

  Mat4.prototype.identity = function identity() {
    mat4.identity(this.mat4);
  };

  Mat4.prototype.ortho = function ortho(width, height) {
    var zRange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.pow(2, 16);

    var hw = width >> 1;
    var hh = height >> 1;
    var hz = zRange >> 1;
    mat4.ortho(this.mat4, -hw, hw, -hh, hh, -hz, hz);
  };

  Mat4.prototype.perspective = function perspective(width, height) {
    var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;

    // https://webglfundamentals.org/webgl/lessons/webgl-3d-perspective.html
    // https://stackoverflow.com/questions/6653080/in-opengl-how-can-i-determine-the-bounds-of-the-view-at-a-given-depth
    // http://glmatrix.net/docs/module-mat4.html
    var aspect = width / height;
    var near = 0;
    var far = 2000;
    var halfHeight = height / 2.0;
    var fovy = 2 * Math.atan(halfHeight / distance);
    mat4.perspective(this.mat4, fovy, aspect, near, far);
    // TODO camera feature
    mat4.translate(this.mat4, this.mat4, [0, 0, -distance]);
  };

  Mat4.prototype.translate = function translate(x, y) {
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    mat4.translate(this.mat4, this.mat4, [x, y, z]);
  };

  Mat4.prototype.scale = function scale(x, y) {
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

    mat4.scale(this.mat4, this.mat4, [x, y, z]);
  };

  Mat4.prototype.rotateX = function rotateX(deg) {
    mat4.rotateX(this.mat4, this.mat4, deg * DEG2RAD);
  };

  Mat4.prototype.rotateY = function rotateY(deg) {
    mat4.rotateY(this.mat4, this.mat4, deg * DEG2RAD);
  };

  Mat4.prototype.rotateZ = function rotateZ(deg) {
    mat4.rotateZ(this.mat4, this.mat4, deg * DEG2RAD);
  };

  Mat4.prototype.multiply = function multiply(a, b) {
    mat4.multiply(this.mat4, a.mat4, b.mat4);
  };

  Mat4.prototype.copy = function copy(src) {
    mat4.copy(this.mat4, src.mat4);
  };

  Mat4.prototype.clone = function clone() {
    var dolly = new Mat4();
    dolly.copy(this);
    return dolly;
  };

  _createClass(Mat4, [{
    key: 'x',
    get: function get() {
      return this.mat4[12];
    },
    set: function set(val) {
      this.mat4[12] = val;
    }
  }, {
    key: 'y',
    get: function get() {
      return this.mat4[13];
    },
    set: function set(val) {
      this.mat4[13] = val;
    }
  }, {
    key: 'z',
    get: function get() {
      return this.mat4[14];
    },
    set: function set(val) {
      this.mat4[14] = val;
    }
  }, {
    key: 'sx',
    get: function get() {
      return this.mat4[0];
    },
    set: function set(val) {
      this.mat4[0] = val;
    }
  }, {
    key: 'sy',
    get: function get() {
      return this.mat4[5];
    },
    set: function set(val) {
      this.mat4[5] = val;
    }
  }, {
    key: 'sz',
    get: function get() {
      return this.mat4[10];
    },
    set: function set(val) {
      this.mat4[10] = val;
    }
  }]);

  return Mat4;
}();

exports.default = Mat4;

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["fromMat4"] = fromMat4;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["transpose"] = transpose;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["adjoint"] = adjoint;
/* harmony export (immutable) */ __webpack_exports__["determinant"] = determinant;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["translate"] = translate;
/* harmony export (immutable) */ __webpack_exports__["rotate"] = rotate;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["fromTranslation"] = fromTranslation;
/* harmony export (immutable) */ __webpack_exports__["fromRotation"] = fromRotation;
/* harmony export (immutable) */ __webpack_exports__["fromScaling"] = fromScaling;
/* harmony export (immutable) */ __webpack_exports__["fromMat2d"] = fromMat2d;
/* harmony export (immutable) */ __webpack_exports__["fromQuat"] = fromQuat;
/* harmony export (immutable) */ __webpack_exports__["normalFromMat4"] = normalFromMat4;
/* harmony export (immutable) */ __webpack_exports__["projection"] = projection;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["frob"] = frob;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalar"] = multiplyScalar;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(1);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](9);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */
function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}

/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */
function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    let a01 = a[1], a02 = a[2], a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function invert(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  let b01 = a22 * a11 - a12 * a21;
  let b11 = -a22 * a10 + a12 * a20;
  let b21 = a21 * a10 - a11 * a20;

  // Calculate the determinant
  let det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function adjoint(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  out[0] = (a11 * a22 - a12 * a21);
  out[1] = (a02 * a21 - a01 * a22);
  out[2] = (a01 * a12 - a02 * a11);
  out[3] = (a12 * a20 - a10 * a22);
  out[4] = (a00 * a22 - a02 * a20);
  out[5] = (a02 * a10 - a00 * a12);
  out[6] = (a10 * a21 - a11 * a20);
  out[7] = (a01 * a20 - a00 * a21);
  out[8] = (a00 * a11 - a01 * a10);
  return out;
}

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function multiply(out, a, b) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  let b00 = b[0], b01 = b[1], b02 = b[2];
  let b10 = b[3], b11 = b[4], b12 = b[5];
  let b20 = b[6], b21 = b[7], b22 = b[8];

  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;

  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;

  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
function translate(out, a, v) {
  let a00 = a[0], a01 = a[1], a02 = a[2],
    a10 = a[3], a11 = a[4], a12 = a[5],
    a20 = a[6], a21 = a[7], a22 = a[8],
    x = v[0], y = v[1];

  out[0] = a00;
  out[1] = a01;
  out[2] = a02;

  out[3] = a10;
  out[4] = a11;
  out[5] = a12;

  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function rotate(out, a, rad) {
  let a00 = a[0], a01 = a[1], a02 = a[2],
    a10 = a[3], a11 = a[4], a12 = a[5],
    a20 = a[6], a21 = a[7], a22 = a[8],

    s = Math.sin(rad),
    c = Math.cos(rad);

  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;

  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;

  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
function scale(out, a, v) {
  let x = v[0], y = v[1];

  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];

  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];

  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad), c = Math.cos(rad);

  out[0] = c;
  out[1] = s;
  out[2] = 0;

  out[3] = -s;
  out[4] = c;
  out[5] = 0;

  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;

  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;

  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;

  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;

  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
function fromQuat(out, q) {
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let yx = y * x2;
  let yy = y * y2;
  let zx = z * x2;
  let zy = z * y2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;

  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;

  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;

  return out;
}

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
function normalFromMat4(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

  return out;
}

/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */
function projection(out, width, height) {
    out[0] = 2 / width;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = -2 / height;
    out[5] = 0;
    out[6] = -1;
    out[7] = 1;
    out[8] = 1;
    return out;
}

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
          a[6] + ', ' + a[7] + ', ' + a[8] + ')';
}

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
}

/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}



/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}

/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  out[6] = a[6] + (b[6] * scale);
  out[7] = a[7] + (b[7] * scale);
  out[8] = a[8] + (b[8] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&
         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
          Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
          Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
          Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a8), Math.abs(b8)));
}

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link mat3.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;



/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["divide"] = divide;
/* harmony export (immutable) */ __webpack_exports__["ceil"] = ceil;
/* harmony export (immutable) */ __webpack_exports__["floor"] = floor;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
/* harmony export (immutable) */ __webpack_exports__["distance"] = distance;
/* harmony export (immutable) */ __webpack_exports__["squaredDistance"] = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["negate"] = negate;
/* harmony export (immutable) */ __webpack_exports__["inverse"] = inverse;
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;
/* harmony export (immutable) */ __webpack_exports__["cross"] = cross;
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;
/* harmony export (immutable) */ __webpack_exports__["hermite"] = hermite;
/* harmony export (immutable) */ __webpack_exports__["bezier"] = bezier;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["transformMat4"] = transformMat4;
/* harmony export (immutable) */ __webpack_exports__["transformMat3"] = transformMat3;
/* harmony export (immutable) */ __webpack_exports__["transformQuat"] = transformQuat;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["angle"] = angle;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(1);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](3);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
function clone(a) {
  var out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  return Math.sqrt(x*x + y*y + z*z);
}

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}

/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}

/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}

/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  return out;
}

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  return Math.sqrt(x*x + y*y + z*z);
}

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  return x*x + y*y + z*z;
}

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  return x*x + y*y + z*z;
}

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let len = x*x + y*y + z*z;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  let ax = a[0], ay = a[1], az = a[2];
  let bx = b[0], by = b[1], bz = b[2];

  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function lerp(out, a, b, t) {
  let ax = a[0];
  let ay = a[1];
  let az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function hermite(out, a, b, c, d, t) {
  let factorTimes2 = t * t;
  let factor1 = factorTimes2 * (2 * t - 3) + 1;
  let factor2 = factorTimes2 * (t - 2) + t;
  let factor3 = factorTimes2 * (t - 1);
  let factor4 = factorTimes2 * (3 - 2 * t);

  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

  return out;
}

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function bezier(out, a, b, c, d, t) {
  let inverseFactor = 1 - t;
  let inverseFactorTimesTwo = inverseFactor * inverseFactor;
  let factorTimes2 = t * t;
  let factor1 = inverseFactorTimesTwo * inverseFactor;
  let factor2 = 3 * t * inverseFactorTimesTwo;
  let factor3 = 3 * factorTimes2 * inverseFactor;
  let factor4 = factorTimes2 * t;

  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

  return out;
}

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
function random(out, scale) {
  scale = scale || 1.0;

  let r = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]() * 2.0 * Math.PI;
  let z = (__WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]() * 2.0) - 1.0;
  let zScale = Math.sqrt(1.0-z*z) * scale;

  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
  let x = a[0], y = a[1], z = a[2];
  let w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
function transformMat3(out, a, m) {
  let x = a[0], y = a[1], z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
function transformQuat(out, a, q) {
  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

  let x = a[0], y = a[1], z = a[2];
  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];

  // calculate quat * vec
  let ix = qw * x + qy * z - qz * y;
  let iy = qw * y + qz * x - qx * z;
  let iz = qw * z + qx * y - qy * x;
  let iw = -qx * x - qy * y - qz * z;

  // calculate result * inverse quat
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  return out;
}

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateX(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[0];
  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateY(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
  r[1] = p[1];
  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateZ(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
  r[2] = p[2];

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
  let tempA = fromValues(a[0], a[1], a[2]);
  let tempB = fromValues(b[0], b[1], b[2]);

  normalize(tempA, tempA);
  normalize(tempB, tempB);

  let cosine = dot(tempA, tempB);

  if(cosine > 1.0) {
    return 0;
  }
  else if(cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
}

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2];
  let b0 = b[0], b1 = b[1], b2 = b[2];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)));
}

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;


/**
 * Alias for {@link vec3.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link vec3.divide}
 * @function
 */
const div = divide;
/* harmony export (immutable) */ __webpack_exports__["div"] = div;


/**
 * Alias for {@link vec3.distance}
 * @function
 */
const dist = distance;
/* harmony export (immutable) */ __webpack_exports__["dist"] = dist;


/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["sqrDist"] = sqrDist;


/**
 * Alias for {@link vec3.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 3;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
    }

    return a;
  };
})();
/* harmony export (immutable) */ __webpack_exports__["forEach"] = forEach;



/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["divide"] = divide;
/* harmony export (immutable) */ __webpack_exports__["ceil"] = ceil;
/* harmony export (immutable) */ __webpack_exports__["floor"] = floor;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
/* harmony export (immutable) */ __webpack_exports__["distance"] = distance;
/* harmony export (immutable) */ __webpack_exports__["squaredDistance"] = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["negate"] = negate;
/* harmony export (immutable) */ __webpack_exports__["inverse"] = inverse;
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["transformMat4"] = transformMat4;
/* harmony export (immutable) */ __webpack_exports__["transformQuat"] = transformQuat;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(1);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
function fromValues(x, y, z, w) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
function set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}

/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}

/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}

/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  return out;
}

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  let w = b[3] - a[3];
  return Math.sqrt(x*x + y*y + z*z + w*w);
}

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  let w = b[3] - a[3];
  return x*x + y*y + z*z + w*w;
}

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  return Math.sqrt(x*x + y*y + z*z + w*w);
}

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  return x*x + y*y + z*z + w*w;
}

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize(out, a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  let len = x*x + y*y + z*z + w*w;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
function lerp(out, a, b, t) {
  let ax = a[0];
  let ay = a[1];
  let az = a[2];
  let aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
function random(out, vectorScale) {
  vectorScale = vectorScale || 1.0;

  //TODO: This is a pretty awful way of doing this. Find something better.
  out[0] = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]();
  out[1] = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]();
  out[2] = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]();
  out[3] = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]();
  normalize(out, out);
  scale(out, out, vectorScale);
  return out;
}

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4(out, a, m) {
  let x = a[0], y = a[1], z = a[2], w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
function transformQuat(out, a, q) {
  let x = a[0], y = a[1], z = a[2];
  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];

  // calculate quat * vec
  let ix = qw * x + qy * z - qz * y;
  let iy = qw * y + qz * x - qx * z;
  let iz = qw * z + qx * y - qy * x;
  let iw = -qx * x - qy * y - qz * z;

  // calculate result * inverse quat
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
}

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;


/**
 * Alias for {@link vec4.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link vec4.divide}
 * @function
 */
const div = divide;
/* harmony export (immutable) */ __webpack_exports__["div"] = div;


/**
 * Alias for {@link vec4.distance}
 * @function
 */
const dist = distance;
/* harmony export (immutable) */ __webpack_exports__["dist"] = dist;


/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["sqrDist"] = sqrDist;


/**
 * Alias for {@link vec4.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 4;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
    }

    return a;
  };
})();
/* harmony export (immutable) */ __webpack_exports__["forEach"] = forEach;



/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _shader_variable = __webpack_require__(4);

var _shader_variable2 = _interopRequireDefault(_shader_variable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Shader uniform variable.
 */
var ShaderUniformVariable = function (_ShaderVariable) {
  _inherits(ShaderUniformVariable, _ShaderVariable);

  /**
   * @param {string} name
   * @param {number|Object} value
   */
  function ShaderUniformVariable(name, value) {
    _classCallCheck(this, ShaderUniformVariable);

    return _possibleConstructorReturn(this, _ShaderVariable.call(this, name, _shader_variable2.default.TYPE.UNIFORM, value));
  }

  return ShaderUniformVariable;
}(_shader_variable2.default);

exports.default = ShaderUniformVariable;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _v_o_descriptor = __webpack_require__(41);

var _v_o_descriptor2 = _interopRequireDefault(_v_o_descriptor);

var _shader_source = __webpack_require__(18);

var _shader_source2 = _interopRequireDefault(_shader_source);

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ResourceLibrary = function () {
  function ResourceLibrary() {
    _classCallCheck(this, ResourceLibrary);

    this.descriptors = new Map();
    this.vertexShaders = new Map();
    this.fragmentShaders = new Map();
  }

  ResourceLibrary.prototype.destroy = function destroy() {
    this.descriptors.clear();
    this.vertexShaders.clear();
    this.fragmentShaders.clear();
    (0, _destroy3.default)(this);
  };

  /**
   * @param {string} name
   * @param {Object} description - see `VODescriptor` for more details
   */


  ResourceLibrary.prototype.addDescriptor = function addDescriptor(name, description) {
    this.descriptors.set(name, new _v_o_descriptor2.default(description));
    return this;
  };

  /**
   * @param {string} name
   * @param {string|function|string[]} source - see `ShaderSource` for more details
   */


  ResourceLibrary.prototype.addVertexShader = function addVertexShader(name, source) {
    this.vertexShaders.set(name, new _shader_source2.default(_shader_source2.default.VERTEX_SHADER, source));
    return this;
  };

  /**
   * @param {string} name
   * @param {string|function|string[]} source - see `ShaderSource` for more details
   */


  ResourceLibrary.prototype.addFragmentShader = function addFragmentShader(name, source) {
    this.fragmentShaders.set(name, new _shader_source2.default(_shader_source2.default.FRAGMENT_SHADER, source));
    return this;
  };

  /**
   * @param {string} name
   * @returns {VODescriptor}
   */


  ResourceLibrary.prototype.findDescriptor = function findDescriptor(name) {
    return this.descriptors.get(name);
  };

  /**
   * @param {string} name
   * @returns {ShaderSource}
   */


  ResourceLibrary.prototype.findVertexShader = function findVertexShader(name) {
    return this.vertexShaders.get(name);
  };

  /**
   * @param {string} name
   * @returns {ShaderSource}
   */


  ResourceLibrary.prototype.findFragmentShader = function findFragmentShader(name) {
    return this.fragmentShaders.get(name);
  };

  return ResourceLibrary;
}();

exports.default = ResourceLibrary;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _v_o_array = __webpack_require__(7);

var _v_o_array2 = _interopRequireDefault(_v_o_array);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShaderAttribValue = function () {
  function ShaderAttribValue(name, descriptor, bufferSource) {
    _classCallCheck(this, ShaderAttribValue);

    this.name = name;
    this.descriptor = descriptor;
    this.bufferSource = bufferSource;
  }

  _createClass(ShaderAttribValue, [{
    key: 'attrDescriptor',
    get: function get() {
      return this.descriptor.attr[this.name];
    }
  }, {
    key: 'resourceRef',
    get: function get() {
      var bufferSource = this.bufferSource;

      return bufferSource instanceof _v_o_array2.default ? bufferSource.resourceRef : bufferSource.voArray.resourceRef;
    }
  }]);

  return ShaderAttribValue;
}();

exports.default = ShaderAttribValue;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _shader_variable = __webpack_require__(4);

var _shader_variable2 = _interopRequireDefault(_shader_variable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Shader attribute variable.
 */
var ShaderAttribVariable = function (_ShaderVariable) {
  _inherits(ShaderAttribVariable, _ShaderVariable);

  /**
   * @param {string} name
   * @param {number|Object} value
   */
  function ShaderAttribVariable(name, value) {
    _classCallCheck(this, ShaderAttribVariable);

    return _possibleConstructorReturn(this, _ShaderVariable.call(this, name, _shader_variable2.default.TYPE.ATTRIB, value));
  }

  return ShaderAttribVariable;
}(_shader_variable2.default);

exports.default = ShaderAttribVariable;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _generate_uuid = __webpack_require__(2);

var _generate_uuid2 = _interopRequireDefault(_generate_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShaderProgram =
/**
 * @param {ShaderSource} vertexShader
 * @param {ShaderSource} fragmentShader
 */
function ShaderProgram(vertexShader, fragmentShader) {
  _classCallCheck(this, ShaderProgram);

  /**
   * @type {string}
   */
  this.id = (0, _generate_uuid2.default)();

  /**
   * @type {ShaderSource}
   */
  this.vertexShader = vertexShader;

  /**
   * @type {ShaderSource}
   */
  this.fragmentShader = fragmentShader;
};

exports.default = ShaderProgram;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _shader_variable_group = __webpack_require__(10);

var _shader_variable_group2 = _interopRequireDefault(_shader_variable_group);

var _shader_texture_2d_variable = __webpack_require__(26);

var _shader_texture_2d_variable2 = _interopRequireDefault(_shader_texture_2d_variable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ShaderTextureGroup = function () {
  function ShaderTextureGroup(shaderLibrary, shaderTextureMap) {
    _classCallCheck(this, ShaderTextureGroup);

    this.shaderLibrary = shaderLibrary;
    this.waitFor = Object.keys(shaderTextureMap).map(function (shaderVarKey) {
      return {
        shaderVarKey: shaderVarKey,
        textureId: shaderTextureMap[shaderVarKey],
        isLoaded: false
      };
    });
    this.shaderVarGroup = new _shader_variable_group2.default([]);
    this.shaderVarStore = new Map();
  }

  ShaderTextureGroup.prototype.whenLoaded = function whenLoaded(onLoaded) {
    var _this = this;

    if (!this.isLoaded) {
      this.waitFor.forEach(function (waitFor) {
        if (!waitFor.isLoaded) {
          var state = _this.shaderLibrary.states.get(waitFor.textureId);
          if (state === undefined || !state.isReady) return;

          var shaderVar = new _shader_texture_2d_variable2.default(waitFor.shaderVarKey);
          shaderVar.texture = state.texture;
          _this.shaderVarGroup.shaderVars.push(shaderVar);

          waitFor.isLoaded = true;
        }
      });
      this.waitFor = this.waitFor.filter(function (waitFor) {
        return waitFor.isLoaded === false;
      });
      if (this.isLoaded) {
        onLoaded(this.shaderVarGroup);
      }
    } else {
      onLoaded(this.shaderVarGroup);
    }
  };

  _createClass(ShaderTextureGroup, [{
    key: 'isLoaded',
    get: function get() {
      return this.waitFor.length === 0 && this.shaderVarGroup.shaderVars.length > 0;
    }
  }]);

  return ShaderTextureGroup;
}();

exports.default = ShaderTextureGroup;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Shader attribute variable *alias*.
 */
var ShaderVariableAlias = function () {
  /**
   * @param {string} name
   * @param {number|Object} value
   */
  function ShaderVariableAlias(name, shaderVar) {
    _classCallCheck(this, ShaderVariableAlias);

    this.name = name;
    this.shaderVar = shaderVar;
  }

  _createClass(ShaderVariableAlias, [{
    key: "type",
    get: function get() {
      return this.shaderVar.type;
    }
  }, {
    key: "value",
    get: function get() {
      return this.shaderVar.value;
    }
  }, {
    key: "serial",
    get: function get() {
      return this.shaderVar.serial;
    }
  }]);

  return ShaderVariableAlias;
}();

exports.default = ShaderVariableAlias;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _shader_variable_group = __webpack_require__(10);

var _shader_variable_group2 = _interopRequireDefault(_shader_variable_group);

var _shader_attrib_variable = __webpack_require__(53);

var _shader_attrib_variable2 = _interopRequireDefault(_shader_attrib_variable);

var _shader_attrib_value = __webpack_require__(52);

var _shader_attrib_value2 = _interopRequireDefault(_shader_attrib_value);

var _shader_variable_alias = __webpack_require__(56);

var _shader_variable_alias2 = _interopRequireDefault(_shader_variable_alias);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Group of shader variables which are referencing one single buffer.
 */
var ShaderVariableBufferGroup = function (_ShaderVariableGroup) {
  _inherits(ShaderVariableBufferGroup, _ShaderVariableGroup);

  /**
   * @param {VOPool} bufferSource
   */
  function ShaderVariableBufferGroup(bufferSource) {
    _classCallCheck(this, ShaderVariableBufferGroup);

    var _this = _possibleConstructorReturn(this, _ShaderVariableGroup.call(this, []));

    var descriptor = bufferSource.descriptor;
    var firstVar = void 0;
    Object.keys(descriptor.attr).forEach(function (attrName) {
      if (!firstVar) {
        firstVar = new _shader_attrib_variable2.default(attrName, new _shader_attrib_value2.default(attrName, descriptor, bufferSource));
        _this.shaderVars.push(firstVar);
      } else {
        _this.shaderVars.push(new _shader_variable_alias2.default(attrName, firstVar));
      }
    });
    return _this;
  }

  ShaderVariableBufferGroup.prototype.touch = function touch() {
    return this.shaderVars[0].touch();
  };

  _createClass(ShaderVariableBufferGroup, [{
    key: 'bufferSource',
    get: function get() {
      return this.shaderVars[0].value.bufferSource;
    }
  }, {
    key: 'serial',
    get: function get() {
      return this.shaderVars[0].serial;
    }
  }]);

  return ShaderVariableBufferGroup;
}(_shader_variable_group2.default);

exports.default = ShaderVariableBufferGroup;

/***/ }),
/* 58 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(27);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),
/* 60 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(161),
    isObjectLike = __webpack_require__(24);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _texture = __webpack_require__(15);

var _texture2 = _interopRequireDefault(_texture);

var _texture_atlas = __webpack_require__(30);

var _texture_atlas2 = _interopRequireDefault(_texture_atlas);

var _power_of_2_image = __webpack_require__(25);

var _power_of_2_image2 = _interopRequireDefault(_power_of_2_image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextureAtlasSpec = function () {
  function TextureAtlasSpec(jsonDef) {
    _classCallCheck(this, TextureAtlasSpec);

    this.jsonDef = jsonDef;
    this.frameNames = Object.keys(jsonDef.frames);
  }

  TextureAtlasSpec.prototype.createTextureAtlas = function createTextureAtlas() {
    var _this = this;

    var image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var textureHints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    return Promise.resolve(image).then(function (image) {
      if (typeof image === 'function') {
        return Promise.resolve(image(_this)).then(function (img) {
          if (typeof img === 'string') {
            return new _power_of_2_image2.default(img).complete;
          }
          return img;
        });
      } else if (typeof image === 'string') {
        return new _power_of_2_image2.default(image).complete;
      } else if (image) {
        return image;
      } else {
        throw new Error('TextureAtlasSpec.createTextureAtlas(): no image found!');
      }
    }).then(function (image) {
      var rootTexture = new _texture2.default(image, undefined, undefined, 0, 0, textureHints);
      var atlas = new _texture_atlas2.default(rootTexture, _this);
      for (var _iterator = Object.keys(_this.frames), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var name = _ref;
        var frame = _this.frames[name].frame;

        atlas.addFrame(name, frame.w, frame.h, frame.x, frame.y);
      }
      return atlas;
    });
  };

  TextureAtlasSpec.load = function load(url, options) {
    return window.fetch(url, options).then(function (response) {
      return response.json();
    }).then(function (json) {
      return new TextureAtlasSpec(json);
    });
  };

  _createClass(TextureAtlasSpec, [{
    key: 'frames',
    get: function get() {
      return this.jsonDef.frames;
    }
  }, {
    key: 'meta',
    get: function get() {
      return this.jsonDef.meta;
    }
  }, {
    key: 'imageUrl',
    get: function get() {
      return this.meta.image;
    }
  }]);

  return TextureAtlasSpec;
}();

exports.default = TextureAtlasSpec;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = sample;
function sample(arr) {
  return arr[Math.random() * arr.length | 0];
}

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _texture = __webpack_require__(15);

var _texture2 = _interopRequireDefault(_texture);

var _texture_state = __webpack_require__(65);

var _texture_state2 = _interopRequireDefault(_texture_state);

var _texture_atlas = __webpack_require__(30);

var _texture_atlas2 = _interopRequireDefault(_texture_atlas);

var _shader_texture_2d_variable = __webpack_require__(26);

var _shader_texture_2d_variable2 = _interopRequireDefault(_shader_texture_2d_variable);

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextureLibrary = function () {
  function TextureLibrary() {
    _classCallCheck(this, TextureLibrary);

    this.states = new Map();
    this.shaderVars = new Map();
  }

  TextureLibrary.prototype.destroy = function destroy() {
    this.states.clear();
    this.shaderVars.clear();
    (0, _destroy3.default)(this);
  };

  TextureLibrary.prototype.loadTexture = function loadTexture(id) {
    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id;
    var textureHints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    var state = new _texture_state2.default(_texture2.default.load(url, textureHints));
    this.states.set(id, state);
    return state.promise;
  };

  TextureLibrary.prototype.loadTextureAtlas = function loadTextureAtlas(id) {
    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : id;
    var textureHints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    var atlas = _texture_atlas2.default.load(url, null, null, textureHints);
    var state = new _texture_state2.default(atlas.then(function (atlas) {
      state.atlas = atlas;
      return atlas.rootTexture;
    }));
    this.states.set(id, state);
    return atlas;
  };

  TextureLibrary.prototype.getTextureAtlas = function getTextureAtlas(id) {
    return this.states.get(id).atlas;
  };

  TextureLibrary.prototype.whenLoaded = function whenLoaded(textureId, shaderVarKey, onLoaded) {
    var state = this.states.get(textureId);
    if (state === undefined || !state.isReady) return;

    var shaderVar = this.shaderVars.get(shaderVarKey);
    if (shaderVar === undefined) {
      shaderVar = new _shader_texture_2d_variable2.default(shaderVarKey);
      this.shaderVars.set(shaderVarKey, shaderVar);
    }

    shaderVar.texture = state.texture;
    onLoaded(shaderVar);
  };

  return TextureLibrary;
}();

exports.default = TextureLibrary;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextureState = function () {
  function TextureState(texture, atlas) {
    var _this = this;

    _classCallCheck(this, TextureState);

    this.texture = null;
    this.atlas = null;
    this.promise = Promise.resolve(texture).then(function (tex) {
      _this.texture = tex;
      return tex;
    }).catch(function (err) {
      console.error('TextureState error:', err);
    });
    Promise.resolve(atlas).then(function (atlas) {
      _this.atlas = atlas;
    });
  }

  _createClass(TextureState, [{
    key: 'isReady',
    get: function get() {
      return this.texture != null;
    }
  }]);

  return TextureState;
}();

exports.default = TextureState;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ComponentRegistry = function () {
  function ComponentRegistry() {
    _classCallCheck(this, ComponentRegistry);

    this.registry = new Map();
  }

  /**
   * @param {string} name - component name
   * @param {object} componentFactory - the component factory interface
   * @param {function} componentFactory.create - create a new component instance
   * @param {function} componentFactory.update - update a component
   * @param {function} componentFactory.destroy - remove a component
   */


  ComponentRegistry.prototype.registerComponent = function registerComponent(name, componentFactory) {
    this.registry.set(name, componentFactory);
    return this;
  };

  ComponentRegistry.prototype.createComponent = function createComponent(entity, name, data) {
    var factory = this.registry.get(name);
    if (!factory) return this;
    var component = factory.create(entity, data);
    entity.setComponent(name, component, this);
    return this;
  };

  ComponentRegistry.prototype.updateComponent = function updateComponent(entity, name, data) {
    var factory = this.registry.get(name);
    if (!factory) return this;
    var component = entity[name];
    factory.update(component, data);
    return this;
  };

  ComponentRegistry.prototype.createOrUpdateComponent = function createOrUpdateComponent(entity, name, data) {
    if (entity.getComponentRegistry(name) === this) {
      this.updateComponent(entity, name, data);
    } else {
      this.createComponent(entity, name, data);
    }
    return this;
  };

  ComponentRegistry.prototype.destroyComponent = function destroyComponent(entity, name) {
    var factory = this.registry.get(name);
    if (!factory) return this;
    var component = entity[name];
    factory.destroy(component);
    return this;
  };

  return ComponentRegistry;
}();

exports.default = ComponentRegistry;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (registry) {
  registry.registerComponent('clear-color', _component_factory2.default.createComponent(_ClearColorComponent2.default));
  registry.registerComponent('clear', _component_factory2.default.createCssStyledPropsComponent(_ClearComponent2.default));
  // registry.registerComponent('projection', createFactory(ProjectionComponent))
  // registry.registerComponent('children', createFactory(ChildrenComponent))
  // registry.registerComponent('blend-mode', createFactory(BlendModeComponent))
};

var _component_factory = __webpack_require__(68);

var _component_factory2 = _interopRequireDefault(_component_factory);

var _ClearColorComponent = __webpack_require__(179);

var _ClearColorComponent2 = _interopRequireDefault(_ClearColorComponent);

var _ClearComponent = __webpack_require__(180);

var _ClearComponent2 = _interopRequireDefault(_ClearComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(32);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ComponentFactory = function () {
  function ComponentFactory() {
    _classCallCheck(this, ComponentFactory);
  }

  ComponentFactory.createCssStyledPropsComponent = function createCssStyledPropsComponent(ComponentConstructor) {
    return {
      create: function create(entity, data) {
        return new ComponentConstructor(entity, (0, _utils.parseCssStyledProperties)(data));
      },
      update: function update(component, data) {
        component.update((0, _utils.parseCssStyledProperties)(data));
      },
      destroy: function destroy() /* component */{/* nothing to do here */}
    };
  };

  ComponentFactory.createComponent = function createComponent(ComponentConstructor) {
    return {
      create: function create(entity, data) {
        return new ComponentConstructor(entity, data);
      },
      update: function update(component, data) {
        component.update(data);
      },
      destroy: function destroy() /* component */{/* nothing to do here */}
    };
  };

  return ComponentFactory;
}();

exports.default = ComponentFactory;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (arr, item) {
  var idx = arr.indexOf(item);
  if (idx > -1) {
    arr.splice(idx, 1);
  }
};

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _entity = __webpack_require__(71);

var _entity2 = _interopRequireDefault(_entity);

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The entity manager holds references to all entities.
 */
var EntityManager = function () {
  function EntityManager() {
    _classCallCheck(this, EntityManager);

    this.entities = new Map();
  }

  EntityManager.prototype.createEntity = function createEntity() {
    var entity = new _entity2.default();
    this.entities.set(entity.id, entity);
    return entity;
  };

  EntityManager.prototype.getEntity = function getEntity(id) {
    return this.entities.get(id);
  };

  EntityManager.prototype.destroyEntity = function destroyEntity(id) {
    var entity = this.entities.get(id);
    if (entity) {
      entity.destroy();
      this.entities.delete(id);
      return true;
    }
    return false;
  };

  EntityManager.prototype.destroyAllEntities = function destroyAllEntities() {
    for (var _iterator = this.entities.keys(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var id = _ref;

      this.destroyEntity(id);
    }
  };

  EntityManager.prototype.destroy = function destroy() {
    this.destroyAllEntities();
    this.entities.clear();
    (0, _destroy3.default)(this);
  };

  return EntityManager;
}();

exports.default = EntityManager;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _generate_uuid = __webpack_require__(2);

var _generate_uuid2 = _interopRequireDefault(_generate_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var eventize = __webpack_require__(19);

var destroyAllComponents = function destroyAllComponents(entity) {
  for (var _iterator = entity.registries.keys(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var name = _ref;

    entity.destroyComponent(name);
  }
};

/**
 * An Entity.
 */

var Entity = function () {
  function Entity() {
    _classCallCheck(this, Entity);

    this.registries = new Map();

    /**
     * @type {string}
     */
    this.id = (0, _generate_uuid2.default)();

    eventize(this);
  }

  Entity.prototype.hasComponent = function hasComponent(name) {
    return this.registries.has(name);
  };

  Entity.prototype.getComponentRegistry = function getComponentRegistry(name) {
    return this.registries.get(name);
  };

  Entity.prototype.setComponent = function setComponent(name, component, registry) {
    if (this[name]) {
      throw new Error('Component name "' + name + '" is already assigned!');
    }
    this.registries.set(name, registry);
    this[name] = component;
    if (component.connectedEntity) {
      component.connectedEntity(this);
    }
    return this;
  };

  Entity.prototype.queryComponent = function queryComponent(name, filterCallback) {
    var component = this[name];
    if (component && filterCallback) {
      return filterCallback(component);
    }
    return component;
  };

  Entity.prototype.destroyComponent = function destroyComponent(name) {
    if (this.registries.has(name)) {
      var registry = this.registries.get(name);
      this.registries.delete(name);

      if (registry) {
        registry.destroyComponent(this, name);
      }

      var component = this[name];
      delete this[name];
      if (component.disconnectedEntity) {
        component.disconnectedEntity(this);
      }
    }
    return this;
  };

  Entity.prototype.destroy = function destroy() {
    this.emit('destroy', this);
    destroyAllComponents(this);
  };

  return Entity;
}();

exports.default = Entity;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _resource_library = __webpack_require__(51);

var _resource_library2 = _interopRequireDefault(_resource_library);

var _resources = __webpack_require__(181);

var _resources2 = _interopRequireDefault(_resources);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resourceLibrary = new _resource_library2.default();
(0, _resources2.default)(resourceLibrary);

exports.default = resourceLibrary;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _texture_library = __webpack_require__(64);

var _texture_library2 = _interopRequireDefault(_texture_library);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var textureLibrary = new _texture_library2.default();

exports.default = textureLibrary;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _componentRegistry = __webpack_require__(31);

var _componentRegistry2 = _interopRequireDefault(_componentRegistry);

var _entityManager = __webpack_require__(33);

var _entityManager2 = _interopRequireDefault(_entityManager);

var _removeItem = __webpack_require__(69);

var _removeItem2 = _interopRequireDefault(_removeItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global HTMLElement */


var EntityElement = function (_HTMLElement) {
  _inherits(EntityElement, _HTMLElement);

  /** @ignore */
  function EntityElement(_) {
    var _this, _ret;

    _classCallCheck(this, EntityElement);

    var self = (_this = _possibleConstructorReturn(this, _HTMLElement.call(this, _)), _this);

    Object.defineProperties(self, {
      attributeValuesCache: { value: new Map() },
      attributeNamesCache: { value: [] },
      _componentRegistry: { value: null, writable: true },
      _entityManager: { value: null, writable: true },
      _entity: { value: null, writable: true }
    });

    console.log('[EntityElement] constructor, self=', self);

    return _ret = self, _possibleConstructorReturn(_this, _ret);
  }

  /** @private */
  EntityElement.prototype.updateEntity = function updateEntity() {
    var _this2 = this;

    var attributeNames = this.getAttributeNames();
    var prevAttrNames = this.attributeNamesCache.slice(0);
    this.attributeNamesCache.length = 0;
    attributeNames.forEach(function (attrName) {
      (0, _removeItem2.default)(prevAttrNames, attrName);
      _this2.attributeNamesCache.push(attrName);
      var attributeValuesCache = _this2.attributeValuesCache;

      var oldValue = attributeValuesCache.get(attrName);
      var value = _this2.getAttribute(attrName);
      if (oldValue !== value) {
        attributeValuesCache.set(attrName, value);
        console.log('[EntityElement] attributeValueChanged:', attrName, 'value=', value, 'oldValue=', oldValue);
        _this2.componentRegistry.createOrUpdateComponent(_this2.entity, attrName, value);
      }
    });
    prevAttrNames.forEach(function (attrName) {
      _this2.entity.destroyComponent(attrName);
      _this2.attributeValuesCache.delete(attrName);
      console.log('[EntityElement] attributeRemoved:', attrName);
    });
  };

  EntityElement.prototype.renderFrame = function renderFrame(canvasEl, webGlRenderer, parentEl) {
    this.updateEntity();

    this.entity.emit('renderFrame', webGlRenderer);

    var children = this.children;

    for (var i = 0; i < children.length; i++) {
      var childEl = children[i];
      if (childEl.renderFrame) {
        childEl.renderFrame(canvasEl, webGlRenderer, this);
      }
    }
  };

  /** @private */


  EntityElement.prototype.connectedCallback = function connectedCallback() {
    console.log('[EntityElement] connectedCallback()');
  };

  /** @private */


  EntityElement.prototype.disconnectedCallback = function disconnectedCallback() {
    console.log('[EntityElement] disconnectedCallback()');
  };

  /** @private */
  // static get observedAttributes () {
  // console.log('[EntityElement] observedAttributes() getter called')
  // return [ ]
  // }

  /** @private */
  // attributeChangedCallback (attr, oldValue, newValue) {
  // console.log('[EntityElement] attributeChangedCallback(', attr, ',', oldValue, ',', newValue, ')')
  // }


  _createClass(EntityElement, [{
    key: 'componentRegistry',
    get: function get() {
      return this._componentRegistry || _componentRegistry2.default;
    },
    set: function set(registry) {
      this._componentRegistry = registry;
    }
  }, {
    key: 'entityManager',
    get: function get() {
      return this._entityManager || _entityManager2.default;
    },
    set: function set(manager) {
      this._entityManager = manager;
    }
  }, {
    key: 'entity',
    get: function get() {
      var entity = this._entity;
      if (entity) {
        return entity;
      }
      this._entity = this.entityManager.createEntity();
      return this._entity;
    }
  }]);

  return EntityElement;
}(HTMLElement);

exports.default = EntityElement;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(76);


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _api = __webpack_require__(35);

Object.keys(_api).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _api[key];
    }
  });
});

var _initialize = __webpack_require__(191);

var _initialize2 = _interopRequireDefault(_initialize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _initialize2.default;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _web_gl_context = __webpack_require__(36);

var _web_gl_context2 = _interopRequireDefault(_web_gl_context);

var _web_gl_renderer = __webpack_require__(39);

var _web_gl_renderer2 = _interopRequireDefault(_web_gl_renderer);

var _componentRegistry = __webpack_require__(31);

var _componentRegistry2 = _interopRequireDefault(_componentRegistry);

var _entityManager = __webpack_require__(33);

var _entityManager2 = _interopRequireDefault(_entityManager);

var _resourceLibrary = __webpack_require__(72);

var _resourceLibrary2 = _interopRequireDefault(_resourceLibrary);

var _textureLibrary = __webpack_require__(73);

var _textureLibrary2 = _interopRequireDefault(_textureLibrary);

var _registerCoreComponents = __webpack_require__(67);

var _registerCoreComponents2 = _interopRequireDefault(_registerCoreComponents);

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

var _log = __webpack_require__(34);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var eventize = __webpack_require__(19);
var tinycolor = __webpack_require__(16);

var now = function now() {
  return window.performance.now() / 1000;
};

var defaultOption = function defaultOption(options, key, defaultValueFn) {
  if (options && key in options) {
    return options[key];
  }
  return typeof defaultValueFn === 'function' ? defaultValueFn() : defaultValueFn;
};

var App = function () {
  function App(options) {
    var _this = this;

    _classCallCheck(this, App);

    eventize(this);

    var getOption = defaultOption.bind(null, options);

    this.componentRegistry = _componentRegistry2.default;
    this.entityManager = _entityManager2.default;
    this.resourceLibrary = _resourceLibrary2.default;
    this.textureLibrary = _textureLibrary2.default;

    /**
     * @type {CanvasHTMLElement}
     */
    this.canvas = getOption('canvas', function () {
      return document.createElement('canvas');
    });

    /**
     * The initial attributes used to create the webgl context
     * @type {Object}
     * @see https://developer.mozilla.org/de/docs/Web/API/HTMLCanvasElement/getContext
     */
    this.contextAttributes = {
      alpha: getOption('alpha', false),
      depth: getOption('depth', false),
      stencil: getOption('stencil', false),
      antialias: getOption('antialias', false),
      premultipliedAlpha: getOption('premultipliedAlpha', false),
      preserveDrawingBuffer: getOption('preserveDrawingBuffer', false)

      /**
       * Seconds since App startup
       * @type {number}
       */
    };this.time = getOption('time', 0);

    /** @private */
    this.lastFrameTime = 0;

    /**
     * Seconds since last frame
     * @type {number}
     */
    this.timeFrameOffset = 0;

    /**
     * Frame counter since application startup
     * @type {number}
     */
    this.frameNo = getOption('frameNo', 0);

    this.clearColor = getOption('clearColor');

    this.createGlContext = getOption('createGlContext', function () {
      return function () {
        return createGlContext(_this.canvas, _this.contextAttributes);
      };
    });

    // TODO add global componentRegistry ?
    (0, _registerCoreComponents2.default)(this.componentRegistry);

    this.entity = this.entityManager.createEntity();
    this.entity.setComponent('blitpunk', this); // why?
    this.entity.setComponent('resourceLibrary', this.resourceLibrary); // why?
    this.entity.setComponent('textureLibrary', this.textureLibrary); // why?
    this.componentRegistry.createComponent(this.entity, 'children'); // why?

    this.el = null;

    this.started = false;
    this.stopped = false;
    this.destroyed = false;
  }

  App.prototype.start = function start() {
    var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

    if (!this.canStart) return;

    if (this.stopped) {
      this.stopped = false;
      this.resize();
      this.requestAnimate();
      return;
    }

    // first-time initialization follows now ..

    this.el = el;
    this.started = true;

    /**
     * @type {WebGlContext}
     */
    this.glx = new _web_gl_context2.default(this.createGlContext());

    /**
     * @type {WebGlRenderer}
     */
    this.renderer = new _web_gl_renderer2.default(this.glx);

    if (this._clearColor) {
      this.renderer.setClearColor(this._clearColor);
    }

    /**
     * Startup time in seconds.
     * @type {number}
     */
    this.startTime = now();

    this.el.appendChild(this.canvas);
    this.resize();
    this.requestAnimate();
  };

  App.prototype.requestAnimate = function requestAnimate() {
    var _this2 = this;

    this.rafSubscription = window.requestAnimationFrame(function () {
      return _this2.animate();
    });
  };

  App.prototype.cancelAnimate = function cancelAnimate() {
    window.cancelAnimationFrame(this.rafSubscription);
  };

  App.prototype.stop = function stop() {
    if (!this.canStop) return;
    this.stopped = true;
    this.cancelAnimate();
  };

  App.prototype.destroy = function destroy() {
    if (this.destroyed) return;
    this.cancelAnimate();
    try {
      this.glx.destroy();
    } catch (err0) {
      (0, _log.error)('blitpunk->destroy(WebGlContext) panic!', err0);
    }
    try {
      this.renderer.destroy();
    } catch (err1) {
      (0, _log.error)('blitpunk->destroy(WebGlRenderer) panic!', err1);
    }
    // try {
    // this.textureLibrary.destroy()
    // } catch (err2) {
    // error('blitpunk->destroy(TextureLibrary) panic!', err2)
    // }
    // try {
    // this.resourceLibrary.destroy()
    // } catch (err3) {
    // error('blitpunk->destroy(ResourceLibrary) panic!', err3)
    // }
    // try {
    // this.entityManager.destroy()
    // } catch (err4) {
    // error('blitpunk->destroy(EntityManager) panic!', err4)
    // }
    // this.componentRegistry (ComponentRegistry)
    this.el.removeChild(this.canvas);
    (0, _destroy3.default)(this);
  };

  /**
   * Start the main animation loop.
   */
  App.prototype.animate = function animate() {
    if (!this.canAnimate) return;
    this.renderFrame();
    this.requestAnimate();
  };

  /**
   * Render the frame.
   */


  App.prototype.renderFrame = function renderFrame() {
    ++this.frameNo;
    this.time = now() - this.startTime;
    if (this.lastFrameTime) {
      this.timeFrameOffset = this.time - this.lastFrameTime;
    }
    this.lastFrameTime = this.time;
    this.resize();
    this.renderer.renderFrame(this.entity, this);
  };

  /**
   * Resize the canvas dom element to the same size as the `<blitpunk-canvas>.parentNode`
   */


  App.prototype.resize = function resize() {
    var style = window.getComputedStyle(this.el, null);
    var el = style.display === 'inline' ? this.el.parentNode : this.el;

    var canvas = this.canvas;

    var dpr = window.devicePixelRatio || 1;

    var wPx = el.clientWidth;
    var hPx = el.clientHeight;

    canvas.style.width = wPx + 'px';
    canvas.style.height = hPx + 'px';

    var w = Math.round(wPx * dpr);
    var h = Math.round(hPx * dpr);

    if (w !== canvas.width || h !== canvas.height) {
      canvas.width = w;
      canvas.height = h;
    }

    if (w !== this.width || h !== this.height) {
      /**
       * Canvas size in _device_ pixels.
       * @type {number}
       */
      this.width = w;
      /**
       * Canvas size in _device_ pixels.
       * @type {number}
       */
      this.height = h;

      this.glx.gl.viewport(0, 0, w, h); // TODO move this into WebGlRenderer
    }
  };

  _createClass(App, [{
    key: 'clearColor',
    get: function get() {
      return this.renderer ? this.renderer.clearColor : this._clearColor;
    },
    set: function set(color) {
      this._clearColor = color == null ? color : tinycolor(color);
      if (this.renderer) {
        this.renderer.setClearColor(this._clearColor);
      }
    }
  }, {
    key: 'canStart',
    get: function get() {
      return (!this.started || this.started && this.stopped) && !this.destroyed;
    }
  }, {
    key: 'canStop',
    get: function get() {
      return this.started && !this.stopped && !this.destroyed;
    }
  }, {
    key: 'canAnimate',
    get: function get() {
      return this.started && !this.stopped && !this.destroyed;
    }
  }]);

  return App;
}();

/** @private */


function createGlContext(canvas, ctxAttrs) {
  var gl = void 0;

  try {
    gl = canvas.getContext('webgl', ctxAttrs);
  } catch (err0) {
    (0, _log.error)(err0);
  }

  if (!gl) {
    try {
      gl = canvas.getContext('experimental-webgl', ctxAttrs);
    } catch (err1) {
      (0, _log.error)(err1);
    }
  }

  if (!gl) {
    throw new Error('cannot create webgl1 context');
  }

  return gl;
}

exports.default = App;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _resource_ref = __webpack_require__(5);

var _resource_ref2 = _interopRequireDefault(_resource_ref);

var _web_gl_shader = __webpack_require__(83);

var _web_gl_shader2 = _interopRequireDefault(_web_gl_shader);

var _web_gl_program = __webpack_require__(85);

var _web_gl_program2 = _interopRequireDefault(_web_gl_program);

var _web_gl_buffer = __webpack_require__(38);

var _web_gl_buffer2 = _interopRequireDefault(_web_gl_buffer);

var _web_gl_texture = __webpack_require__(88);

var _web_gl_texture2 = _interopRequireDefault(_web_gl_texture);

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WEB_GL_BUFFER_USAGE = Object.freeze({
  static: _web_gl_buffer2.default.STATIC_DRAW,
  dynamic: _web_gl_buffer2.default.DYNAMIC_DRAW
});

var WebGlResourceLibrary = function () {
  function WebGlResourceLibrary(glx) {
    _classCallCheck(this, WebGlResourceLibrary);

    Object.defineProperty(this, 'glx', { value: glx });

    /** @private */
    this.vertexShader = new Map();
    /** @private */
    this.fragmentShader = new Map();
    /** @private */
    this.shaderProgram = new Map();
    /** @private */
    this.buffer = new Map();
    /** @private */
    this.texture = new Map();
  }

  WebGlResourceLibrary.prototype.destroy = function destroy() {
    this.texture.clear();
    this.buffer.clear();
    this.shaderProgram.clear();
    this.fragmentShader.clear();
    this.vertexShader.clear();
    (0, _destroy3.default)(this);
  };

  WebGlResourceLibrary.prototype.loadVertexShader = function loadVertexShader(shaderSource) {
    var glShader = this.vertexShader.get(shaderSource.id);
    if (!glShader) {
      glShader = new _web_gl_shader2.default(this.glx, shaderSource);
      this.vertexShader.set(shaderSource.id, glShader);
    }
    return glShader;
  };

  WebGlResourceLibrary.prototype.loadFragementShader = function loadFragementShader(shaderSource) {
    var glShader = this.fragmentShader.get(shaderSource.id);
    if (!glShader) {
      glShader = new _web_gl_shader2.default(this.glx, shaderSource);
      this.vertexShader.set(shaderSource.id, glShader);
    }
    return glShader;
  };

  WebGlResourceLibrary.prototype.loadProgram = function loadProgram(shaderProgram) {
    var program = this.shaderProgram.get(shaderProgram.id);
    if (!program) {
      program = new _web_gl_program2.default(this.glx, shaderProgram);
      this.shaderProgram.set(shaderProgram.id, program);
    }
    return program;
  };

  /**
   * @param {ResourceRef} ref - resource reference to VOArray or `ElementIndexArray`
   * @returns {ResourceRef} resource reference to `WebGlBuffer`
   */


  WebGlResourceLibrary.prototype.loadBuffer = function loadBuffer(ref) {
    var bufferRef = this.buffer.get(ref.id);
    if (!bufferRef) {
      // create WebGlBuffer
      var target = ref.hints.target || _web_gl_buffer2.default.ARRAY_BUFFER;
      var glBuffer = new _web_gl_buffer2.default(this.glx, target, WEB_GL_BUFFER_USAGE[ref.hints.usage]);
      // create ResourceRef
      bufferRef = new _resource_ref2.default(glBuffer, { id: ref.id, serial: 0 });
      this.buffer.set(ref.id, bufferRef);
    }
    return bufferRef;
  };

  /**
   * @param {ResourceRef} resourceRef
   * @returns {ResourceRef} resource reference to WebGlBuffer
   */


  WebGlResourceLibrary.prototype.findBuffer = function findBuffer(resourceRef) {
    return this.buffer.get(resourceRef.id);
  };

  /**
   * @param {ResourceRef} texRef - resource reference to texture
   * @returns {ResourceRef} resource reference to WebGlTexture
   */


  WebGlResourceLibrary.prototype.loadTexture = function loadTexture(texRef) {
    var glTextureRef = this.texture.get(texRef.id);
    if (!glTextureRef) {
      // create WebGlTexture
      var glTex = new _web_gl_texture2.default(this.glx, texRef.resource.imgEl, texRef.hints.flipY, texRef.hints.repeatable, texRef.hints.premultiplyAlpha, texRef.hints.nearest);
      // create ResourceRef
      glTextureRef = new _resource_ref2.default(glTex, { id: texRef.id, serial: 0 });
      this.texture.set(texRef.id, glTextureRef);
    }
    return glTextureRef;
  };

  return WebGlResourceLibrary;
}();

exports.default = WebGlResourceLibrary;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(80);
var bytesToUuid = __webpack_require__(81);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
var rng;

var crypto = global.crypto || global.msCrypto; // for IE 11
if (crypto && crypto.getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
  rng = function whatwgRNG() {
    crypto.getRandomValues(rnds8);
    return rnds8;
  };
}

if (!rng) {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);
  rng = function() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

module.exports = rng;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 81 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Serial = function () {
  /**
   * @param {number} [initialValue=1]
   */
  function Serial() {
    var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    _classCallCheck(this, Serial);

    this.value = initialValue;
  }

  Serial.prototype.touch = function touch() {
    ++this.value;
  };

  return Serial;
}();

exports.default = Serial;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _shader_source = __webpack_require__(18);

var _shader_source2 = _interopRequireDefault(_shader_source);

var _source_to_str = __webpack_require__(84);

var _source_to_str2 = _interopRequireDefault(_source_to_str);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebGlShader = function WebGlShader(glx, source) {
  _classCallCheck(this, WebGlShader);

  this.glx = glx;

  if (!(source instanceof _shader_source2.default)) {
    throw new Error('WebGlShader panic! source must be an instance of ShaderSource!');
  }
  this.source = source;

  var gl = glx.gl;

  this.shaderType = gl[source.type];

  this.glShader = gl.createShader(this.shaderType);
  compileShader(this);

  Object.freeze(this);
};

exports.default = WebGlShader;


function compileShader(shader) {
  var gl = shader.glx.gl;
  var glShader = shader.glShader,
      source = shader.source;


  var src = (0, _source_to_str2.default)({ glx: shader.glx }, source.source);

  gl.shaderSource(glShader, src);
  gl.compileShader(glShader);

  if (!gl.getShaderParameter(glShader, gl.COMPILE_STATUS)) {
    var shaderInfoLog = gl.getShaderInfoLog(glShader);

    console.error(shaderInfoLog);
    console.group('shader-info');
    console.debug('shaderSource', shader);
    console.log(source);
    console.groupEnd();

    var err = new Error('WebGlShader compile panic!');
    err.webGlShader = shader;
    err.shaderInfoLog = shaderInfoLog;
    throw err;
  }
}

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = sourceToStr;
function sourceToStr(ctx, source) {
  if (typeof source === 'string') {
    return source;
  } else if (typeof source === 'function') {
    return sourceToStr(ctx, source(ctx));
  } else if (Array.isArray(source)) {
    return source.map(sourceToStr.bind(null, ctx)).join('\n');
  } else {
    return source + '';
  }
}

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _web_gl_uniform = __webpack_require__(86);

var _web_gl_uniform2 = _interopRequireDefault(_web_gl_uniform);

var _web_gl_attribute = __webpack_require__(87);

var _web_gl_attribute2 = _interopRequireDefault(_web_gl_attribute);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebGlProgram = function () {
  function WebGlProgram(glx, shaderProgram) {
    _classCallCheck(this, WebGlProgram);

    this.glx = glx;

    this.vertexShader = glx.resourceLibrary.loadVertexShader(shaderProgram.vertexShader);
    this.fragmentShader = glx.resourceLibrary.loadFragementShader(shaderProgram.fragmentShader);

    var gl = glx.gl;

    this.glProgram = gl.createProgram();

    linkProgram(this, this.vertexShader.glShader, this.fragmentShader.glShader);
    // TODO gl.deleteShader?

    createUniforms(this);
    createAttributes(this);

    Object.freeze(this);
  }

  /**
   * @return {boolean}
   */


  WebGlProgram.prototype.use = function use() {
    var glx = this.glx;

    if (glx.useProgram(this.glProgram)) {
      glx.enableVertexAttribArrays(this.attributeLocations);
      return true;
    }
    return false;
  };

  /**
   * @param {ShaderContext} shaderContext
   * @param {WebGlRenderer} renderer
   */


  WebGlProgram.prototype.loadUniforms = function loadUniforms(shaderContext, renderer) {
    var _this = this;

    this.uniformNames.forEach(function (name) {
      var shaderVar = shaderContext.curUniform(name);
      if (shaderVar == null) {
        shaderVar = shaderContext.curTex2d(name);
        if (shaderVar == null) {
          console.error('[WebGlProgram] could not load uniform:', name);
        }
        shaderVar.syncTextureAndValue(renderer);
      }
      _this.uniforms[name].setValue(shaderVar.value);
    });
  };

  /**
   * sync buffer before load
   *
   * @param {ShaderContext} shaderContext
   * @param {WebGlRenderer} renderer
   */


  WebGlProgram.prototype.loadAttributes = function loadAttributes(shaderContext, renderer) {
    var _this2 = this;

    this.attributeNames.forEach(function (name) {
      var attribValue = shaderContext.curAttrib(name).value;
      renderer.syncBuffer(attribValue).bindBuffer();
      _this2.attributes[name].vertexAttribPointer(attribValue.descriptor);
    });
  };

  return WebGlProgram;
}();

/** @private */


exports.default = WebGlProgram;
function createAttributes(program) {
  var gl = program.glx.gl;

  var len = gl.getProgramParameter(program.glProgram, gl.ACTIVE_ATTRIBUTES);

  program.attributes = {};
  program.attributeNames = [];
  program.attributeLocations = [];

  for (var i = 0; i < len; ++i) {
    var attrib = new _web_gl_attribute2.default(program, i);
    program.attributes[attrib.name] = attrib;
    program.attributeNames.push(attrib.name);
    program.attributeLocations.push(attrib.location);
  }

  Object.freeze(program.attributes);
}

/** @private */
function createUniforms(program) {
  var gl = program.glx.gl;

  var len = gl.getProgramParameter(program.glProgram, gl.ACTIVE_UNIFORMS);

  program.uniforms = {};
  program.uniformNames = [];

  for (var i = 0; i < len; ++i) {
    var uniform = new _web_gl_uniform2.default(program, i);
    program.uniforms[uniform.name] = uniform;
    program.uniformNames.push(uniform.name);
  }

  Object.freeze(program.uniforms);
}

/** @private */
function linkProgram(program, vertexShader, fragmentShader) {
  var gl = program.glx.gl;
  var glProgram = program.glProgram;


  gl.attachShader(glProgram, vertexShader);
  gl.attachShader(glProgram, fragmentShader);

  gl.linkProgram(glProgram);

  if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {
    var err = new Error('WebGlProgram link panic!');
    err.webGlProgram = program;
    throw err;
  }
}

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebGlUniform = function WebGlUniform(program, index) {
  _classCallCheck(this, WebGlUniform);

  this.program = program;
  this.glx = program.glx;

  var gl = program.glx.gl;
  var glProgram = program.glProgram;

  var _gl$getActiveUniform = gl.getActiveUniform(glProgram, index),
      name = _gl$getActiveUniform.name,
      size = _gl$getActiveUniform.size,
      type = _gl$getActiveUniform.type;

  this.name = name;
  this.size = size;
  this.type = type;

  this.location = gl.getUniformLocation(glProgram, name);

  this.setValue = uniformSetter(this);

  Object.freeze(this);
};

exports.default = WebGlUniform;


function uniformSetter(uniform) {
  var type = uniform.type,
      location = uniform.location;
  var gl = uniform.glx.gl;


  switch (type) {
    case gl.FLOAT:
      return function (value) {
        return gl.uniform1f(location, value);
      };

    case gl.FLOAT_VEC2:
      return function (value) {
        return gl.uniform2f(location, value[0], value[1]);
      };

    case gl.FLOAT_VEC3:
      return function (value) {
        return gl.uniform3f(location, value[0], value[1], value[2]);
      };

    case gl.FLOAT_VEC4:
      return function (value) {
        return gl.uniform4f(location, value[0], value[1], value[2], value[3]);
      };

    case gl.FLOAT_MAT4:
      return function (value) {
        return gl.uniformMatrix4fv(location, gl.FALSE, value.mat4);
      };

    case gl.SAMPLER_2D:
      return function (value) {
        return gl.uniform1i(location, value);
      };
  }

  var err = new Error("WebGlUniform unknown uniform type:" + type);
  err.webGlUniform = uniform;
  throw err;
}

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typed_array_helpers = __webpack_require__(6);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var glType = function glType(gl, type) {
  return gl[_typed_array_helpers.GL_ITEM_TYPES[type]];
};

var WebGlAttribute = function () {
  function WebGlAttribute(program, index) {
    _classCallCheck(this, WebGlAttribute);

    this.program = program;
    this.glx = program.glx;

    var gl = program.glx.gl;
    var glProgram = program.glProgram;

    var _gl$getActiveAttrib = gl.getActiveAttrib(glProgram, index),
        name = _gl$getActiveAttrib.name,
        size = _gl$getActiveAttrib.size,
        type = _gl$getActiveAttrib.type;

    this.name = name;
    this.size = size;
    this.type = type;

    this.location = gl.getAttribLocation(glProgram, name);

    Object.freeze(this);
  }

  /**
   * @param {VODescriptor} descriptor
   */


  WebGlAttribute.prototype.vertexAttribPointer = function vertexAttribPointer(descriptor) {
    var gl = this.glx.gl;

    var attr = descriptor.attr[this.name];
    var type = glType(gl, attr.type);
    gl.vertexAttribPointer(this.location, attr.size, type, false, descriptor.bytesPerVertex, attr.byteOffset);
  };

  return WebGlAttribute;
}();

exports.default = WebGlAttribute;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebGlTexture = function () {
  /**
   * @param {WebGlContext} glx
   * @param {HTMLImageElement} imgEl
   * @param {boolean} [flipY=false]
   * @param {boolean} [repeatable=false]
   * @param {boolean} [premultiplyAlpha=false]
   * @param {boolean} [nearest=false]
   */
  function WebGlTexture(glx, imgEl) {
    var flipY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var repeatable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var premultiplyAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var nearest = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    _classCallCheck(this, WebGlTexture);

    this.glx = glx;
    this.imgEl = imgEl;

    this.flipY = flipY;
    this.repeatable = repeatable;
    this.premultiplyAlpha = premultiplyAlpha;
    this.nearest = nearest;

    this.isInitialized = false;
    this.glTexObj = glx.gl.createTexture();
    this.texUnit = -1;
  }

  WebGlTexture.prototype.bind = function bind() {
    return this.glx.textureManager.bindWebGlTexture(this);
  };

  WebGlTexture.prototype.uploadImageData = function uploadImageData() {
    if (this.imgEl == null) return;
    if (!this.isInitialized) {
      initialize(this);
      this.isInitialized = true;
    }

    this.bind();

    var gl = this.glx.gl;

    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.imgEl);
  };

  return WebGlTexture;
}();

exports.default = WebGlTexture;


function initialize(tex) {
  tex.bind();

  var gl = tex.glx.gl;


  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, tex.flipY);
  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, tex.premultiplyAlpha);

  var wrap = tex.repeatable ? gl.REPEAT : gl.CLAMP_TO_EDGE;
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);

  var filter = tex.nearest ? gl.NEAREST : gl.LINEAR;
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);

  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, tex.imgEl.width, tex.imgEl.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
}

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebGlTextureManager = function () {
  /**
   * @param {WebGlContext} glx
   */
  function WebGlTextureManager(glx) {
    _classCallCheck(this, WebGlTextureManager);

    Object.defineProperty(this, 'glx', { value: glx });

    /**
     * texUnit -> WebGlTexture
     * @type {Array<number>}
     */
    this.boundTextures = new Array(glx.MAX_TEXTURE_IMAGE_UNITS);

    for (var i = 0; i < this.boundTextures.length; ++i) {
      this.boundTextures[i] = null;
    }

    this.lastBoundTexUnit = 0;
  }

  WebGlTextureManager.prototype.destroy = function destroy() {
    this.boundTextures.length = 0;
    (0, _destroy3.default)(this);
  };

  /**
   * Bind a *texture* to a *texture unit*.
   * @param {WebGlTexture} glTexture
   * @return {number} texture unit
   */


  WebGlTextureManager.prototype.bindWebGlTexture = function bindWebGlTexture(glTexture) {
    var texUnit = this.boundTextures.indexOf(glTexture);

    if (texUnit < 0) {
      // texture is unbound
      // find a free texture unit ..
      for (var i = 0; i < this.boundTextures.length; ++i) {
        if (!this.boundTextures[i]) {
          texUnit = i;
          this.boundTextures[i] = glTexture;
          break;
        }
      }

      if (texUnit < 0) {
        // no free texture found
        // so we choose the lru texture unit

        texUnit = this.lastBoundTexUnit;

        var prevGlTex = this.boundTextures[texUnit];
        if (prevGlTex) prevGlTex.texUnit = -1;

        this.lastBoundTexUnit = (this.lastBoundTexUnit + 1) % this.glx.MAX_TEXTURE_IMAGE_UNITS;
      }

      this.glx.activeTexture(texUnit);
      this.glx.bindTexture2d(glTexture.glTexObj);

      glTexture.texUnit = texUnit;
    }

    return texUnit;
  };

  return WebGlTextureManager;
}();

exports.default = WebGlTextureManager;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createVO = createVO;

/** @private */
function createVO(obj, descriptor, voArray) {
  // set VODescriptor
  //
  obj.descriptor = descriptor || (voArray ? voArray.descriptor : null);

  if (!obj.descriptor) {
    throw new Error('could not detect VODescriptor!');
  }

  // set VOArray
  //
  obj.voArray = voArray || obj.descriptor.createVOArray();

  if (obj.descriptor !== obj.voArray.descriptor && (obj.descriptor.vertexCount !== obj.voArray.descriptor.vertexCount || obj.descriptor.vertexAttrCount !== obj.voArray.descriptor.vertexAttrCount)) {
    throw new Error('Incompatible vertex object descriptors!');
  }

  return obj;
}

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** @private */


exports.default = function (descriptor, proto) {
  var propertiesObject = {

    toArray: {

      value: function value(attrNames) {
        var arr = [];
        var attrList = Array.isArray(attrNames) ? attrNames.map(function (name) {
          return descriptor.attr[name];
        }) : descriptor.attrList;
        var len = attrList.length;
        for (var i = 0; i < descriptor.vertexCount; ++i) {
          for (var j = 0; j < len; ++j) {
            var attr = attrList[j];
            for (var k = 0; k < attr.size; ++k) {
              arr.push(attr.getValue(this, i, k));
            }
          }
        }
        return arr;
      }

    }

  };

  Object.keys(descriptor.attr).forEach(function (name) {
    var attr = descriptor.attr[name];

    _v_o_attr_descriptor2.default.defineProperties(attr, propertiesObject, descriptor);
  });

  descriptor.voPrototype = Object.create((typeof proto === 'undefined' ? 'undefined' : _typeof(proto)) === 'object' ? proto : {}, propertiesObject);
};

var _v_o_attr_descriptor = __webpack_require__(8);

var _v_o_attr_descriptor2 = _interopRequireDefault(_v_o_attr_descriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (descriptor) {
  descriptor.typedArrays = {
    float32: false,
    int16: false,
    int32: false,
    int8: false,
    uint16: false,
    uint32: false,
    uint8: false
  };

  Object.keys(descriptor.attr).forEach(function (name) {
    descriptor.typedArrays[descriptor.attr[name].type] = true;
  });

  Object.freeze(descriptor.typedArrays);

  descriptor.typeList = Object.keys(descriptor.typedArrays).filter(function (type) {
    return descriptor.typedArrays[type];
  }).sort();
};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (descriptor, attributes) {
  descriptor.attr = {};
  descriptor.attrNames = [];

  if (Array.isArray(attributes)) {
    var offset = 0;
    var byteOffset = 0;

    for (var i = 0; i < attributes.length; ++i) {
      var attr = attributes[i];

      if (attr.size === undefined) throw new Error('vertex object attribute descriptor has no size!');

      var type = attr.type || 'float32';

      if (attr.name !== undefined) {
        descriptor.attrNames.push(attr.name);
        descriptor.attr[attr.name] = new _v_o_attr_descriptor2.default(attr.name, type, attr.size, offset, byteOffset, !!attr.uniform, attr.attrNames);
      }

      offset += attr.size;
      byteOffset += _typed_array_helpers.BYTES_PER_ELEMENT[type] * attr.size;
    }

    // bytes per vertex is always aligned to 4-bytes!
    descriptor.rightPadBytesPerVertex = byteOffset % 4 > 0 ? 4 - byteOffset % 4 : 0;
    descriptor.bytesPerVertex = byteOffset + descriptor.rightPadBytesPerVertex;
    descriptor.bytesPerVO = descriptor.bytesPerVertex * descriptor.vertexCount;
    descriptor.vertexAttrCount = offset;
  }

  descriptor.attrList = descriptor.attrNames.map(function (name) {
    return descriptor.attr[name];
  });
};

var _typed_array_helpers = __webpack_require__(6);

var _v_o_attr_descriptor = __webpack_require__(8);

var _v_o_attr_descriptor2 = _interopRequireDefault(_v_o_attr_descriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** @private */


exports.default = function (descriptor, aliases) {
  if ((typeof aliases === 'undefined' ? 'undefined' : _typeof(aliases)) !== 'object') return;

  Object.keys(aliases).forEach(function (name) {
    var attr = aliases[name];

    if (typeof attr === 'string') {
      attr = descriptor.attr[attr];

      if (attr !== undefined) {
        descriptor.attr[name] = attr;
      }
    } else {
      descriptor.attr[name] = new _v_o_attr_descriptor2.default(name, attr.type, attr.size, attr.offset, attr.byteOffset, !!attr.uniform, attr.attrNames);
    }
  });
};

var _v_o_attr_descriptor = __webpack_require__(8);

var _v_o_attr_descriptor2 = _interopRequireDefault(_v_o_attr_descriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (voPool) {
  var maxAllocSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var max = voPool.capacity - voPool.usedCount - voPool.allocatedCount;
  var len = voPool.allocatedCount + (maxAllocSize > 0 && maxAllocSize < max ? maxAllocSize : max);

  for (var i = voPool.allocatedCount; i < len; i++) {
    var voArray = voPool.voArray.subarray(i);

    var vertexObject = voPool.descriptor.createVO(voArray);
    vertexObject.free = voPool.free.bind(voPool, vertexObject);

    voPool.availableVOs.push(vertexObject);
  }
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var snakeCase = __webpack_require__(97);

var BlendMode = function () {
  function BlendMode(enable) {
    var sfactor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var dfactor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, BlendMode);

    this.enable = enable;
    this.sfactor = sfactor;
    this.dfactor = dfactor;
  }

  BlendMode.prototype.isEqual = function isEqual(other) {
    return other && this.enable === other.enable && this._sfactor === other._sfactor && this._dfactor === other._dfactor;
  };

  _createClass(BlendMode, [{
    key: 'sfactor',
    set: function set(value) {
      this._sfactor = typeof value === 'string' ? snakeCase(value).toUpperCase() : undefined;
    },
    get: function get() {
      return this._sfactor;
    }
  }, {
    key: 'dfactor',
    set: function set(value) {
      this._dfactor = typeof value === 'string' ? snakeCase(value).toUpperCase() : undefined;
    },
    get: function get() {
      return this._dfactor;
    }
  }]);

  return BlendMode;
}();

exports.default = BlendMode;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var createCompounder = __webpack_require__(98);

/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */
var snakeCase = createCompounder(function(result, word, index) {
  return result + (index ? '_' : '') + word.toLowerCase();
});

module.exports = snakeCase;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var arrayReduce = __webpack_require__(99),
    deburr = __webpack_require__(100),
    words = __webpack_require__(108);

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

module.exports = createCompounder;


/***/ }),
/* 99 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var deburrLetter = __webpack_require__(101),
    toString = __webpack_require__(20);

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

/** Used to compose unicode capture groups. */
var rsCombo = '[' + rsComboRange + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

module.exports = deburr;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var basePropertyOf = __webpack_require__(102);

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

module.exports = deburrLetter;


/***/ }),
/* 102 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

module.exports = basePropertyOf;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9),
    arrayMap = __webpack_require__(105),
    isArray = __webpack_require__(3),
    isSymbol = __webpack_require__(22);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 105 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),
/* 107 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var asciiWords = __webpack_require__(109),
    hasUnicodeWord = __webpack_require__(110),
    toString = __webpack_require__(20),
    unicodeWords = __webpack_require__(111);

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = words;


/***/ }),
/* 109 */
/***/ (function(module, exports) {

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

module.exports = asciiWords;


/***/ }),
/* 110 */
/***/ (function(module, exports) {

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

module.exports = hasUnicodeWord;


/***/ }),
/* 111 */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
    rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

module.exports = unicodeWords;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _mat = __webpack_require__(46);

var _mat2 = _interopRequireDefault(_mat);

var _shader_uniform_variable = __webpack_require__(50);

var _shader_uniform_variable2 = _interopRequireDefault(_shader_uniform_variable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UNIFORM_NAME = 'viewMatrix';

/**
 * @param {object} options
 * @param {number} [options.desiredWidth] - desired width
 * @param {number} [options.desiredHeight] - desired height
 * @param {number} [options.pixelRatio] - pixel ratio
 * @param {string} [options.sizeFit] - `cover`, `contain` or `fill`
 * @param {string} [options.uniformName='viewMatrix'] - name of the uniform value
 */

var Projection = function () {
  function Projection(_ref) {
    var desiredWidth = _ref.desiredWidth,
        desiredHeight = _ref.desiredHeight,
        pixelRatio = _ref.pixelRatio,
        sizeFit = _ref.sizeFit,
        uniformName = _ref.uniformName;

    _classCallCheck(this, Projection);

    this.desiredWidth = desiredWidth;
    this.desiredHeight = desiredHeight;
    this.pixelRatio = pixelRatio;
    this.sizeFit = sizeFit;
    this.uniform = new _shader_uniform_variable2.default(uniformName || UNIFORM_NAME, new _mat2.default());
    this.width = 0;
    this.height = 0;
  }

  Projection.prototype.updateOrtho = function updateOrtho(width, height) {
    if (width !== this.width || height !== this.height) {
      this.width = width;
      this.height = height;
      // this.uniform.value.ortho(width, height)
      // TODO enable perspective with distance
      this.uniform.value.perspective(width, height, 100);
      this.uniform.touch();
    }
  };

  Projection.prototype.update = function update(currentWidth, currentHeight) {
    // TODO pixelRatio and currentPixelRatio
    if (this.sizeFit === 'fill' && this.desiredWidth > 0 && this.desiredHeight > 0) {
      this.updateOrtho(this.desiredWidth, this.desiredHeight);
    } else if ((this.sizeFit === 'cover' || this.sizeFit === 'contain') && this.desiredWidth >= 0 && this.desiredHeight >= 0) {
      var currentRatio = currentHeight / currentWidth; // <1 : landscape, >1 : portrait
      var desiredRatio = this.desiredHeight / this.desiredWidth;
      var isCover = this.sizeFit === 'cover';

      var width = this.desiredWidth;
      var height = this.desiredHeight;

      if (this.desiredWidth === 0 && this.desiredHeight || currentRatio < desiredRatio) {
        width = this.desiredHeight / currentHeight * currentWidth;
        if (isCover) {
          var factor = this.desiredWidth / width;
          width *= factor;
          height *= factor;
        }
      } else if (this.desiredWidth && this.desiredHeight === 0 || currentRatio > desiredRatio) {
        height = this.desiredWidth / currentWidth * currentHeight;
        if (isCover) {
          var _factor = this.desiredHeight / height;
          width *= _factor;
          height *= _factor;
        }
      }

      this.updateOrtho(width, height);
    }
  };

  return Projection;
}();

exports.default = Projection;

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4__ = __webpack_require__(116);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__gl_matrix_vec2__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec3__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec4__ = __webpack_require__(49);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "glMatrix", function() { return __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat2", function() { return __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat2d", function() { return __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat3", function() { return __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat4", function() { return __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "quat", function() { return __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec2", function() { return __WEBPACK_IMPORTED_MODULE_6__gl_matrix_vec2__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec3", function() { return __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec3__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec4", function() { return __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec4__; });
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.4.0
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER













/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["transpose"] = transpose;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["adjoint"] = adjoint;
/* harmony export (immutable) */ __webpack_exports__["determinant"] = determinant;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["rotate"] = rotate;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["fromRotation"] = fromRotation;
/* harmony export (immutable) */ __webpack_exports__["fromScaling"] = fromScaling;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["frob"] = frob;
/* harmony export (immutable) */ __webpack_exports__["LDU"] = LDU;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalar"] = multiplyScalar;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(1);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */
function fromValues(m00, m01, m10, m11) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}

/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */
function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    let a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function invert(out, a) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];

  // Calculate the determinant
  let det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] =  a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] =  a0 * det;

  return out;
}

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  let a0 = a[0];
  out[0] =  a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] =  a0;

  return out;
}

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function multiply(out, a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
function rotate(out, a, rad) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = a0 *  c + a2 * s;
  out[1] = a1 *  c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
function scale(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let v0 = v[0], v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
}

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2]/a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}

/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}

/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  return out;
}

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link mat2.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;



/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["determinant"] = determinant;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["rotate"] = rotate;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["translate"] = translate;
/* harmony export (immutable) */ __webpack_exports__["fromRotation"] = fromRotation;
/* harmony export (immutable) */ __webpack_exports__["fromScaling"] = fromScaling;
/* harmony export (immutable) */ __webpack_exports__["fromTranslation"] = fromTranslation;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["frob"] = frob;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalar"] = multiplyScalar;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(1);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2x3 Matrix
 * @module mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](6);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */
function fromValues(a, b, c, d, tx, ty) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}

/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */
function set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
function invert(out, a) {
  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];
  let atx = a[4], aty = a[5];

  let det = aa * ad - ab * ac;
  if(!det){
    return null;
  }
  det = 1.0 / det;

  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function multiply(out, a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
function rotate(out, a, rad) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = a0 *  c + a2 * s;
  out[1] = a1 *  c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
function scale(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let v0 = v[0], v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
function translate(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let v0 = v[0], v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad), c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
          a[3] + ', ' + a[4] + ', ' + a[5] + ')';
}

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
}

/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}

/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)));
}

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link mat2d.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;



/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["transpose"] = transpose;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["adjoint"] = adjoint;
/* harmony export (immutable) */ __webpack_exports__["determinant"] = determinant;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["translate"] = translate;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["rotate"] = rotate;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["fromTranslation"] = fromTranslation;
/* harmony export (immutable) */ __webpack_exports__["fromScaling"] = fromScaling;
/* harmony export (immutable) */ __webpack_exports__["fromRotation"] = fromRotation;
/* harmony export (immutable) */ __webpack_exports__["fromXRotation"] = fromXRotation;
/* harmony export (immutable) */ __webpack_exports__["fromYRotation"] = fromYRotation;
/* harmony export (immutable) */ __webpack_exports__["fromZRotation"] = fromZRotation;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslation"] = fromRotationTranslation;
/* harmony export (immutable) */ __webpack_exports__["getTranslation"] = getTranslation;
/* harmony export (immutable) */ __webpack_exports__["getScaling"] = getScaling;
/* harmony export (immutable) */ __webpack_exports__["getRotation"] = getRotation;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslationScale"] = fromRotationTranslationScale;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslationScaleOrigin"] = fromRotationTranslationScaleOrigin;
/* harmony export (immutable) */ __webpack_exports__["fromQuat"] = fromQuat;
/* harmony export (immutable) */ __webpack_exports__["frustum"] = frustum;
/* harmony export (immutable) */ __webpack_exports__["perspective"] = perspective;
/* harmony export (immutable) */ __webpack_exports__["perspectiveFromFieldOfView"] = perspectiveFromFieldOfView;
/* harmony export (immutable) */ __webpack_exports__["ortho"] = ortho;
/* harmony export (immutable) */ __webpack_exports__["lookAt"] = lookAt;
/* harmony export (immutable) */ __webpack_exports__["targetTo"] = targetTo;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["frob"] = frob;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalar"] = multiplyScalar;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(1);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 4x4 Matrix
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](16);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}

/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}


/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    let a01 = a[1], a02 = a[2], a03 = a[3];
    let a12 = a[6], a13 = a[7];
    let a23 = a[11];

    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

  return out;
}

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
  return out;
}

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}

/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  // Cache only the current line of the second matrix
  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
  return out;
}

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
  let x = v[0], y = v[1], z = v[2];
  let a00, a01, a02, a03;
  let a10, a11, a12, a13;
  let a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}

/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
  let x = v[0], y = v[1], z = v[2];

  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
  let x = axis[0], y = axis[1], z = axis[2];
  let len = Math.sqrt(x * x + y * y + z * z);
  let s, c, t;
  let a00, a01, a02, a03;
  let a10, a11, a12, a13;
  let a20, a21, a22, a23;
  let b00, b01, b02;
  let b10, b11, b12;
  let b20, b21, b22;

  if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]) { return null; }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

  // Construct the elements of the rotation matrix
  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

  // Perform rotation-specific matrix multiplication
  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) { // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  return out;
}

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a10 = a[4];
  let a11 = a[5];
  let a12 = a[6];
  let a13 = a[7];
  let a20 = a[8];
  let a21 = a[9];
  let a22 = a[10];
  let a23 = a[11];

  if (a !== out) { // If the source and destination differ, copy the unchanged rows
    out[0]  = a[0];
    out[1]  = a[1];
    out[2]  = a[2];
    out[3]  = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a00 = a[0];
  let a01 = a[1];
  let a02 = a[2];
  let a03 = a[3];
  let a20 = a[8];
  let a21 = a[9];
  let a22 = a[10];
  let a23 = a[11];

  if (a !== out) { // If the source and destination differ, copy the unchanged rows
    out[4]  = a[4];
    out[5]  = a[5];
    out[6]  = a[6];
    out[7]  = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a00 = a[0];
  let a01 = a[1];
  let a02 = a[2];
  let a03 = a[3];
  let a10 = a[4];
  let a11 = a[5];
  let a12 = a[6];
  let a13 = a[7];

  if (a !== out) { // If the source and destination differ, copy the unchanged last row
    out[8]  = a[8];
    out[9]  = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function fromRotation(out, rad, axis) {
  let x = axis[0], y = axis[1], z = axis[2];
  let len = Math.sqrt(x * x + y * y + z * z);
  let s, c, t;

  if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]) { return null; }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  // Perform rotation-specific matrix multiplication
  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromXRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = 1;
  out[1]  = 0;
  out[2]  = 0;
  out[3]  = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromYRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = c;
  out[1]  = 0;
  out[2]  = -s;
  out[3]  = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromZRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = c;
  out[1]  = s;
  out[2]  = 0;
  out[3]  = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;

  return out;
}

/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];

  return out;
}

/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getScaling(out, mat) {
  let m11 = mat[0];
  let m12 = mat[1];
  let m13 = mat[2];
  let m21 = mat[4];
  let m22 = mat[5];
  let m23 = mat[6];
  let m31 = mat[8];
  let m32 = mat[9];
  let m33 = mat[10];

  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);

  return out;
}

/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */
function getRotation(out, mat) {
  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
  let trace = mat[0] + mat[5] + mat[10];
  let S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (mat[6] - mat[9]) / S;
    out[1] = (mat[8] - mat[2]) / S;
    out[2] = (mat[1] - mat[4]) / S;
  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) {
    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
    out[3] = (mat[6] - mat[9]) / S;
    out[0] = 0.25 * S;
    out[1] = (mat[1] + mat[4]) / S;
    out[2] = (mat[8] + mat[2]) / S;
  } else if (mat[5] > mat[10]) {
    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
    out[3] = (mat[8] - mat[2]) / S;
    out[0] = (mat[1] + mat[4]) / S;
    out[1] = 0.25 * S;
    out[2] = (mat[6] + mat[9]) / S;
  } else {
    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
    out[3] = (mat[1] - mat[4]) / S;
    out[0] = (mat[8] + mat[2]) / S;
    out[1] = (mat[6] + mat[9]) / S;
    out[2] = 0.25 * S;
  }

  return out;
}

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;
  let sx = s[0];
  let sy = s[1];
  let sz = s[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;

  return out;
}

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  let sx = s[0];
  let sy = s[1];
  let sz = s[2];

  let ox = o[0];
  let oy = o[1];
  let oz = o[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;

  return out;
}

/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */
function fromQuat(out, q) {
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let yx = y * x2;
  let yy = y * y2;
  let zx = z * x2;
  let zy = z * y2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;

  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;

  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;

  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;

  return out;
}

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
  let rl = 1 / (right - left);
  let tb = 1 / (top - bottom);
  let nf = 1 / (near - far);
  out[0] = (near * 2) * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = (near * 2) * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = (far * near * 2) * nf;
  out[15] = 0;
  return out;
}

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
  let f = 1.0 / Math.tan(fovy / 2);
  let nf = 1 / (near - far);
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = (2 * far * near) * nf;
  out[15] = 0;
  return out;
}

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);
  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);
  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);
  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);
  let xScale = 2.0 / (leftTan + rightTan);
  let yScale = 2.0 / (upTan + downTan);

  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = ((upTan - downTan) * yScale * 0.5);
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = (far * near) / (near - far);
  out[15] = 0.0;
  return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
  let lr = 1 / (left - right);
  let bt = 1 / (bottom - top);
  let nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  let eyex = eye[0];
  let eyey = eye[1];
  let eyez = eye[2];
  let upx = up[0];
  let upy = up[1];
  let upz = up[2];
  let centerx = center[0];
  let centery = center[1];
  let centerz = center[2];

  if (Math.abs(eyex - centerx) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"] &&
      Math.abs(eyey - centery) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"] &&
      Math.abs(eyez - centerz) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]) {
    return mat4.identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;

  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;

  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;

  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;

  return out;
}

/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function targetTo(out, eye, target, up) {
  let eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];

  let z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];

  let len = z0*z0 + z1*z1 + z2*z2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  let x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
}

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
}

/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}

/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  out[6] = a[6] + (b[6] * scale);
  out[7] = a[7] + (b[7] * scale);
  out[8] = a[8] + (b[8] * scale);
  out[9] = a[9] + (b[9] * scale);
  out[10] = a[10] + (b[10] * scale);
  out[11] = a[11] + (b[11] * scale);
  out[12] = a[12] + (b[12] * scale);
  out[13] = a[13] + (b[13] * scale);
  out[14] = a[14] + (b[14] * scale);
  out[15] = a[15] + (b[15] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&
         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&
         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];
  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];
  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];
  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];

  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];
  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];
  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];
  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];

  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
          Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
          Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
          Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
          Math.abs(a9 - b9) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
          Math.abs(a10 - b10) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
          Math.abs(a11 - b11) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
          Math.abs(a12 - b12) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
          Math.abs(a13 - b13) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
          Math.abs(a14 - b14) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
          Math.abs(a15 - b15) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a15), Math.abs(b15)));
}

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link mat4.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;



/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["setAxisAngle"] = setAxisAngle;
/* harmony export (immutable) */ __webpack_exports__["getAxisAngle"] = getAxisAngle;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["calculateW"] = calculateW;
/* harmony export (immutable) */ __webpack_exports__["slerp"] = slerp;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["conjugate"] = conjugate;
/* harmony export (immutable) */ __webpack_exports__["fromMat3"] = fromMat3;
/* harmony export (immutable) */ __webpack_exports__["fromEuler"] = fromEuler;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mat3__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec3__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vec4__ = __webpack_require__(49);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */






/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  let s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}

/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */
function getAxisAngle(out_axis, q) {
  let rad = Math.acos(q[3]) * 2.0;
  let s = Math.sin(rad / 2.0);
  if (s != 0.0) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }
  return rad;
}

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
function multiply(out, a, b) {
  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = b[0], by = b[1], bz = b[2], bw = b[3];

  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateX(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateY(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let by = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateZ(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bz = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
function calculateW(out, a) {
  let x = a[0], y = a[1], z = a[2];

  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = b[0], by = b[1], bz = b[2], bw = b[3];

  let omega, cosom, sinom, scale0, scale1;

  // calc cosine
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  // adjust signs (if necessary)
  if ( cosom < 0.0 ) {
    cosom = -cosom;
    bx = - bx;
    by = - by;
    bz = - bz;
    bw = - bw;
  }
  // calculate coefficients
  if ( (1.0 - cosom) > 0.000001 ) {
    // standard case (slerp)
    omega  = Math.acos(cosom);
    sinom  = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  }
  // calculate final values
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;

  return out;
}

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
function invert(out, a) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;
  let invDot = dot ? 1.0/dot : 0;

  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0*invDot;
  out[1] = -a1*invDot;
  out[2] = -a2*invDot;
  out[3] = a3*invDot;
  return out;
}

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  let fTrace = m[0] + m[4] + m[8];
  let fRoot;

  if ( fTrace > 0.0 ) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0);  // 2w
    out[3] = 0.5 * fRoot;
    fRoot = 0.5/fRoot;  // 1/(4w)
    out[0] = (m[5]-m[7])*fRoot;
    out[1] = (m[6]-m[2])*fRoot;
    out[2] = (m[1]-m[3])*fRoot;
  } else {
    // |w| <= 1/2
    let i = 0;
    if ( m[4] > m[0] )
      i = 1;
    if ( m[8] > m[i*3+i] )
      i = 2;
    let j = (i+1)%3;
    let k = (i+2)%3;

    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
  }

  return out;
}

/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */
function fromEuler(out, x, y, z) {
    let halfToRad = 0.5 * Math.PI / 180.0;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;

    let sx = Math.sin(x);
    let cx = Math.cos(x);
    let sy = Math.sin(y);
    let cy = Math.cos(y);
    let sz = Math.sin(z);
    let cz = Math.cos(z);

    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;

    return out;
}

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
const clone = __WEBPACK_IMPORTED_MODULE_3__vec4__["clone"];
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;


/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
const fromValues = __WEBPACK_IMPORTED_MODULE_3__vec4__["fromValues"];
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;


/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
const copy = __WEBPACK_IMPORTED_MODULE_3__vec4__["copy"];
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;


/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
const set = __WEBPACK_IMPORTED_MODULE_3__vec4__["set"];
/* harmony export (immutable) */ __webpack_exports__["set"] = set;


/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
const add = __WEBPACK_IMPORTED_MODULE_3__vec4__["add"];
/* harmony export (immutable) */ __webpack_exports__["add"] = add;


/**
 * Alias for {@link quat.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
const scale = __WEBPACK_IMPORTED_MODULE_3__vec4__["scale"];
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;


/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
const dot = __WEBPACK_IMPORTED_MODULE_3__vec4__["dot"];
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;


/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
const lerp = __WEBPACK_IMPORTED_MODULE_3__vec4__["lerp"];
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;


/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */
const length = __WEBPACK_IMPORTED_MODULE_3__vec4__["length"];
/* harmony export (immutable) */ __webpack_exports__["length"] = length;


/**
 * Alias for {@link quat.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
const squaredLength = __WEBPACK_IMPORTED_MODULE_3__vec4__["squaredLength"];
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;


/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
const normalize = __WEBPACK_IMPORTED_MODULE_3__vec4__["normalize"];
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;


/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
const exactEquals = __WEBPACK_IMPORTED_MODULE_3__vec4__["exactEquals"];
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;


/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
const equals = __WEBPACK_IMPORTED_MODULE_3__vec4__["equals"];
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;


/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
const rotationTo = (function() {
  let tmpvec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["create"]();
  let xUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["fromValues"](1,0,0);
  let yUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["fromValues"](0,1,0);

  return function(out, a, b) {
    let dot = __WEBPACK_IMPORTED_MODULE_2__vec3__["dot"](a, b);
    if (dot < -0.999999) {
      __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, xUnitVec3, a);
      if (__WEBPACK_IMPORTED_MODULE_2__vec3__["len"](tmpvec3) < 0.000001)
        __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, yUnitVec3, a);
      __WEBPACK_IMPORTED_MODULE_2__vec3__["normalize"](tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
})();
/* harmony export (immutable) */ __webpack_exports__["rotationTo"] = rotationTo;


/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
const sqlerp = (function () {
  let temp1 = create();
  let temp2 = create();

  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));

    return out;
  };
}());
/* harmony export (immutable) */ __webpack_exports__["sqlerp"] = sqlerp;


/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
const setAxes = (function() {
  let matr = __WEBPACK_IMPORTED_MODULE_1__mat3__["create"]();

  return function(out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];

    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];

    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];

    return normalize(out, fromMat3(out, matr));
  };
})();
/* harmony export (immutable) */ __webpack_exports__["setAxes"] = setAxes;



/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["divide"] = divide;
/* harmony export (immutable) */ __webpack_exports__["ceil"] = ceil;
/* harmony export (immutable) */ __webpack_exports__["floor"] = floor;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
/* harmony export (immutable) */ __webpack_exports__["distance"] = distance;
/* harmony export (immutable) */ __webpack_exports__["squaredDistance"] = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["negate"] = negate;
/* harmony export (immutable) */ __webpack_exports__["inverse"] = inverse;
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;
/* harmony export (immutable) */ __webpack_exports__["cross"] = cross;
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["transformMat2"] = transformMat2;
/* harmony export (immutable) */ __webpack_exports__["transformMat2d"] = transformMat2d;
/* harmony export (immutable) */ __webpack_exports__["transformMat3"] = transformMat3;
/* harmony export (immutable) */ __webpack_exports__["transformMat4"] = transformMat4;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(1);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](2);
  out[0] = 0;
  out[1] = 0;
  return out;
}

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
function fromValues(x, y) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](2);
  out[0] = x;
  out[1] = y;
  return out;
}

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
};

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
};

/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
};

/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
};

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
};

/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */
function round (out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  var x = b[0] - a[0],
    y = b[1] - a[1];
  return Math.sqrt(x*x + y*y);
};

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  var x = b[0] - a[0],
    y = b[1] - a[1];
  return x*x + y*y;
};

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  var x = a[0],
    y = a[1];
  return Math.sqrt(x*x + y*y);
};

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength (a) {
  var x = a[0],
    y = a[1];
  return x*x + y*y;
};

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
function normalize(out, a) {
  var x = a[0],
    y = a[1];
  var len = x*x + y*y;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
  }
  return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
function lerp(out, a, b, t) {
  var ax = a[0],
    ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
function random(out, scale) {
  scale = scale || 1.0;
  var r = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2d(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat3(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat4(out, a, m) {
  let x = a[0];
  let y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec2(' + a[0] + ', ' + a[1] + ')';
}

/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1];
  let b0 = b[0], b1 = b[1];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)));
}

/**
 * Alias for {@link vec2.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Alias for {@link vec2.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;


/**
 * Alias for {@link vec2.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link vec2.divide}
 * @function
 */
const div = divide;
/* harmony export (immutable) */ __webpack_exports__["div"] = div;


/**
 * Alias for {@link vec2.distance}
 * @function
 */
const dist = distance;
/* harmony export (immutable) */ __webpack_exports__["dist"] = dist;


/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["sqrDist"] = sqrDist;


/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 2;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1];
    }

    return a;
  };
})();
/* harmony export (immutable) */ __webpack_exports__["forEach"] = forEach;



/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _shader_variable = __webpack_require__(4);

var _shader_variable2 = _interopRequireDefault(_shader_variable);

var _shader_variable_group = __webpack_require__(10);

var _shader_variable_group2 = _interopRequireDefault(_shader_variable_group);

var _destroy2 = __webpack_require__(0);

var _destroy3 = _interopRequireDefault(_destroy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A ShaderContext keeps named references to all shader _variables_
 * to make them available for shader _programs_.
 * Each named reference is organized as a _stack_ where you can push
 * or pop shader variable _values_.
 */
var ShaderContext = function () {
  function ShaderContext() {
    _classCallCheck(this, ShaderContext);

    this.uniform = new Map();
    this.attrib = new Map();
    this.tex2d = new Map();
  }

  ShaderContext.prototype.clear = function clear() {
    this.uniform.clear();
    this.attrib.clear();
    this.tex2d.clear();
  };

  ShaderContext.prototype.destroy = function destroy() {
    this.clear();
    (0, _destroy3.default)(this);
  };

  /**
   * @param {ShaderVariable|ShaderVariableGroup} shaderVariable
   */


  ShaderContext.prototype.pushVar = function pushVar(shaderVariable) {
    if (shaderVariable instanceof _shader_variable_group2.default) {
      shaderVariable.pushVar(this);
    } else {
      var lane = shaderVarLane(this, shaderVariable.type, shaderVariable.name);
      lane.push(shaderVariable);
    }
  };

  /**
   * Remove current shader variable plus all later set variables from named shader variable stack.
   * @param {ShaderVariable|ShaderVariableGroup} shaderVariable
   */


  ShaderContext.prototype.popVar = function popVar(shaderVariable) {
    if (shaderVariable instanceof _shader_variable_group2.default) {
      shaderVariable.popVar(this);
    } else {
      var lane = shaderVarLane(this, shaderVariable.type, shaderVariable.name);
      var len = lane.length;
      for (var i = 0; i < len; ++i) {
        if (lane[i] === shaderVariable) {
          lane.length = i;
          return;
        }
      }
    }
  };

  /**
   * Return current shader variable by name and type.
   * @param {ShaderVariable} shaderVariable
   * @return {ShaderVariable} or `null`
   */


  ShaderContext.prototype.curVar = function curVar(shaderVariable) {
    var lane = shaderVarMap(this, shaderVariable.type).get(shaderVariable.name);
    return lane && lane.length ? lane[lane.length - 1] : null;
  };

  /**
   * Return current _uniform_ shader variable by name.
   * @param {string} name
   * @return {ShaderUniformVariable} or `null`
   */


  ShaderContext.prototype.curUniform = function curUniform(name) {
    var lane = this.uniform.get(name);
    return lane && lane.length ? lane[lane.length - 1] : null;
  };

  /**
   * Return current _attribute_ shader variable by name.
   * @param {string} name
   * @return {ShaderAttribVariable} or `null`
   */


  ShaderContext.prototype.curAttrib = function curAttrib(name) {
    var lane = this.attrib.get(name);
    return lane && lane.length ? lane[lane.length - 1] : null;
  };

  /**
   * Return current _texture2d_ shader variable by name.
   * @param {string} name
   * @return {ShaderTexture2dVariable} or `null`
   */


  ShaderContext.prototype.curTex2d = function curTex2d(name) {
    var lane = this.tex2d.get(name);
    return lane && lane.length ? lane[lane.length - 1] : null;
  };

  return ShaderContext;
}();

exports.default = ShaderContext;


function shaderVarMap(shaderContext, type) {
  switch (type) {
    case _shader_variable2.default.TYPE.UNIFORM:
      return shaderContext.uniform;
    case _shader_variable2.default.TYPE.ATTRIB:
      return shaderContext.attrib;
    case _shader_variable2.default.TYPE.TEXTURE_2D:
      return shaderContext.tex2d;
  }
}

function shaderVarLane(shaderContext, type, name) {
  var map = shaderVarMap(shaderContext, type);
  var lane = map.get(name);

  if (!lane) {
    lane = [];
    map.set(name, lane);
  }

  return lane;
}

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _element_index_array = __webpack_require__(44);

var _element_index_array2 = _interopRequireDefault(_element_index_array);

var _shader_program = __webpack_require__(54);

var _shader_program2 = _interopRequireDefault(_shader_program);

var _shader_texture_group = __webpack_require__(55);

var _shader_texture_group2 = _interopRequireDefault(_shader_texture_group);

var _shader_variable_buffer_group = __webpack_require__(57);

var _shader_variable_buffer_group2 = _interopRequireDefault(_shader_variable_buffer_group);

var _v_o_pool = __webpack_require__(42);

var _v_o_pool2 = _interopRequireDefault(_v_o_pool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var pick = __webpack_require__(121);

var getVO = function getVO(descriptor, opt) {
  if (typeof opt === 'function') {
    var vo = descriptor.createVO();
    opt(vo);
    return vo;
  }
  return opt;
};

var SpriteGroup = function () {
  function SpriteGroup(resourceLibrary, textureLibrary, options) {
    _classCallCheck(this, SpriteGroup);

    this.resourceLibrary = resourceLibrary;
    this.textureLibrary = textureLibrary;
    this.descriptor = resourceLibrary.findDescriptor(options.descriptor);
    this.voPool = new _v_o_pool2.default(this.descriptor, Object.assign(pick(options, ['capacity', 'usage', 'maxAllocVOSize', 'voArray']), {
      voNew: getVO(this.descriptor, options.voNew),
      voZero: getVO(this.descriptor, options.voZero)
    }));
    this.voPoolShaderAttribs = new _shader_variable_buffer_group2.default(this.voPool);
    this.indices = options.indices || _element_index_array2.default.Generate(this.voPool.capacity, [0, 1, 2, 0, 2, 3], 4 // quads
    // TODO create ElementIndexArray factories! capacity=N, type=quads, ...
    );
    this.shaderProgram = new _shader_program2.default(resourceLibrary.findVertexShader(options.vertexShader), resourceLibrary.findFragmentShader(options.fragmentShader));
    this.primitive = options.primitive;
    this.textures = Object.assign({}, options.textures);
    this.shaderTextureGroup = null;
  }

  SpriteGroup.prototype.setTexture = function setTexture(sampler, textureId) {
    if (this.textures[sampler] !== textureId) {
      this.textures[sampler] = textureId;
      this.shaderTextureGroup = null;
    }
  };

  SpriteGroup.prototype.loadTextureAtlas = function loadTextureAtlas(sampler, url) {
    this.textures[sampler] = url;
    this.shaderTextureGroup = null;
    return this.textureLibrary.loadTextureAtlas(url);
  };

  SpriteGroup.prototype.getTextureAtlas = function getTextureAtlas(sampler) {
    return this.textureLibrary.getTextureAtlas(this.textures[sampler]);
  };

  SpriteGroup.prototype.createSprite = function createSprite(texture, width, height) {
    var vo = this.voPool.alloc(1);
    if (texture != null) {
      var w = width || texture.width;
      var h = height || texture.height;
      vo.setSize(w, h);
      vo.setTexCoordsByTexture(texture);
    }
    return vo;
  };

  SpriteGroup.prototype.renderFrame = function renderFrame(renderer) {
    var _this = this;

    if (this.shaderTextureGroup == null) {
      this.shaderTextureGroup = new _shader_texture_group2.default(this.textureLibrary, this.textures);
    }
    this.shaderTextureGroup.whenLoaded(function (texUniforms) {
      var shaderContext = renderer.shaderContext;


      shaderContext.pushVar(texUniforms);
      shaderContext.pushVar(_this.voPoolShaderAttribs);

      renderer.useShaderProgram(_this.shaderProgram);

      renderer.drawIndexed(_this.primitive, _this.indices);
    });
  };

  _createClass(SpriteGroup, [{
    key: 'capacity',
    get: function get() {
      return this.voPool.capacity;
    }
  }, {
    key: 'usedCount',
    get: function get() {
      return this.voPool.usedCount;
    }
  }, {
    key: 'availableCount',
    get: function get() {
      return this.voPool.availableCount;
    }
  }]);

  return SpriteGroup;
}();

exports.default = SpriteGroup;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var basePick = __webpack_require__(122),
    flatRest = __webpack_require__(163);

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var basePickBy = __webpack_require__(123),
    hasIn = __webpack_require__(158);

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(124),
    baseSet = __webpack_require__(155),
    castPath = __webpack_require__(11);

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

module.exports = basePickBy;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(11),
    toKey = __webpack_require__(29);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(3),
    isSymbol = __webpack_require__(22);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(127);

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(128);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(129);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(130),
    mapCacheDelete = __webpack_require__(150),
    mapCacheGet = __webpack_require__(152),
    mapCacheHas = __webpack_require__(153),
    mapCacheSet = __webpack_require__(154);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(131),
    ListCache = __webpack_require__(143),
    Map = __webpack_require__(149);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(132),
    hashDelete = __webpack_require__(139),
    hashGet = __webpack_require__(140),
    hashHas = __webpack_require__(141),
    hashSet = __webpack_require__(142);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(12);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(134),
    isMasked = __webpack_require__(135),
    isObject = __webpack_require__(28),
    toSource = __webpack_require__(137);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(23),
    isObject = __webpack_require__(28);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(136);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(21);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),
/* 137 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),
/* 138 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),
/* 139 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(12);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(12);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(12);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(144),
    listCacheDelete = __webpack_require__(145),
    listCacheGet = __webpack_require__(146),
    listCacheHas = __webpack_require__(147),
    listCacheSet = __webpack_require__(148);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),
/* 144 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(13);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(13);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(13);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(13);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(27),
    root = __webpack_require__(21);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(14);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),
/* 151 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(14);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(14);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(14);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(156),
    castPath = __webpack_require__(11),
    isIndex = __webpack_require__(60),
    isObject = __webpack_require__(28),
    toKey = __webpack_require__(29);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(157),
    eq = __webpack_require__(58);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(59);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(159),
    hasPath = __webpack_require__(160);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),
/* 159 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(11),
    isArguments = __webpack_require__(61),
    isArray = __webpack_require__(3),
    isIndex = __webpack_require__(60),
    isLength = __webpack_require__(162),
    toKey = __webpack_require__(29);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(23),
    isObjectLike = __webpack_require__(24);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),
/* 162 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var flatten = __webpack_require__(164),
    overRest = __webpack_require__(168),
    setToString = __webpack_require__(170);

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(165);

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(166),
    isFlattenable = __webpack_require__(167);

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;


/***/ }),
/* 166 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(9),
    isArguments = __webpack_require__(61),
    isArray = __webpack_require__(3);

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(169);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),
/* 169 */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__(171),
    shortOut = __webpack_require__(174);

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__(172),
    defineProperty = __webpack_require__(59),
    identity = __webpack_require__(173);

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),
/* 172 */
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),
/* 173 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 174 */
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _aabb = __webpack_require__(43);

var _aabb2 = _interopRequireDefault(_aabb);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var posNum = function posNum(num) {
  return num < 0 ? 0 : num;
};

var Viewport = function (_AABB) {
  _inherits(Viewport, _AABB);

  /**
   * @param {number} x - x
   * @param {number} y - y
   * @param {number} width - width
   * @param {number} height - height
   */
  function Viewport(x, y, width, height) {
    _classCallCheck(this, Viewport);

    var minX = parseInt(x, 10);
    var minY = parseInt(y, 10);

    return _possibleConstructorReturn(this, _AABB.call(this, minX, posNum(minX + parseInt(width, 10) - 1), minY, posNum(minY + parseInt(height, 10) - 1)));
  }

  /**
   * @type {number}
   */


  _createClass(Viewport, [{
    key: 'x',
    get: function get() {
      return this.minX;
    }

    /**
     * @param {number} x
     * @type {number}
     */
    ,
    set: function set(x) {
      var w = this.width;

      /**
       * @type {number}
       */
      this.minX = x;
      /**
       * @type {number}
       */
      this.maxX = posNum(x + w - 1);
    }

    /**
     * @type {number}
     */

  }, {
    key: 'y',
    get: function get() {
      return this.minY;
    }

    /**
     * @param {number} y
     * @type {number}
     */
    ,
    set: function set(y) {
      var h = this.height;

      /**
       * @type {number}
       */
      this.minY = y;
      /**
       * @type {number}
       */
      this.maxY = posNum(y + h - 1);
    }

    /**
     * @type {number}
     */

  }, {
    key: 'width',
    get: function get() {
      return posNum(this.maxX - this.minX + 1);
    }

    /**
     * @param {number} y
     * @type {number}
     */
    ,
    set: function set(w) {
      /**
       * @type {number}
       */
      this.maxX = posNum(this.minX + w - 1);
    }

    /**
     * @type {number}
     */

  }, {
    key: 'height',
    get: function get() {
      return posNum(this.maxY - this.minY + 1);
    }

    /**
     * @param {number} y
     * @type {number}
     */
    ,
    set: function set(h) {
      /**
       * @type {number}
       */
      this.maxY = posNum(this.minY + h - 1);
    }
  }]);

  return Viewport;
}(_aabb2.default);

exports.default = Viewport;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tinycolor = __webpack_require__(16);

var makeClearMask = function makeClearMask(clearBuffer) {
  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var stencil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var gl = clearBuffer.glx.gl;

  var mask = color ? gl.COLOR_BUFFER_BIT : 0;
  if (depth && clearBuffer.hasDepthBits) mask = mask | gl.DEPTH_BUFFER_BIT;
  if (depth && clearBuffer.hasStencilBits) mask = mask | gl.STENCIL_BUFFER_BIT;
  return mask;
};

var ClearBuffer = function () {
  function ClearBuffer(glx) {
    _classCallCheck(this, ClearBuffer);

    this.glx = glx;

    this.hasDepthBits = glx.DEPTH_BUFFER_BIT > 0;
    this.hasStencilBits = glx.STENCIL_BUFFER_BIT > 0;

    this.reset();
  }

  ClearBuffer.prototype.reset = function reset() {
    this.clearColor = null;
    this.clearDepth = 1;
    this.clearStencil = 0;
    this.clearMask = 0;
  };

  /**
   * Set the framebuffer clear color.
   * Use the *tinycolor* library for css color conversion.
   *
   * @param {string|object} col - css color definition (or _tinycolor2_ object)
   */


  ClearBuffer.prototype.setClearColor = function setClearColor(col) {
    this.clearColor = col ? typeof col === 'string' ? tinycolor(col) : col : null;
  };

  ClearBuffer.prototype.setClearMask = function setClearMask(color, depth, stencil) {
    this.clearMask = makeClearMask(this, color, depth, stencil);
  };

  ClearBuffer.prototype.clear = function clear() {
    var gl = this.glx.gl;
    var clearColor = this.clearColor;

    if (clearColor) {
      var col = clearColor.toRgb();
      gl.clearColor(col.r / 255, col.g / 255, col.b / 255, col.a);
    } else {
      gl.clearColor(0, 0, 0, 0);
    }

    if (this.hasDepthBits) gl.clearDepth(this.clearDepth);
    if (this.hasStencilBits) gl.clearStencil(this.clearStencil);

    var mask = this.clearMask || makeClearMask(this, true, true, true);
    gl.clear(mask);
  };

  return ClearBuffer;
}();

exports.default = ClearBuffer;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
/* eslint-env browser */
var reNumber = /^[-+]?(\d+\.|\.)?\d+(e\d+|e[-+]\d+)?$/;
var reUrl = /^url\(\s*([^)]+)\)$/;
var reVec2 = /^vec2\(\s*([-+\d.e]+)\s*,\s*([-+\d.e]+)\s*\)$/;
var reVec3 = /^vec3\(\s*([-+\d.e]+)\s*,\s*([-+\d.e]+)\s*,\s*([-+\d.e]+)\s*\)$/;
var reVec4 = /^vec4\(\s*([-+\d.e]+)\s*,\s*([-+\d.e]+)\s*,\s*([-+\d.e]+)\s*,\s*([-+\d.e]+)\s*\)$/;
var reFunc = /^\s*[a-zA-Z]+\(\s*[^)]+\)\s*$/;

// parseValue(str) expects a trimmed string!
//
// special transform rules:
//
//   (string)   => (type)
//   ---------------------
//   '...'      => string: ...
//   "..."      => string: ...
//   123        => number
//   123.456    => number
//   null       => object: null
//   undefined  => undefined
//   true       => boolean: true
//   false      => boolean: false
//   {...}      => JSON.parse(...)
//   [...]      => JSON.parse(...)
//   url(...)   => new URL(...)
//   vec2(<number>, <number>) => new Float32Array([number, number])
//   vec3(<number>, <number>, <number>) => new Float32Array([number, number, number])
//   vec4(<number>, <number>, <number>, <number>) => new Float32Array([...])
//
function parseValue(value) {
  var len = value.length;
  if (len >= 2 && value.startsWith('"') && value.endsWith('"')) {
    return value.substr(1, value.length - 2);
  } else if (len >= 2 && value.startsWith('{') && value.endsWith('}')) {
    return JSON.parse(value);
  } else if (len >= 2 && value.startsWith('[') && value.endsWith(']')) {
    return JSON.parse(value);
  } else if (len >= 2 && value.startsWith('\'') && value.endsWith('\'')) {
    return value.substr(1, value.length - 2);
  } else if (len > 0 && reNumber.exec(value)) {
    return parseFloat(value);
  }

  var m = reUrl.exec(value);
  if (m) return new URL(m[1].trim());

  m = reVec2.exec(value);
  if (m) return new Float32Array(m.slice(1, 3).map(parseFloat));

  m = reVec3.exec(value);
  if (m) return new Float32Array(m.slice(1, 4).map(parseFloat));

  m = reVec4.exec(value);
  if (m) return new Float32Array(m.slice(1, 5).map(parseFloat));

  switch (value) {
    case 'null':
      return null;
    case 'undefined':
      return undefined;
    case 'true':
      return true;
    case 'false':
      return false;
    default:
      return value;
  }
}

function indexOfNextNonWhitespace(str, curIdx) {
  var len = str.length;
  var i = curIdx;
  if (i >= len) return len;
  do {
    if (str[i] === ' ' || str[i] === '\t') {
      ++i;
    } else {
      return i;
    }
  } while (i < len);
  return len;
}

function indexOfNextSeperator(str, curIdx) {
  var seperator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ';';

  var len = str.length;
  var i = curIdx;
  var isInside = null;
  do {
    if (isInside === null) {
      switch (str[i]) {
        case seperator:
          return i;
        case '\'':
          isInside = '\'';
          ++i;
          break;
        case '"':
          isInside = '"';
          ++i;
          break;
        case '(':
          isInside = ')';
          ++i;
          break;
        case '{':
          isInside = '}';
          ++i;
          break;
        case '\\':
          i += 2;
          break;
        default:
          ++i;
      }
    } else {
      if (str[i] === isInside) {
        isInside = null;
        ++i;
      } else if (str[i] === '\\') {
        i += 2;
      } else {
        ++i;
      }
    }
  } while (i < len);
  return len;
}

function splitIntoPropTokens(str) {
  if (typeof str !== 'string' || !str) return;

  var propTokens = [];
  var len = str.length;

  var i = indexOfNextNonWhitespace(str, 0);
  do {
    var to = indexOfNextSeperator(str, i, ';');
    if (to > i) {
      propTokens.push(str.slice(i, to));
    }
    i = indexOfNextNonWhitespace(str, to + 1);
  } while (i < len);

  return propTokens;
}

function splitIntoProps(str) {
  var tokens = splitIntoPropTokens(str);
  if (!tokens) return;
  return tokens.map(function (tok) {
    if (reFunc.exec(tok)) {
      return { value: tok.trim() };
    }
    var colon = tok.indexOf(':');
    if (colon === -1) {
      return { value: tok.trim() };
    }
    var key = tok.slice(0, colon).trim();
    var value = tok.substr(colon + 1).trim();
    return {
      key: key,
      value: value
    };
  }).filter(function (prop) {
    return !(prop.key === '' && prop.value === '');
  });
}

function parseCssStyledProperties(data) {
  if (typeof data !== 'string') return data;

  // => json
  var str = data.trim();
  if (str.startsWith('{') && str.endsWith('}')) {
    return JSON.parse(str);
  }

  var props = splitIntoProps(str);

  // => undefined
  if (!props || props.length === 0) return;

  if ('key' in props[0]) {
    // => properties
    var map = {};
    props.forEach(function (_ref) {
      var key = _ref.key,
          value = _ref.value;

      map[key] = parseValue(value);
    });
    return map;
  } else {
    // => array of values OR single value
    var values = props.map(function (_ref2) {
      var value = _ref2.value;
      return parseValue(value);
    });
    return values.length === 1 ? values[0] : values;
  }
}

exports.default = parseCssStyledProperties;
exports.splitIntoPropTokens = splitIntoPropTokens;
exports.splitIntoProps = splitIntoProps;
exports.indexOfNextNonWhitespace = indexOfNextNonWhitespace;
exports.indexOfNextSeperator = indexOfNextSeperator;
exports.parseValue = parseValue;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (options, key, defaultValueFn) {
  if (options && key in options) {
    return options[key];
  }
  return typeof defaultValueFn === 'function' ? defaultValueFn() : defaultValueFn;
};

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tinycolor = __webpack_require__(16);

var parseColor = function parseColor(colStr) {
  return colStr ? tinycolor(colStr) : null;
};

var ClearColorComponent = function () {
  function ClearColorComponent(entity, colStr) {
    _classCallCheck(this, ClearColorComponent);

    this.color = parseColor(colStr);
  }

  ClearColorComponent.prototype.update = function update(colStr) {
    this.color = parseColor(colStr);
  };

  return ClearColorComponent;
}();

exports.default = ClearColorComponent;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(32);

var _constants = __webpack_require__(17);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tinycolor = __webpack_require__(16);

var DEFAULT_COLOR = 'rgba(0,0,0,0)';
var DEFAULT_DEPTH = 1;
var DEFAULT_STENCIL = 0;
var DEFAULT_MASK = 'COLOR,DEPTH,STENCIL';

var parseColor = function parseColor(colStr) {
  return colStr ? tinycolor(colStr) : null;
};

var parseMask = function parseMask(str) {
  return {
    color: str.indexOf('COLOR') > -1,
    depth: str.indexOf('DEPTH') > -1,
    stencil: str.indexOf('STENCIL') > -1
  };
};

var parseConfig = function parseConfig(props) {
  if (!props || typeof props === 'string') {
    return {
      clearColor: parseColor(props || DEFAULT_COLOR),
      clearDepth: DEFAULT_DEPTH,
      clearStencil: DEFAULT_STENCIL,
      mask: parseMask(DEFAULT_MASK)
    };
  }

  var option = _utils.getDefaultOption.bind(null, props);
  return {
    clearColor: parseColor(option('color', DEFAULT_COLOR)),
    clearDepth: option('depth', DEFAULT_DEPTH),
    clearStencil: option('stencil', DEFAULT_STENCIL),
    mask: parseMask(option('mask', DEFAULT_MASK))
  };
};

var ClearComponent = function () {
  function ClearComponent(entity, config) {
    _classCallCheck(this, ClearComponent);

    Object.assign(this, parseConfig(config));
    console.log('[ClearComponent] created', this);
  }

  ClearComponent.prototype.update = function update(config) {
    Object.assign(this, parseConfig(config));
    console.log('[ClearComponent] updated', this);
  };

  ClearComponent.prototype.connectedEntity = function connectedEntity(entity) {
    this.renderFrameListener = entity.on('renderFrame', _constants.COMP_PRIO_CLEAR, this.renderFrame.bind(this));
    console.log('[ClearComponent] connected', this);
  };

  ClearComponent.prototype.disconnectedEntity = function disconnectedEntity(entity) {
    if (this.renderFrameListener) entity.off(this.renderFrameListener);
    console.log('[ClearComponent] disconnected', this);
  };

  ClearComponent.prototype.renderFrame = function renderFrame(renderer) {
    var clearBuffer = renderer.clearBuffer;


    clearBuffer.clearDepth = this.clearDepth;
    clearBuffer.clearStencil = this.clearStencil;

    clearBuffer.setClearColor(this.clearColor);

    var _mask = this.mask,
        color = _mask.color,
        depth = _mask.depth,
        stencil = _mask.stencil;

    clearBuffer.setClearMask(color, depth, stencil);

    clearBuffer.clear();
  };

  return ClearComponent;
}();

exports.default = ClearComponent;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (spriteLibrary) {
  spriteLibrary.addDescriptor(SIMPLE, simple.description).addVertexShader(SIMPLE, simple.vertexShader).addFragmentShader(SIMPLE, simple.fragmentShader);
};

var _simple = __webpack_require__(182);

var simple = _interopRequireWildcard(_simple);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var SIMPLE = 'simple';

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.description = exports.fragmentShader = exports.vertexShader = undefined;

var _rotate = __webpack_require__(183);

var _rotate2 = _interopRequireDefault(_rotate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var vertexShader = exports.vertexShader = ['\n\n  attribute vec2 pos2d;\n  attribute float posZ;\n  attribute vec2 uv;\n  attribute vec2 translate;\n  attribute float rotate;\n  attribute float scale;\n  attribute float opacity;\n\n  uniform mat4 viewMatrix;\n\n  varying vec4 vTextureCoordScaleOpacity;\n\n  ', (0, _rotate2.default)('rotateZ', 0.0, 0.0, 1.0), '\n\n  void main(void)\n  {\n    mat4 rotationMatrix = rotateZ(rotate);\n    gl_Position = viewMatrix * ((rotationMatrix * (vec4(scale, scale, scale, 1.0) * vec4(pos2d.xy, posZ, 1.0))) + vec4(translate.xy, 0.0, 0.0));\n    vTextureCoordScaleOpacity = vec4(uv.xy, opacity, 0.0);\n  }\n'];

var fragmentShader = exports.fragmentShader = '\n\n  precision mediump float;\n\n  varying vec4 vTextureCoordScaleOpacity;\n  uniform sampler2D tex;\n\n  void main(void) {\n    gl_FragColor = vTextureCoordScaleOpacity.z * texture2D(tex, vec2(vTextureCoordScaleOpacity.s, vTextureCoordScaleOpacity.t));\n  }\n\n';

var description = exports.description = {
  vertexCount: 4,

  // +-+-+-+-+ +-+-+-+-+ +-+-+
  // |0|1|2|3| |4|5|6|7| |8|9|
  // +-+-+-+-+ +-+-+-+-+ +-+-+
  //
  // |o-o-o|                       (3) position: x,y,z
  //       |o|                     (1) rotate
  //           |o-o|               (2) tex-coords: s, t
  //               |o-o|           (3) translate: tx, ty
  //                     |o|       (1) scale
  //                       |o|     (1) opacity
  //

  attributes: [{ name: 'position', type: 'float32', size: 3, attrNames: ['x', 'y', 'z'] }, { name: 'rotate', type: 'float32', size: 1, uniform: true }, { name: 'texCoords', type: 'float32', size: 2, attrNames: ['s', 't'] }, { name: 'translate', type: 'float32', size: 2, attrNames: ['tx', 'ty'], uniform: true }, { name: 'scale', type: 'float32', size: 1, uniform: true }, { name: 'opacity', type: 'float32', size: 1, uniform: true }],

  aliases: {
    pos2d: { size: 2, type: 'float32', offset: 0 },
    posZ: { size: 1, type: 'float32', offset: 2, uniform: true },
    uv: 'texCoords'
  },

  proto: {
    /**
     * @param {Viewport} viewport
     * @param {number} textureWidth
     * @param {number} textureHeight
     * @param {number} [repeat] - texture repeat factor
     */
    setTexCoordsByViewport: function setTexCoordsByViewport(viewport, textureWidth, textureHeight, repeat) {
      var x0 = viewport.x === 0 ? 0 : viewport.x / textureWidth;
      var x1 = (viewport.x + viewport.width) / textureWidth;
      var y0 = 1 - (viewport.y + viewport.height) / textureHeight;
      var y1 = viewport.y === 0 ? 1 : 1 - viewport.y / textureHeight;

      if (repeat !== undefined) {
        x0 *= repeat;
        x1 *= repeat;
        y0 *= repeat;
        y1 *= repeat;
      }

      this.setTexCoords(x0, y0, x1, y0, x1, y1, x0, y1);
    },


    /**
     * @param {Texture} texture
     */
    setTexCoordsByTexture: function setTexCoordsByTexture(texture) {
      var x0 = texture.minS;
      var y0 = texture.minT;
      var x1 = texture.maxS;
      var y1 = texture.maxT;

      this.setTexCoords(x0, y0, x1, y0, x1, y1, x0, y1);
    },


    /**
     * @param {number} width
     * @param {number} height
     */
    setSize: function setSize(width, height) {
      var halfWidth = width * 0.5;
      var halfHeight = (height == null ? width : height) * 0.5;

      this.setPos2d(-halfWidth, halfHeight, halfWidth, halfHeight, halfWidth, -halfHeight, -halfWidth, -halfHeight);
    },


    get width() {
      return this.x1 - this.x3;
    },

    get height() {
      return this.y0 - this.y2;
    },

    get rotateDegree() {
      return this.rotate * 180.0 / Math.PI;
    },

    set rotateDegree(degree) {
      this.rotate = degree * (Math.PI / 180.0);
    },

    get z() {
      return this.z0;
    },

    set z(z) {
      this.z0 = z;
      this.z1 = z;
      this.z2 = z;
      this.z3 = z;
    }
  }
};

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function () {
  var funcName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rotate';
  var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;
  var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;
  var z = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;

  return ['mat4 ' + funcName + '(float angle) {', 'float s = sin(angle);', 'float c = cos(angle);', 'float oc = 1.0 - c;', (0, _ret2.default)((0, _mat2.default)((0, _add2.default)((0, _mul2.default)('oc', x * x), 'c'), (0, _sub2.default)((0, _mul2.default)('oc', x * y), (0, _mul2.default)(z, 's')), (0, _add2.default)((0, _mul2.default)('oc', z * x), (0, _mul2.default)(y, 's')), 0, (0, _add2.default)((0, _mul2.default)('oc', x * y), (0, _mul2.default)(z, 's')), (0, _add2.default)((0, _mul2.default)('oc', y * y), 'c'), (0, _sub2.default)((0, _mul2.default)('oc', y * z), (0, _mul2.default)(x, 's')), 0, (0, _sub2.default)((0, _mul2.default)('oc', z * x), (0, _mul2.default)(y, 's')), (0, _add2.default)((0, _mul2.default)('oc', y * z), (0, _mul2.default)(x, 's')), (0, _add2.default)((0, _mul2.default)('oc', z * z), 'c'))), '}'];
};

var _ret = __webpack_require__(184);

var _ret2 = _interopRequireDefault(_ret);

var _mat = __webpack_require__(185);

var _mat2 = _interopRequireDefault(_mat);

var _mul = __webpack_require__(187);

var _mul2 = _interopRequireDefault(_mul);

var _sub = __webpack_require__(188);

var _sub2 = _interopRequireDefault(_sub);

var _add = __webpack_require__(189);

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = ret;
function ret(res) {
  return "return " + res + ";";
}

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = mat4;

var _as_float = __webpack_require__(186);

var _as_float2 = _interopRequireDefault(_as_float);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mat4() {
                              var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                              var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                              var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                              var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                              var m10 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                              var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                              var m12 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                              var m13 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                              var m20 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
                              var m21 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
                              var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;
                              var m23 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
                              var m30 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
                              var m31 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
                              var m32 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
                              var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;
                              var as = arguments.length > 16 && arguments[16] !== undefined ? arguments[16] : _as_float2.default;

                              var toStr = as || function (x) {
                                                            return x + '';
                              };
                              return 'mat4(' + toStr(m00) + ', ' + toStr(m01) + ', ' + toStr(m02) + ', ' + toStr(m03) + ', ' + toStr(m10) + ', ' + toStr(m11) + ', ' + toStr(m12) + ', ' + toStr(m13) + ', ' + toStr(m20) + ', ' + toStr(m21) + ', ' + toStr(m22) + ', ' + toStr(m23) + ', ' + toStr(m30) + ', ' + toStr(m31) + ', ' + toStr(m32) + ', ' + toStr(m33) + ')';
}

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (number) {
  var str = (number + '').trim();
  if (str.match(/^[0-9]+$/)) {
    return str + '.0';
  }
  return str;
};

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function isNumber(x) {
  return typeof x === 'number';
}

exports.default = function (a, b) {
  if (isNumber(b) && isNumber(a)) {
    return a * b;
  } else if (isNumber(a)) {
    switch (a) {
      case 0:
        return 0;
      case 1:
        return b;
      default:
        return a + ' * ' + b;
    }
  } else if (isNumber(b)) {
    switch (b) {
      case 0:
        return 0;
      case 1:
        return a;
      default:
        return a + ' * ' + b;
    }
  } else {
    return a + ' * ' + b;
  }
};

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = sub;

function isNumber(x) {
  return typeof x === 'number';
}

function sub(a, b) {
  if (isNumber(a) && isNumber(b)) {
    return a - b;
  } else if (isNumber(a)) {
    switch (a) {
      case 0:
        return '-' + b;
      default:
        return a + ' - ' + b;
    }
  } else if (isNumber(b)) {
    switch (b) {
      case 0:
        return a;
      default:
        return a + ' - ' + b;
    }
  } else {
    return a + ' - ' + b;
  }
}

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = add;

function isNumber(x) {
  return typeof x === 'number';
}

function add(a, b) {
  if (isNumber(a) && isNumber(b)) {
    return a + b;
  } else if (isNumber(a)) {
    switch (a) {
      case 0:
        return b;
      default:
        return a + ' + ' + b;
    }
  } else if (isNumber(b)) {
    switch (b) {
      case 0:
        return a;
      default:
        return a + ' + ' + b;
    }
  } else {
    return a + ' + ' + b;
  }
}

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.EntityManager = exports.Entity = exports.ComponentRegistry = exports.ComponentFactory = undefined;

var _component_factory = __webpack_require__(68);

var _component_factory2 = _interopRequireDefault(_component_factory);

var _component_registry = __webpack_require__(66);

var _component_registry2 = _interopRequireDefault(_component_registry);

var _entity = __webpack_require__(71);

var _entity2 = _interopRequireDefault(_entity);

var _entity_manager = __webpack_require__(70);

var _entity_manager2 = _interopRequireDefault(_entity_manager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.ComponentFactory = _component_factory2.default;
exports.ComponentRegistry = _component_registry2.default;
exports.Entity = _entity2.default;
exports.EntityManager = _entity_manager2.default;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineCustomElements = __webpack_require__(192);

var _defineCustomElements2 = _interopRequireDefault(_defineCustomElements);

var _api = __webpack_require__(35);

var publicApi = _interopRequireWildcard(_api);

var _constants = __webpack_require__(17);

var _log = __webpack_require__(34);

var _log2 = _interopRequireDefault(_log);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global customElements */
var initialize = function initialize() {
  if (customElements.get(_constants.DOM_ELEM_CANVAS)) {
    (0, _log2.default)('<blitpunk> custom elements have already been defined');
  } else {
    (0, _log2.default)('<blitpunk> custom elements are now defined');
    (0, _defineCustomElements2.default)();
  }

  return customElements.whenDefined(_constants.DOM_ELEM_CANVAS).then(function () {
    return publicApi;
  });
};

exports.default = initialize;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = defineCustomElements;

var _CanvasElement = __webpack_require__(193);

var _CanvasElement2 = _interopRequireDefault(_CanvasElement);

var _EntityElement = __webpack_require__(74);

var _EntityElement2 = _interopRequireDefault(_EntityElement);

var _constants = __webpack_require__(17);

__webpack_require__(197);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Define all `<blitpunk-*>` custom html elements.
 * Should be called once at startup.
 */

// import SceneElement from './elements/SceneElement'
// import TextureAtlasElement from './elements/TextureAtlasElement'
// import SpriteGroupElement from './elements/SpriteGroupElement'

function defineCustomElements() {
  // define element in the CustomElementRegistry
  window.customElements.define(_constants.DOM_ELEM_CANVAS, _CanvasElement2.default);
  window.customElements.define(_constants.DOM_ELEM_ENTITY, _EntityElement2.default);
  // window.customElements.define(DOM_ELEM_SCENE, SceneElement)
  // window.customElements.define(DOM_ELEM_TEXTURE_ATLAS, TextureAtlasElement)
  // window.customElements.define(DOM_ELEM_SPRITE_GROUP, SpriteGroupElement)
}

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _EntityElement2 = __webpack_require__(74);

var _EntityElement3 = _interopRequireDefault(_EntityElement2);

var _resize = __webpack_require__(194);

var _resize2 = _interopRequireDefault(_resize);

var _createWebGlRenderer2 = __webpack_require__(195);

var _createWebGlRenderer3 = _interopRequireDefault(_createWebGlRenderer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CanvasElement = function (_EntityElement) {
  _inherits(CanvasElement, _EntityElement);

  /** @ignore */
  function CanvasElement(_) {
    var _this, _ret;

    _classCallCheck(this, CanvasElement);

    var self = (_this = _possibleConstructorReturn(this, _EntityElement.call(this, _)), _this);

    console.log('[CanvasElement] constructor, self=', self);

    self.now = 0;
    self.animationFrameRequestId = 0;
    self.animationFrameRequestIsStopped = false;

    Object.defineProperties(self, {
      _webGlRenderer: { value: null, writable: true },
      _clearColor: { value: undefined, writable: true }
    });

    self.canvas = document.createElement('canvas');
    self.appendChild(self.canvas);
    (0, _resize2.default)(self);

    return _ret = self, _possibleConstructorReturn(_this, _ret);
  }

  CanvasElement.prototype.startAnimation = function startAnimation() {
    var _this2 = this;

    if (this.animationFrameRequestId) return;
    this.animationFrameRequestIsStopped = false;
    this.animationFrameRequestId = window.requestAnimationFrame(function (now) {
      _this2.animationFrameRequestId = 0;
      if (!_this2.animationFrameRequestIsStopped) {
        _this2.startAnimation();
        _this2.now = now / 1000.0; // seconds
        (0, _resize2.default)(_this2);
        var webGlRenderer = _this2.webGlRenderer;

        webGlRenderer.setViewport(0, 0, _this2.width, _this2.height);
        webGlRenderer.renderFrame(function () {
          _this2.renderFrame(_this2, webGlRenderer);
        });
      }
    });
  };

  CanvasElement.prototype.stopAnimation = function stopAnimation() {
    this.animationFrameRequestIsStopped = true;
    if (this.animationFrameRequestId !== 0) {
      window.cancelAnimationFrame(this.animationFrameRequestId);
      this.animationFrameRequestId = 0;
    }
  };

  /** @private */


  CanvasElement.prototype.connectedCallback = function connectedCallback() {
    console.log('[CanvasElement] connectedCallback()');

    (0, _resize2.default)(this);
    this.startAnimation();
  };

  /** @private */


  CanvasElement.prototype.disconnectedCallback = function disconnectedCallback() {
    console.log('[CanvasElement] disconnectedCallback()');

    this.stopAnimation();
  };

  _createClass(CanvasElement, [{
    key: 'webGlRenderer',
    get: function get() {
      var renderer = this._webGlRenderer;
      if (renderer) return renderer;

      var _createWebGlRenderer = (0, _createWebGlRenderer3.default)(this),
          webGlRenderer = _createWebGlRenderer.webGlRenderer,
          canvasContextAttributes = _createWebGlRenderer.canvasContextAttributes;

      this.canvasContextAttributes = canvasContextAttributes;
      this._webGlRenderer = webGlRenderer;
      return webGlRenderer;
    }
  }]);

  return CanvasElement;
}(_EntityElement3.default);

exports.default = CanvasElement;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

/**
 * Resize the canvas element to the same size as the `<blitpunk-canvas>.parentNode`
 */
exports.default = function (el) {
  var style = window.getComputedStyle(el, null);

  var _ref = style.display === 'inline' ? el.parentNode : el,
      wPx = _ref.clientWidth,
      hPx = _ref.clientHeight;

  var canvas = el.canvas;

  var dpr = window.devicePixelRatio || 1;

  canvas.style.width = wPx + 'px';
  canvas.style.height = hPx + 'px';

  var w = Math.round(wPx * dpr);
  var h = Math.round(hPx * dpr);

  if (w !== canvas.width || h !== canvas.height) {
    canvas.width = w;
    canvas.height = h;
  }

  if (w !== el.width || h !== el.height) {
    /**
     * Canvas size in _device_ pixels.
     * @type {number}
     */
    el.width = w;
    /**
     * Canvas size in _device_ pixels.
     * @type {number}
     */
    el.height = h;

    // TODO el.glx.gl.viewport(0, 0, w, h)
  }
};

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _web_gl_context = __webpack_require__(36);

var _web_gl_context2 = _interopRequireDefault(_web_gl_context);

var _web_gl_renderer = __webpack_require__(39);

var _web_gl_renderer2 = _interopRequireDefault(_web_gl_renderer);

var _log = __webpack_require__(34);

var _readBooleanAttribute = __webpack_require__(196);

var _readBooleanAttribute2 = _interopRequireDefault(_readBooleanAttribute);

var _constants = __webpack_require__(17);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createCanvasContextAttributes = function createCanvasContextAttributes(el) {
  return {
    alpha: (0, _readBooleanAttribute2.default)(el, _constants.ATTR_ALPHA, false),
    antialias: (0, _readBooleanAttribute2.default)(el, _constants.ATTR_ANTIALIAS, false),
    depth: (0, _readBooleanAttribute2.default)(el, _constants.ATTR_DEPTH, true), // ie 11 has no support for false
    premultipliedAlpha: (0, _readBooleanAttribute2.default)(el, _constants.ATTR_PREMULTIPLIED_ALPHA, false),
    preserveDrawingBuffer: (0, _readBooleanAttribute2.default)(el, _constants.ATTR_PRESERVE_DRAW, false),
    stencil: (0, _readBooleanAttribute2.default)(el, _constants.ATTR_STENCIL, false)
  };
};

var createWebGlContext = function createWebGlContext(canvas, attributes) {
  var gl = void 0;

  try {
    gl = canvas.getContext('webgl', attributes);
  } catch (err0) {
    (0, _log.error)(err0);
  }

  if (!gl) {
    try {
      gl = canvas.getContext('experimental-webgl', attributes);
    } catch (err1) {
      (0, _log.error)(err1);
    }
  }

  if (!gl) {
    throw new Error('Could not create WebGL context, attributes=' + JSON.stringify(attributes));
  }

  return gl;
};

exports.default = function (el) {
  var canvasContextAttributes = Object.freeze(createCanvasContextAttributes(el));
  var glx = new _web_gl_context2.default(createWebGlContext(el.canvas, canvasContextAttributes));
  return {
    canvasContextAttributes: canvasContextAttributes,
    webGlRenderer: new _web_gl_renderer2.default(glx)
  };
};

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (el, name, defaultValue) {
  if (!el.hasAttribute(name)) return defaultValue;
  switch (el.getAttribute(name).toLowerCase()) {
    case 'true':
    case 'yes':
    case 'on':
    case '':
    case name:
      return true;
  }
  return false;
};

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(198);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(200)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/lib/index.js!./blitpunk.scss", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!../../../node_modules/postcss-loader/lib/index.js!./blitpunk.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(199)(undefined);
// imports


// module
exports.push([module.i, "blitpunk-canvas {\n  display: inline-block;\n  font-size: 0;\n  margin: 0;\n  padding: 0; }\n  blitpunk-canvas > canvas {\n    border: 0;\n    margin: 0;\n    overflow: hidden;\n    padding: 0;\n    -ms-touch-action: none;\n    touch-action: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none; }\n\nblitpunk-scene,\nblitpunk-texture-atlas,\nblitpunk-sprite-group {\n  display: none; }\n", ""]);

// exports


/***/ }),
/* 199 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			var styleTarget = fn.call(this, selector);
			// Special case to return head of iframe instead of iframe itself
			if (styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[selector] = styleTarget;
		}
		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(201);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 201 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA3NzRhOGRkN2QxYWUwNzVkNDUwZSIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvdXRpbHMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L3NyYy9nbC1tYXRyaXgvY29tbW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay91dGlscy9nZW5lcmF0ZV91dWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9zaGFkZXJfdmFyaWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3V0aWxzL3Jlc291cmNlX3JlZi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvdXRpbHMvdHlwZWRfYXJyYXlfaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS92X29fYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvdl9vX2F0dHJfZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3ZhcmlhYmxlX2dyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS90ZXh0dXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55Y29sb3IyL3Rpbnljb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvZG9tL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9zaGFkZXJfc291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3BlYXJ3b2xmL2V2ZW50aXplL3NyYy9ldmVudGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9jb3JlL3Bvd2VyX29mXzJfaW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3RleHR1cmVfMmRfdmFyaWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvdGV4dHVyZV9hdGxhcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29tcG9uZW50UmVnaXN0cnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9lbnRpdHlNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vbG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9yZW5kZXIvd2ViX2dsX2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvcmVuZGVyL3dlYl9nbF9yZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS92X29fZGVzY3JpcHRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS92X29fcG9vbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9hYWJiMi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9lbGVtZW50X2luZGV4X2FycmF5LmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay91dGlscy9tYXRoX2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3V0aWxzL21hdDQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4L21hdDMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4L3ZlYzMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4L3ZlYzQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3VuaWZvcm1fdmFyaWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvcmVzb3VyY2VfbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9zaGFkZXJfYXR0cmliX3ZhbHVlLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9jb3JlL3NoYWRlcl9hdHRyaWJfdmFyaWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3Byb2dyYW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3RleHR1cmVfZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3ZhcmlhYmxlX2FsaWFzLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9jb3JlL3NoYWRlcl92YXJpYWJsZV9idWZmZXJfZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvdGV4dHVyZV9hdGxhc19zcGVjLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay91dGlscy9zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvdGV4dHVyZV9saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9jb3JlL3RleHR1cmVfc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2Vjcy9jb21wb25lbnRfcmVnaXN0cnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2RvbS9yZWdpc3RlckNvcmVDb21wb25lbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9lY3MvY29tcG9uZW50X2ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3V0aWxzL3JlbW92ZUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2Vjcy9lbnRpdHlfbWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvZWNzL2VudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvcmVzb3VyY2VMaWJyYXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay90ZXh0dXJlTGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvZG9tL2VsZW1lbnRzL0VudGl0eUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9hcHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfcmVzb3VyY2VfbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC92NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvcm5nLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay91dGlscy9zZXJpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfc2hhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay91dGlscy9zaGFkZXJfaGVscGVycy9zb3VyY2VfdG9fc3RyLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9yZW5kZXIvd2ViX2dsX3Byb2dyYW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfdW5pZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvcmVuZGVyL3dlYl9nbF9hdHRyaWJ1dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfdGV4dHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvcmVuZGVyL3dlYl9nbF90ZXh0dXJlX21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvdl9vX2hlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS92X29fZGVzY3JpcHRvci9jcmVhdGVfdl9vX3Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS92X29fZGVzY3JpcHRvci9jcmVhdGVfdHlwZWRfYXJyYXlzLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9jb3JlL3Zfb19kZXNjcmlwdG9yL2NyZWF0ZV9hdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9jb3JlL3Zfb19kZXNjcmlwdG9yL2NyZWF0ZV9hbGlhc2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9jb3JlL3Zfb19wb29sL2NyZWF0ZV92ZXJ0ZXhfb2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9ibGVuZF9tb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc25ha2VDYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUNvbXBvdW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlSZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJ1cnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVidXJyTGV0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3dvcmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FzY2lpV29yZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzVW5pY29kZVdvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVdvcmRzLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9jb3JlL3Byb2plY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC9tYXQyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC9tYXQyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L3NyYy9nbC1tYXRyaXgvbWF0NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L3NyYy9nbC1tYXRyaXgvcXVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L3NyYy9nbC1tYXRyaXgvdmVjMi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9zaGFkZXJfY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9zcHJpdGVfZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9waWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQaWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQaWNrQnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWVtb2l6ZUNhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9oYXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mbGF0UmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlQdXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzRmxhdHRlbmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlclJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNldFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9WaWV3cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvcmVuZGVyL2NsZWFyX2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvdXRpbHMvcGFyc2VDc3NTdHlsZWRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay91dGlscy9nZXREZWZhdWx0T3B0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9kb20vY29tcG9uZW50cy9DbGVhckNvbG9yQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9kb20vY29tcG9uZW50cy9DbGVhckNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvY29yZS9yZXNvdXJjZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2NvcmUvcmVzb3VyY2VzL3NpbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvdXRpbHMvc2hhZGVyX2hlbHBlcnMvcm90YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay91dGlscy9zaGFkZXJfaGVscGVycy9yZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3V0aWxzL3NoYWRlcl9oZWxwZXJzL21hdDQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3V0aWxzL3NoYWRlcl9oZWxwZXJzL2FzX2Zsb2F0LmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay91dGlscy9zaGFkZXJfaGVscGVycy9tdWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL3V0aWxzL3NoYWRlcl9oZWxwZXJzL3N1Yi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvdXRpbHMvc2hhZGVyX2hlbHBlcnMvYWRkLmpzIiwid2VicGFjazovLy8uL3NyYy9ibGl0cHVuay9lY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2luaXRpYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2RvbS9kZWZpbmVDdXN0b21FbGVtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvZG9tL2VsZW1lbnRzL0NhbnZhc0VsZW1lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JsaXRwdW5rL2RvbS9lbGVtZW50cy9DYW52YXNFbGVtZW50L3Jlc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvZG9tL2VsZW1lbnRzL0NhbnZhc0VsZW1lbnQvY3JlYXRlV2ViR2xSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvZG9tL2xpYi9yZWFkQm9vbGVhbkF0dHJpYnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvZG9tL2JsaXRwdW5rLnNjc3M/OWM0NSIsIndlYnBhY2s6Ly8vLi9zcmMvYmxpdHB1bmsvZG9tL2JsaXRwdW5rLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIl0sIm5hbWVzIjpbIm9iaiIsImRlc3Ryb3llZCIsImV2ZW50aXplIiwiaXMiLCJvZmYiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJyZXF1aXJlIiwidXVpZCIsIlNoYWRlclZhcmlhYmxlIiwibmFtZSIsInR5cGUiLCJfdmFsdWUiLCJzZXJpYWwiLCJ0b3VjaCIsInZhbCIsIlRZUEUiLCJmcmVlemUiLCJVTklGT1JNIiwiQVRUUklCIiwiVEVYVFVSRV8yRCIsIlJlc291cmNlUmVmIiwicmVzb3VyY2UiLCJoaW50cyIsImlkIiwiaXNTeW5jZWQiLCJzb3VyY2VSZWYiLCJuZWVkU3luYyIsInN5bmMiLCJjYiIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiZmxvYXQzMiIsImludDE2IiwiaW50MzIiLCJpbnQ4IiwidWludDE2IiwidWludDMyIiwidWludDgiLCJUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiIsIkZsb2F0MzJBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiSW50OEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIlVpbnQ4QXJyYXkiLCJUWVBFRF9BUlJBWV9HRVRURVIiLCJmbG9hdDMyQXJyYXkiLCJpbnQzMkFycmF5IiwiaW50MTZBcnJheSIsImludDhBcnJheSIsInVpbnQzMkFycmF5IiwidWludDE2QXJyYXkiLCJ1aW50OEFycmF5IiwiR0xfSVRFTV9UWVBFUyIsIlZPQXJyYXkiLCJkZXNjcmlwdG9yIiwiY2FwYWNpdHkiLCJkYXRhIiwidXNhZ2UiLCJVU0FHRSIsIkRZTkFNSUMiLCJhdXRvdG91Y2giLCJ1bmRlZmluZWQiLCJyZXNvdXJjZVJlZiIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImJ5dGVzUGVyVk8iLCJ0eXBlZEFycmF5IiwiYnVmZmVyQnl0ZU9mZnNldCIsImJ1ZmZlckJ5dGVMZW5ndGgiLCJ0eXBlTGlzdCIsImZpbHRlciIsImVuYWJsZUF1dG90b3VjaCIsImNvcHkiLCJmcm9tVk9BcnJheSIsInRvT2Zmc2V0Iiwib2Zmc2V0Iiwic2V0Iiwic3ViYXJyYXkiLCJiZWdpbiIsInNpemUiLCJTVEFUSUMiLCJWT0F0dHJEZXNjcmlwdG9yIiwidW5pZm9ybSIsImF0dHJOYW1lcyIsImJ5dGVzUGVyRWxlbWVudCIsImJ5dGVzUGVyVmVydGV4IiwidmVydGV4QXR0ckNvdW50IiwiZGVmaW5lUHJvcGVydGllcyIsImF0dHJEZXNjIiwicHJvcGVydGllc09iamVjdCIsImdldEFycmF5IiwidmVydGV4Q291bnQiLCJpIiwiaiIsInZhbHVlR2V0dGVyIiwiZ2V0VjF1IiwidmFsdWVTZXR0ZXIiLCJzZXRWMXUiLCJnZXRWYWx1ZSIsInZvIiwiY2FsbCIsInNldFZhbHVlIiwiYXJnIiwiZ2V0IiwiZW51bWVyYWJsZSIsInNldFZOdiIsImFyZ3MiLCJhcHBseSIsImNhbWVsaXplIiwidmFsdWVHZXR0ZXJzIiwiY3VyVmFsdWVHZXR0ZXIiLCJwdXNoIiwidmkiLCJnZXRWTnUiLCJzZXRWTnUiLCJpZHgiLCJzZXR0ZXJOYW1lIiwiYXR0clBvc3RmaXgiLCJjdXJWZXJ0ZXhWYWx1ZUdldHRlcnMiLCJpbmRleCIsInBvc3RmaXgiLCJhdHRySW5kZXgiLCJ2b0FycmF5IiwidmVjdG9yTGVuZ3RoIiwiX2FycmF5IiwibiIsImFyZ3VtZW50cyIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwiU2hhZGVyVmFyaWFibGVHcm91cCIsInNoYWRlclZhcnMiLCJwdXNoVmFyIiwic2hhZGVyQ29udGV4dCIsImJpbmQiLCJwb3BWYXIiLCJnZXRPcHRpb24iLCJvcHRpb25zIiwiZGVmYXVsdFZhbHVlIiwiVGV4dHVyZSIsInNvdXJjZSIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJwYXJlbnQiLCJpbWFnZSIsIl9yZXNvdXJjZVJlZiIsImZsaXBZIiwicmVwZWF0YWJsZSIsInByZW11bHRpcGx5QWxwaGEiLCJuZWFyZXN0Iiwib3JpZ1dpZHRoIiwib3JpZ0hlaWdodCIsIkVycm9yIiwiX3dpZHRoIiwiX2hlaWdodCIsImxvYWQiLCJ1cmwiLCJ0ZXh0dXJlSGludHMiLCJjb21wbGV0ZSIsInRoZW4iLCJwMmltZyIsInJvb3QiLCJpbWdFbCIsInciLCJoIiwidGV4dHVyZSIsIkRPTV9FTEVNX0VOVElUWSIsIkRPTV9FTEVNX0NBTlZBUyIsIkRPTV9FTEVNX1NDRU5FIiwiRE9NX0VMRU1fU1BSSVRFX0dST1VQIiwiRE9NX0VMRU1fVEVYVFVSRV9BVExBUyIsIk5PREVfTkFNRV9FTlRJVFkiLCJOT0RFX05BTUVfQ0FOVkFTIiwiTk9ERV9OQU1FX1NDRU5FIiwiTk9ERV9OQU1FX1NQUklURV9HUk9VUCIsIk5PREVfTkFNRV9URVhUVVJFX0FUTEFTIiwiQ09NUF9QUklPX0NMRUFSIiwiQ09NUF9QUklPX1BST0pFQ1RJT04iLCJDT01QX1BSSU9fQkxFTkRfQkVGT1JFIiwiQ09NUF9QUklPX0NISUxEUkVOIiwiQ09NUF9QUklPX0JMRU5EX0FGVEVSIiwiQVRUUl9BTFBIQSIsIkFUVFJfQU5USUFMSUFTIiwiQVRUUl9CTEVORF9NT0RFIiwiQVRUUl9DQVBBQ0lUWSIsIkFUVFJfQ0xFQVJfQ09MT1IiLCJBVFRSX0RFUFRIIiwiQVRUUl9ERVNDUklQVE9SIiwiQVRUUl9GTElQX1kiLCJBVFRSX0ZSQUdNRU5UX1NIQURFUiIsIkFUVFJfTU9EVUxFX1NSQyIsIkFUVFJfTkVBUkVTVCIsIkFUVFJfUFJFTVVMVElQTElFRF9BTFBIQSIsIkFUVFJfUFJFTVVMVElQTFlfQUxQSEEiLCJBVFRSX1BSRVNFUlZFX0RSQVciLCJBVFRSX1BSSU1JVElWRSIsIkFUVFJfUFJPSkVDVElPTiIsIkFUVFJfUkVQRUFUQUJMRSIsIkFUVFJfU1JDIiwiQVRUUl9TVEVOQ0lMIiwiQVRUUl9URVhUVVJFX01BUCIsIkFUVFJfVkVSVEVYX1NIQURFUiIsIkFUVFJfVk9fTkVXIiwiQVRUUl9WT19aRVJPIiwiU2hhZGVyU291cmNlIiwiSFRNTEVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJQb3dlck9mMkltYWdlIiwiZnJvbSIsIndpbmRvdyIsIkltYWdlIiwic3JjIiwiUHJvbWlzZSIsIm9yaWdPbkxvYWQiLCJvbmxvYWQiLCJzZXRQb3dlck9mMkltZ0VsIiwicmVzb2x2ZSIsImNvbnZlcnRUb1Bvd2VyT2YyIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsIlNoYWRlclRleHR1cmUyZFZhcmlhYmxlIiwic3luY1RleHR1cmVBbmRWYWx1ZSIsInJlbmRlcmVyIiwiZ2xUZXgiLCJzeW5jVGV4dHVyZSIsIlRleHR1cmVBdGxhcyIsInJvb3RUZXh0dXJlIiwic3BlYyIsImZyYW1lcyIsIk1hcCIsImFkZEZyYW1lIiwiZ2V0RnJhbWUiLCJnZXRSYW5kb21GcmFtZSIsIkFycmF5IiwidmFsdWVzIiwiZ2V0UmFuZG9tRnJhbWVOYW1lIiwiZnJhbWVOYW1lcyIsImZldGNoT3B0aW9ucyIsImF0bGFzU3BlYyIsImNyZWF0ZVRleHR1cmVBdGxhcyIsImltYWdlVXJsIiwiY29tcG9uZW50UmVnaXN0cnkiLCJNYXQ0IiwiZmluZE5leHRQb3dlck9mMiIsImdlbmVyYXRlVXVpZCIsImlzUG93ZXJPZjIiLCJtYXhPZiIsInBhcnNlQ3NzU3R5bGVkUHJvcGVydGllcyIsInNhbXBsZSIsInJlbW92ZUl0ZW0iLCJnZXREZWZhdWx0T3B0aW9uIiwiZW50aXR5TWFuYWdlciIsImxvZyIsImNvbnNvbGUiLCJkZWJ1ZyIsImVycm9yIiwiY29yZSIsImVjcyIsInV0aWxzIiwiQXBwIiwicmVzb3VyY2VMaWJyYXJ5IiwidGV4dHVyZUxpYnJhcnkiLCJXZWJHbENvbnRleHQiLCJnbCIsImluaXRpYWxpemUiLCJib3VuZEJ1ZmZlcnMiLCJjdXJyZW50UHJvZ3JhbSIsImVuYWJsZWRWZXJ0ZXhBdHRyaWJMb2NhdGlvbnMiLCJ0ZXh0dXJlTWFuYWdlciIsImJvdW5kVGV4dHVyZXMiLCJNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsImxlbmd0aCIsInJlYWRDdXJyZW50U3RhdGUiLCJhY3RpdmVUZXh0dXJlIiwiZGVzdHJveSIsImNsZWFyIiwiYmxlbmQiLCJibGVuZE1vZGUiLCJlbmFibGUiLCJibGVuZEVuYWJsZWQiLCJCTEVORCIsImJsZW5kRnVuYyIsInNmYWN0b3IiLCJkZmFjdG9yIiwiZGlzYWJsZSIsInRleFVuaXQiLCJ0ZXgiLCJURVhUVVJFMCIsImFjdGl2ZVRleFVuaXQiLCJiaW5kVGV4dHVyZTJkIiwiZ2xUZXh0dXJlSWQiLCJib3VuZCIsImJpbmRUZXh0dXJlIiwiQVJSQVlfQlVGRkVSIiwiZ2V0UGFyYW1ldGVyIiwiQVJSQVlfQlVGRkVSX0JJTkRJTkciLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkciLCJDVVJSRU5UX1BST0dSQU0iLCJiaW5kQnVmZmVyIiwidGFyZ2V0IiwidXNlUHJvZ3JhbSIsImdsUHJvZ3JhbSIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5cyIsImVuYWJsZUxvY2F0aW9ucyIsImluZGV4T2YiLCJsb2NhdGlvbiIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInNwbGljZSIsImxvYyIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiZ2x4IiwiREVQVEhfQklUUyIsIlNURU5DSUxfQklUUyIsIldlYkdsQnVmZmVyIiwiU1RBVElDX0RSQVciLCJnbEJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJEWU5BTUlDX0RSQVciLCJhdXRvdG91Y2hCdWZmZXIiLCJhdXRvdG91Y2hSZXNvdXJjZXMiLCJoYXMiLCJhcHBseUJsZW5kTW9kZSIsImJsZW5kU3RhY2siLCJpbml0aWFsQmxlbmRNb2RlIiwiaXNFcXVhbCIsImN1cnJlbnRCbGVuZE1vZGUiLCJXZWJHbFJlbmRlcmVyIiwiY2xlYXJCdWZmZXIiLCJ2aWV3cG9ydCIsInNldFZpZXdwb3J0Iiwic2V0SW5pdGlhbEJsZW5kTW9kZSIsInJlbmRlckZyYW1lIiwicmVuZGVyQ2FsbGJhY2siLCJiZWdpblJlbmRlckZyYW1lIiwiZW5kUmVuZGVyRnJhbWUiLCJyZXNldCIsInNldEdsVmlld3BvcnQiLCJwdXNoQmxlbmRNb2RlIiwicG9wQmxlbmRNb2RlIiwicG9wIiwidXNlU2hhZGVyUHJvZ3JhbSIsInNoYWRlclByb2dyYW0iLCJwcm9ncmFtIiwibG9hZFByb2dyYW0iLCJ1c2UiLCJsb2FkVW5pZm9ybXMiLCJsb2FkQXR0cmlidXRlcyIsImRyYXdBcnJheXMiLCJwcmltaXRpdmUiLCJjb3VudCIsInN0YXJ0SW5kZXgiLCJkcmF3SW5kZXhlZCIsImVsZW1lbnRJbmRleEFycmF5Iiwic3luY0J1ZmZlciIsImRyYXdFbGVtZW50cyIsIlVOU0lHTkVEX1NIT1JUIiwiYXJyYXkiLCJidWZmZXJSZWYiLCJsb2FkQnVmZmVyIiwidGV4UmVmIiwiZ2xUZXhSZWYiLCJsb2FkVGV4dHVyZSIsInVwbG9hZEltYWdlRGF0YSIsIkFBQkIyIiwiQmxlbmRNb2RlIiwiRWxlbWVudEluZGV4QXJyYXkiLCJQcm9qZWN0aW9uIiwiUmVzb3VyY2VMaWJyYXJ5IiwiU2hhZGVyQXR0cmliVmFsdWUiLCJTaGFkZXJBdHRyaWJWYXJpYWJsZSIsIlNoYWRlckNvbnRleHQiLCJTaGFkZXJQcm9ncmFtIiwiU2hhZGVyVGV4dHVyZUdyb3VwIiwiU2hhZGVyVW5pZm9ybVZhcmlhYmxlIiwiU2hhZGVyVmFyaWFibGVBbGlhcyIsIlNoYWRlclZhcmlhYmxlQnVmZmVyR3JvdXAiLCJTcHJpdGVHcm91cCIsIlRleHR1cmVBdGxhc1NwZWMiLCJUZXh0dXJlTGlicmFyeSIsIlRleHR1cmVTdGF0ZSIsIlZPRGVzY3JpcHRvciIsIlZPUG9vbCIsIlZpZXdwb3J0IiwiYXR0cmlidXRlcyIsImFsaWFzZXMiLCJwcm90byIsInBhcnNlSW50IiwiYXR0ciIsImNyZWF0ZVZPQXJyYXkiLCJjcmVhdGVWTyIsImNyZWF0ZSIsInZvUHJvdG90eXBlIiwiaGFzQXR0cmlidXRlIiwiTWF0aCIsImZsb29yIiwibWF4SW5kZXhlZFZPUG9vbFNpemUiLCJtYXhBbGxvY1ZPU2l6ZSIsInZvWmVybyIsInZvTmV3IiwiYXZhaWxhYmxlVk9zIiwidXNlZFZPcyIsImFsbG9jIiwiYXJyIiwic2hpZnQiLCJhbGxvY2F0ZWRDb3VudCIsImZyZWUiLCJpc0FycmF5IiwiX3ZvIiwibGFzdElkeCIsImxhc3QiLCJ0bXAiLCJ1bnNoaWZ0IiwicG9zTnVtIiwibnVtIiwieDAiLCJ4MSIsInkwIiwieTEiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwiYWRkUG9pbnQiLCJpc0luc2lkZSIsImlzSW50ZXJzZWN0aW9uIiwiYWFiYiIsIm9iamVjdENvdW50IiwiaXRlbUNvdW50IiwiR2VuZXJhdGUiLCJpbmRpY2VzIiwic3RyaWRlIiwib2JqZWN0T2Zmc2V0IiwiYSIsImIiLCJwIiwibWF0NCIsIkRFRzJSQUQiLCJQSSIsImlkZW50aXR5Iiwib3J0aG8iLCJ6UmFuZ2UiLCJwb3ciLCJodyIsImhoIiwiaHoiLCJwZXJzcGVjdGl2ZSIsImRpc3RhbmNlIiwiYXNwZWN0IiwibmVhciIsImZhciIsImhhbGZIZWlnaHQiLCJmb3Z5IiwiYXRhbiIsInRyYW5zbGF0ZSIsInoiLCJzY2FsZSIsInJvdGF0ZVgiLCJkZWciLCJyb3RhdGVZIiwicm90YXRlWiIsIm11bHRpcGx5IiwiY2xvbmUiLCJkb2xseSIsImRlc2NyaXB0b3JzIiwidmVydGV4U2hhZGVycyIsImZyYWdtZW50U2hhZGVycyIsImFkZERlc2NyaXB0b3IiLCJkZXNjcmlwdGlvbiIsImFkZFZlcnRleFNoYWRlciIsImFkZEZyYWdtZW50U2hhZGVyIiwiZmluZERlc2NyaXB0b3IiLCJmaW5kVmVydGV4U2hhZGVyIiwiZmluZEZyYWdtZW50U2hhZGVyIiwiYnVmZmVyU291cmNlIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJzaGFkZXJMaWJyYXJ5Iiwic2hhZGVyVGV4dHVyZU1hcCIsIndhaXRGb3IiLCJtYXAiLCJzaGFkZXJWYXJLZXkiLCJ0ZXh0dXJlSWQiLCJpc0xvYWRlZCIsInNoYWRlclZhckdyb3VwIiwic2hhZGVyVmFyU3RvcmUiLCJ3aGVuTG9hZGVkIiwib25Mb2FkZWQiLCJzdGF0ZSIsInN0YXRlcyIsImlzUmVhZHkiLCJzaGFkZXJWYXIiLCJmaXJzdFZhciIsImF0dHJOYW1lIiwianNvbkRlZiIsImltZyIsImF0bGFzIiwiZnJhbWUiLCJmZXRjaCIsInJlc3BvbnNlIiwianNvbiIsIm1ldGEiLCJyYW5kb20iLCJwcm9taXNlIiwibG9hZFRleHR1cmVBdGxhcyIsImdldFRleHR1cmVBdGxhcyIsImNhdGNoIiwiZXJyIiwiQ29tcG9uZW50UmVnaXN0cnkiLCJyZWdpc3RyeSIsInJlZ2lzdGVyQ29tcG9uZW50IiwiY29tcG9uZW50RmFjdG9yeSIsImNyZWF0ZUNvbXBvbmVudCIsImVudGl0eSIsImZhY3RvcnkiLCJjb21wb25lbnQiLCJzZXRDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJ1cGRhdGUiLCJjcmVhdGVPclVwZGF0ZUNvbXBvbmVudCIsImdldENvbXBvbmVudFJlZ2lzdHJ5IiwiZGVzdHJveUNvbXBvbmVudCIsImNyZWF0ZUNzc1N0eWxlZFByb3BzQ29tcG9uZW50IiwiQ29tcG9uZW50RmFjdG9yeSIsIkNvbXBvbmVudENvbnN0cnVjdG9yIiwiaXRlbSIsIkVudGl0eU1hbmFnZXIiLCJlbnRpdGllcyIsImNyZWF0ZUVudGl0eSIsImdldEVudGl0eSIsImRlc3Ryb3lFbnRpdHkiLCJkZWxldGUiLCJkZXN0cm95QWxsRW50aXRpZXMiLCJkZXN0cm95QWxsQ29tcG9uZW50cyIsInJlZ2lzdHJpZXMiLCJFbnRpdHkiLCJoYXNDb21wb25lbnQiLCJjb25uZWN0ZWRFbnRpdHkiLCJxdWVyeUNvbXBvbmVudCIsImZpbHRlckNhbGxiYWNrIiwiZGlzY29ubmVjdGVkRW50aXR5IiwiZW1pdCIsIkVudGl0eUVsZW1lbnQiLCJfIiwic2VsZiIsImF0dHJpYnV0ZVZhbHVlc0NhY2hlIiwiYXR0cmlidXRlTmFtZXNDYWNoZSIsIl9jb21wb25lbnRSZWdpc3RyeSIsIndyaXRhYmxlIiwiX2VudGl0eU1hbmFnZXIiLCJfZW50aXR5IiwidXBkYXRlRW50aXR5IiwiYXR0cmlidXRlTmFtZXMiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsInByZXZBdHRyTmFtZXMiLCJzbGljZSIsIm9sZFZhbHVlIiwiZ2V0QXR0cmlidXRlIiwiY2FudmFzRWwiLCJ3ZWJHbFJlbmRlcmVyIiwicGFyZW50RWwiLCJjaGlsZHJlbiIsImNoaWxkRWwiLCJjb25uZWN0ZWRDYWxsYmFjayIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwibWFuYWdlciIsInRpbnljb2xvciIsIm5vdyIsInBlcmZvcm1hbmNlIiwiZGVmYXVsdE9wdGlvbiIsImRlZmF1bHRWYWx1ZUZuIiwiY29udGV4dEF0dHJpYnV0ZXMiLCJhbHBoYSIsImRlcHRoIiwic3RlbmNpbCIsImFudGlhbGlhcyIsInByZW11bHRpcGxpZWRBbHBoYSIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInRpbWUiLCJsYXN0RnJhbWVUaW1lIiwidGltZUZyYW1lT2Zmc2V0IiwiZnJhbWVObyIsImNsZWFyQ29sb3IiLCJjcmVhdGVHbENvbnRleHQiLCJlbCIsInN0YXJ0ZWQiLCJzdG9wcGVkIiwic3RhcnQiLCJjYW5TdGFydCIsInJlc2l6ZSIsInJlcXVlc3RBbmltYXRlIiwiX2NsZWFyQ29sb3IiLCJzZXRDbGVhckNvbG9yIiwic3RhcnRUaW1lIiwiYXBwZW5kQ2hpbGQiLCJyYWZTdWJzY3JpcHRpb24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhbmltYXRlIiwiY2FuY2VsQW5pbWF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic3RvcCIsImNhblN0b3AiLCJlcnIwIiwiZXJyMSIsInJlbW92ZUNoaWxkIiwiY2FuQW5pbWF0ZSIsInN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkiLCJwYXJlbnROb2RlIiwiZHByIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIndQeCIsImNsaWVudFdpZHRoIiwiaFB4IiwiY2xpZW50SGVpZ2h0Iiwicm91bmQiLCJjb2xvciIsImN0eEF0dHJzIiwiV0VCX0dMX0JVRkZFUl9VU0FHRSIsInN0YXRpYyIsImR5bmFtaWMiLCJXZWJHbFJlc291cmNlTGlicmFyeSIsImxvYWRWZXJ0ZXhTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJnbFNoYWRlciIsImxvYWRGcmFnZW1lbnRTaGFkZXIiLCJyZWYiLCJmaW5kQnVmZmVyIiwiZ2xUZXh0dXJlUmVmIiwiU2VyaWFsIiwiaW5pdGlhbFZhbHVlIiwiV2ViR2xTaGFkZXIiLCJzaGFkZXJUeXBlIiwiY3JlYXRlU2hhZGVyIiwiY29tcGlsZVNoYWRlciIsInNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwic2hhZGVySW5mb0xvZyIsImdldFNoYWRlckluZm9Mb2ciLCJncm91cCIsImdyb3VwRW5kIiwid2ViR2xTaGFkZXIiLCJzb3VyY2VUb1N0ciIsImN0eCIsImpvaW4iLCJXZWJHbFByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwibGlua1Byb2dyYW0iLCJjcmVhdGVVbmlmb3JtcyIsImNyZWF0ZUF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJ1bmlmb3JtTmFtZXMiLCJjdXJVbmlmb3JtIiwiY3VyVGV4MmQiLCJ1bmlmb3JtcyIsImF0dHJpYlZhbHVlIiwiY3VyQXR0cmliIiwidmVydGV4QXR0cmliUG9pbnRlciIsImxlbiIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImF0dHJpYiIsIkFDVElWRV9VTklGT1JNUyIsImF0dGFjaFNoYWRlciIsIkxJTktfU1RBVFVTIiwid2ViR2xQcm9ncmFtIiwiV2ViR2xVbmlmb3JtIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInVuaWZvcm1TZXR0ZXIiLCJGTE9BVCIsInVuaWZvcm0xZiIsIkZMT0FUX1ZFQzIiLCJ1bmlmb3JtMmYiLCJGTE9BVF9WRUMzIiwidW5pZm9ybTNmIiwiRkxPQVRfVkVDNCIsInVuaWZvcm00ZiIsIkZMT0FUX01BVDQiLCJ1bmlmb3JtTWF0cml4NGZ2IiwiRkFMU0UiLCJTQU1QTEVSXzJEIiwidW5pZm9ybTFpIiwid2ViR2xVbmlmb3JtIiwiZ2xUeXBlIiwiV2ViR2xBdHRyaWJ1dGUiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsIldlYkdsVGV4dHVyZSIsImlzSW5pdGlhbGl6ZWQiLCJnbFRleE9iaiIsImNyZWF0ZVRleHR1cmUiLCJiaW5kV2ViR2xUZXh0dXJlIiwidGV4SW1hZ2UyRCIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwid3JhcCIsIlJFUEVBVCIsIkNMQU1QX1RPX0VER0UiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsIk5FQVJFU1QiLCJMSU5FQVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJXZWJHbFRleHR1cmVNYW5hZ2VyIiwibGFzdEJvdW5kVGV4VW5pdCIsImdsVGV4dHVyZSIsInByZXZHbFRleCIsInRvQXJyYXkiLCJhdHRyTGlzdCIsImsiLCJ0eXBlZEFycmF5cyIsInNvcnQiLCJyaWdodFBhZEJ5dGVzUGVyVmVydGV4Iiwidm9Qb29sIiwibWF4QWxsb2NTaXplIiwibWF4IiwidXNlZENvdW50IiwidmVydGV4T2JqZWN0Iiwic25ha2VDYXNlIiwib3RoZXIiLCJfc2ZhY3RvciIsIl9kZmFjdG9yIiwiVU5JRk9STV9OQU1FIiwiZGVzaXJlZFdpZHRoIiwiZGVzaXJlZEhlaWdodCIsInBpeGVsUmF0aW8iLCJzaXplRml0IiwidW5pZm9ybU5hbWUiLCJ1cGRhdGVPcnRobyIsImN1cnJlbnRXaWR0aCIsImN1cnJlbnRIZWlnaHQiLCJjdXJyZW50UmF0aW8iLCJkZXNpcmVkUmF0aW8iLCJpc0NvdmVyIiwiZmFjdG9yIiwidGV4MmQiLCJzaGFkZXJWYXJpYWJsZSIsImxhbmUiLCJzaGFkZXJWYXJMYW5lIiwiY3VyVmFyIiwic2hhZGVyVmFyTWFwIiwicGljayIsImdldFZPIiwib3B0IiwiYXNzaWduIiwidm9Qb29sU2hhZGVyQXR0cmlicyIsInRleHR1cmVzIiwic2hhZGVyVGV4dHVyZUdyb3VwIiwic2V0VGV4dHVyZSIsInNhbXBsZXIiLCJjcmVhdGVTcHJpdGUiLCJzZXRTaXplIiwic2V0VGV4Q29vcmRzQnlUZXh0dXJlIiwidGV4VW5pZm9ybXMiLCJhdmFpbGFibGVDb3VudCIsIm1ha2VDbGVhck1hc2siLCJtYXNrIiwiQ09MT1JfQlVGRkVSX0JJVCIsImhhc0RlcHRoQml0cyIsIkRFUFRIX0JVRkZFUl9CSVQiLCJoYXNTdGVuY2lsQml0cyIsIlNURU5DSUxfQlVGRkVSX0JJVCIsIkNsZWFyQnVmZmVyIiwiY2xlYXJEZXB0aCIsImNsZWFyU3RlbmNpbCIsImNsZWFyTWFzayIsImNvbCIsInNldENsZWFyTWFzayIsInRvUmdiIiwiciIsImciLCJyZU51bWJlciIsInJlVXJsIiwicmVWZWMyIiwicmVWZWMzIiwicmVWZWM0IiwicmVGdW5jIiwicGFyc2VWYWx1ZSIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsIkpTT04iLCJwYXJzZSIsImV4ZWMiLCJwYXJzZUZsb2F0IiwibSIsIlVSTCIsInRyaW0iLCJpbmRleE9mTmV4dE5vbldoaXRlc3BhY2UiLCJzdHIiLCJjdXJJZHgiLCJpbmRleE9mTmV4dFNlcGVyYXRvciIsInNlcGVyYXRvciIsInNwbGl0SW50b1Byb3BUb2tlbnMiLCJwcm9wVG9rZW5zIiwidG8iLCJzcGxpdEludG9Qcm9wcyIsInRva2VucyIsInRvayIsImNvbG9uIiwicHJvcCIsInByb3BzIiwicGFyc2VDb2xvciIsImNvbFN0ciIsIkNsZWFyQ29sb3JDb21wb25lbnQiLCJERUZBVUxUX0NPTE9SIiwiREVGQVVMVF9ERVBUSCIsIkRFRkFVTFRfU1RFTkNJTCIsIkRFRkFVTFRfTUFTSyIsInBhcnNlTWFzayIsInBhcnNlQ29uZmlnIiwib3B0aW9uIiwiQ2xlYXJDb21wb25lbnQiLCJjb25maWciLCJyZW5kZXJGcmFtZUxpc3RlbmVyIiwib24iLCJzcHJpdGVMaWJyYXJ5IiwiU0lNUExFIiwic2ltcGxlIiwicG9zMmQiLCJwb3NaIiwidXYiLCJzZXRUZXhDb29yZHNCeVZpZXdwb3J0IiwidGV4dHVyZVdpZHRoIiwidGV4dHVyZUhlaWdodCIsInJlcGVhdCIsInNldFRleENvb3JkcyIsIm1pblMiLCJtaW5UIiwibWF4UyIsIm1heFQiLCJoYWxmV2lkdGgiLCJzZXRQb3MyZCIsIngzIiwieTIiLCJyb3RhdGVEZWdyZWUiLCJyb3RhdGUiLCJkZWdyZWUiLCJ6MCIsInoxIiwiejIiLCJ6MyIsImZ1bmNOYW1lIiwicmV0IiwicmVzIiwibTAwIiwibTAxIiwibTAyIiwibTAzIiwibTEwIiwibTExIiwibTEyIiwibTEzIiwibTIwIiwibTIxIiwibTIyIiwibTIzIiwibTMwIiwibTMxIiwibTMyIiwibTMzIiwiYXMiLCJ0b1N0ciIsIm51bWJlciIsIm1hdGNoIiwiaXNOdW1iZXIiLCJzdWIiLCJhZGQiLCJwdWJsaWNBcGkiLCJjdXN0b21FbGVtZW50cyIsIndoZW5EZWZpbmVkIiwiZGVmaW5lQ3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJDYW52YXNFbGVtZW50IiwiYW5pbWF0aW9uRnJhbWVSZXF1ZXN0SWQiLCJhbmltYXRpb25GcmFtZVJlcXVlc3RJc1N0b3BwZWQiLCJfd2ViR2xSZW5kZXJlciIsInN0YXJ0QW5pbWF0aW9uIiwic3RvcEFuaW1hdGlvbiIsImNhbnZhc0NvbnRleHRBdHRyaWJ1dGVzIiwiY3JlYXRlQ2FudmFzQ29udGV4dEF0dHJpYnV0ZXMiLCJjcmVhdGVXZWJHbENvbnRleHQiLCJzdHJpbmdpZnkiLCJ0b0xvd2VyQ2FzZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87QUNWQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7a0JDM0RlLFVBQVVBLEdB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OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUzs7QUFFVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCO0FBQ3hDO0FBQ0EsMkJBQTJCLHVCQUF1QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7O0FBRTFCO0FBQ0E7QUFDQSx1QkFBdUIsOEJBQThCO0FBQ3JEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7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QUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsTUFBTTtBQUNqQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLEtBQUs7QUFDZixVQUFVLEtBQUs7QUFDZjtBQUNBLFlBQVksS0FBSztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVSxLQUFLO0FBQ2YsVUFBVSxLQUFLO0FBQ2Y7QUFDQSxZQUFZLEtBQUs7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUFBO0FBQUE7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDNXZCQTtBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFBQTtBQUFBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUFBO0FBQUE7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQUE7QUFBQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFBQTtBQUFBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUFBO0FBQUE7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQUE7QUFBQTs7QUFFQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFBQTtBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsbUJBQW1CLE9BQU87QUFDMUIsb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdndCRDtBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FB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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUFBO0FBQUE7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoYkE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsTUFBTTtBQUNqQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEtBQUs7QUFDakIsWUFBWSxLQUFLO0FBQ2pCLFlBQVksS0FBSztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCLFlBQVksS0FBSztBQUNqQixZQUFZLEtBQUs7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixZQUFZLEtBQUs7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsTUFBTTtBQUNqQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCO0FBQ0EsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcs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O0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsS0FBSztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxLQUFLO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEs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QUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQy9CQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDL0JBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQzs7QUFFcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDOUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDcENBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztB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RUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7O0FBRUEsNkJBQTZCLG1CQUFtQjs7QUFFaEQ7O0FBRUE7O0FBRUE7QUFDQTs7Ozs7Ozs7QUM1V0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFdBQVcsRUFBRTtBQUNyRCx3Q0FBd0MsV0FBVyxFQUFFOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLHNDQUFzQztBQUN0QyxHQUFHO0FBQ0g7QUFDQSw4REFBOEQ7QUFDOUQ7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBIiwiZmlsZSI6ImJsaXRwdW5rLXNhZmFyaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkJMSVRQVU5LXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkJMSVRQVU5LXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDc1KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA3NzRhOGRkN2QxYWUwNzVkNDUwZSIsImNvbnN0IGV2ZW50aXplID0gcmVxdWlyZSgnQHNwZWFyd29sZi9ldmVudGl6ZScpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSByZXR1cm5cbiAgaWYgKG9iai5kZXN0cm95ZWQpIHJldHVyblxuXG4gIGlmIChldmVudGl6ZS5pcyhvYmopICYmIHR5cGVvZiBvYmoub2ZmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVE9ETyBldmVudGl6ZS5kZXN0cm95KG9iailcbiAgICBvYmoub2ZmKClcbiAgfVxuXG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4ge1xuICAgIGRlbGV0ZSBvYmpba2V5XVxuICB9KVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdkZXN0cm95ZWQnLCB7IHZhbHVlOiB0cnVlIH0pXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvdXRpbHMvZGVzdHJveS5qcyIsIi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG5cbi8qKlxuICogQ29tbW9uIHV0aWxpdGllc1xuICogQG1vZHVsZSBnbE1hdHJpeFxuICovXG5cbi8vIENvbmZpZ3VyYXRpb24gQ29uc3RhbnRzXG5leHBvcnQgY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuZXhwb3J0IGxldCBBUlJBWV9UWVBFID0gKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKSA/IEZsb2F0MzJBcnJheSA6IEFycmF5O1xuZXhwb3J0IGNvbnN0IFJBTkRPTSA9IE1hdGgucmFuZG9tO1xuXG4vKipcbiAqIFNldHMgdGhlIHR5cGUgb2YgYXJyYXkgdXNlZCB3aGVuIGNyZWF0aW5nIG5ldyB2ZWN0b3JzIGFuZCBtYXRyaWNlc1xuICpcbiAqIEBwYXJhbSB7VHlwZX0gdHlwZSBBcnJheSB0eXBlLCBzdWNoIGFzIEZsb2F0MzJBcnJheSBvciBBcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TWF0cml4QXJyYXlUeXBlKHR5cGUpIHtcbiAgQVJSQVlfVFlQRSA9IHR5cGU7XG59XG5cbmNvbnN0IGRlZ3JlZSA9IE1hdGguUEkgLyAxODA7XG5cbi8qKlxuICogQ29udmVydCBEZWdyZWUgVG8gUmFkaWFuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGEgQW5nbGUgaW4gRGVncmVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdG9SYWRpYW4oYSkge1xuICByZXR1cm4gYSAqIGRlZ3JlZTtcbn1cblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnRzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSB2YWx1ZSwgd2l0aGluIGFuIGFic29sdXRlXG4gKiBvciByZWxhdGl2ZSB0b2xlcmFuY2Ugb2YgZ2xNYXRyaXguRVBTSUxPTiAoYW4gYWJzb2x1dGUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIHZhbHVlcyBsZXNzXG4gKiB0aGFuIG9yIGVxdWFsIHRvIDEuMCwgYW5kIGEgcmVsYXRpdmUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIGxhcmdlciB2YWx1ZXMpXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGEgVGhlIGZpcnN0IG51bWJlciB0byB0ZXN0LlxuICogQHBhcmFtIHtOdW1iZXJ9IGIgVGhlIHNlY29uZCBudW1iZXIgdG8gdGVzdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBudW1iZXJzIGFyZSBhcHByb3hpbWF0ZWx5IGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDw9IEVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L3NyYy9nbC1tYXRyaXgvY29tbW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tlbGVrdGl2L25vZGUtdXVpZFxuLyoqIEBwcml2YXRlICovXG5jb25zdCB1dWlkID0gcmVxdWlyZSgndXVpZC92NCcpXG5cbmV4cG9ydCBkZWZhdWx0IHV1aWRcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay91dGlscy9nZW5lcmF0ZV91dWlkLmpzIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogR2VuZXJpYyBjb250YWluZXIgZm9yIHNoYWRlciB2YXJpYWJsZXMuIGVnLiB1bmlmb3JtLCB2ZXJ0ZXggYXR0cmlidXRlcywgdGV4dHVyZXMgLi5cbiAqIEBkZXNjXG4gKiBFYWNoIHRpbWUgeW91IGNoYW5nZSB0aGUgdmFsdWUsIGEgc2VyaWFsIG51bWJlciB3aWxsIGJlIGluY3JlYXNlZC5cbiAqIFVzZSBgLnRvdWNoKClgIGlmIHlvdSB3YW50IHRvIGluY3JlYXNlIHRoZSBzZXJpYWwgbnVtYmVyIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHZhbHVlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJWYXJpYWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IHZhbHVlXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobmFtZSwgdHlwZSwgdmFsdWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWVcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZXJpYWwgbnVtYmVyIGluY3JlYXNlcyBlYWNoIHRpbWUgeW91IGNoYW5nZSB0aGUgdmFsdWUuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnNlcmlhbCA9IDBcbiAgfVxuXG4gIGdldCB2YWx1ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlXG4gIH1cblxuICBzZXQgdmFsdWUgKHZhbCkge1xuICAgIGlmICh0aGlzLl92YWx1ZSAhPT0gdmFsKSB7XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbFxuICAgICAgKyt0aGlzLnNlcmlhbFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZWFzZSBzZXJpYWwgbnVtYmVyLlxuICAgKi9cbiAgdG91Y2ggKCkge1xuICAgICsrdGhpcy5zZXJpYWxcbiAgfVxufVxuXG5TaGFkZXJWYXJpYWJsZS5UWVBFID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFVOSUZPUk06ICd1bmlmb3JtJyxcbiAgQVRUUklCOiAnYXR0cmliJyxcbiAgVEVYVFVSRV8yRDogJ3RleDJkJ1xufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3NoYWRlcl92YXJpYWJsZS5qcyIsImltcG9ydCBnZW5lcmF0ZVV1aWQgZnJvbSAnLi9nZW5lcmF0ZV91dWlkJ1xuaW1wb3J0IFNlcmlhbCBmcm9tICcuL3NlcmlhbCdcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmVzb3VyY2UgcmVmZXJlbmNlIHdoaWNoIHBvaW50cyB0byBhICpyZW5kZXJhYmxlIHJlc291cmNlKi5cbiAqIEV2ZXJ5IHJlc291cmNlIGhhcyBhbiBpZCwgc2VyaWFsIGFuZCBwb3NzaWJsZSByZXNvdXJjZSBhbGxvY2F0aW9uICpoaW50cyouXG4gKiBUaGUgcmVzb3VyY2UgcmVmZXJlbmNlIHdpbGwgYmUgdXNlZCBieSB0aGUgcmVzb3VyY2UgbGlicmFyeSB0byBmaW5kIG9yXG4gKiBjcmVhdGUgKnJlbmRlcmFibGUgcmVzb3VyY2VzKiAobGlrZSBXZWJHbEJ1ZmZlciwgV2ViR2xUZXh0dXJlLCAuLikuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc291cmNlUmVmIHtcbiAgY29uc3RydWN0b3IgKHJlc291cmNlLCBoaW50cyA9IHt9KSB7XG4gICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlXG4gICAgdGhpcy5oaW50cyA9IGhpbnRzXG4gICAgdGhpcy5pZCA9IGhpbnRzLmlkIHx8IGdlbmVyYXRlVXVpZCgpXG4gICAgdGhpcy5zZXJpYWwgPSBuZXcgU2VyaWFsKHR5cGVvZiBoaW50cy5zZXJpYWwgPT09ICdudW1iZXInID8gaGludHMuc2VyaWFsIDogMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jlc291cmNlUmVmfSBzb3VyY2VSZWZcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc1N5bmNlZCAoc291cmNlUmVmKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5zZXJpYWxcbiAgICByZXR1cm4gdmFsdWUgPiAwICYmIHZhbHVlID09PSBzb3VyY2VSZWYuc2VyaWFsLnZhbHVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtSZXNvdXJjZVJlZn0gc291cmNlUmVmXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgbmVlZFN5bmMgKHNvdXJjZVJlZikge1xuICAgIHJldHVybiAhdGhpcy5pc1N5bmNlZChzb3VyY2VSZWYpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtSZXNvdXJjZVJlZn0gc291cmNlUmVmXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiXG4gICAqL1xuICBzeW5jIChzb3VyY2VSZWYsIGNiKSB7XG4gICAgaWYgKHRoaXMubmVlZFN5bmMoc291cmNlUmVmKSkge1xuICAgICAgY2IodGhpcy5yZXNvdXJjZSlcbiAgICAgIHRoaXMuc2VyaWFsLnZhbHVlID0gc291cmNlUmVmLnNlcmlhbC52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3V0aWxzL3Jlc291cmNlX3JlZi5qcyIsIlxuLyoqIEBwcml2YXRlICovXG5jb25zdCBCWVRFU19QRVJfRUxFTUVOVCA9IE9iamVjdC5mcmVlemUoe1xuICBmbG9hdDMyOiA0LFxuICBpbnQxNjogMixcbiAgaW50MzI6IDQsXG4gIGludDg6IDEsXG4gIHVpbnQxNjogMixcbiAgdWludDMyOiA0LFxuICB1aW50ODogMVxufSlcblxuLyoqIEBwcml2YXRlICovXG5jb25zdCBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiA9IE9iamVjdC5mcmVlemUoe1xuICBmbG9hdDMyOiBGbG9hdDMyQXJyYXksXG4gIGludDE2OiBJbnQxNkFycmF5LFxuICBpbnQzMjogSW50MzJBcnJheSxcbiAgaW50ODogSW50OEFycmF5LFxuICB1aW50MTY6IFVpbnQxNkFycmF5LFxuICB1aW50MzI6IFVpbnQzMkFycmF5LFxuICB1aW50ODogVWludDhBcnJheVxufSlcblxuLyoqIEBwcml2YXRlICovXG5jb25zdCBUWVBFRF9BUlJBWV9HRVRURVIgPSBPYmplY3QuZnJlZXplKHtcbiAgZmxvYXQzMjogKG9iaikgPT4gb2JqLmZsb2F0MzJBcnJheSxcbiAgaW50MzI6IChvYmopID0+IG9iai5pbnQzMkFycmF5LFxuICBpbnQxNjogKG9iaikgPT4gb2JqLmludDE2QXJyYXksXG4gIGludDg6IChvYmopID0+IG9iai5pbnQ4QXJyYXksXG4gIHVpbnQzMjogKG9iaikgPT4gb2JqLnVpbnQzMkFycmF5LFxuICB1aW50MTY6IChvYmopID0+IG9iai51aW50MTZBcnJheSxcbiAgdWludDg6IChvYmopID0+IG9iai51aW50OEFycmF5XG59KVxuXG4vKiogQHByaXZhdGUgKi9cbmNvbnN0IEdMX0lURU1fVFlQRVMgPSBPYmplY3QuZnJlZXplKHtcbiAgZmxvYXQzMjogJ0ZMT0FUJyxcbiAgaW50MTY6ICdTSE9SVCcsXG4gIGludDMyOiAnSU5UJyxcbiAgaW50ODogJ0JZVEUnLFxuICB1aW50MTY6ICdVTlNJR05FRF9TSE9SVCcsXG4gIHVpbnQzMjogJ1VOU0lHTkVEX0lOVCcsXG4gIHVpbnQ4OiAnVU5TSUdORURfQllURSdcbn0pXG5cbmV4cG9ydCB7XG4gIEJZVEVTX1BFUl9FTEVNRU5ULFxuICBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUixcbiAgVFlQRURfQVJSQVlfR0VUVEVSLFxuICBHTF9JVEVNX1RZUEVTXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvdXRpbHMvdHlwZWRfYXJyYXlfaGVscGVycy5qcyIsImltcG9ydCBSZXNvdXJjZVJlZiBmcm9tICcuLi91dGlscy9yZXNvdXJjZV9yZWYnXG5cbmltcG9ydCB7IEJZVEVTX1BFUl9FTEVNRU5ULCBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiB9IGZyb20gJy4uL3V0aWxzL3R5cGVkX2FycmF5X2hlbHBlcnMnXG5cbi8qKlxuICogVmVydGV4IE9iamVjdCBBcnJheVxuICpcbiAqIEBjbGFzcyBWT0FycmF5XG4gKlxuICogQHBhcmFtIHtWT0Rlc2NyaXB0b3J9IGRlc2NyaXB0b3IgLSAqVmVydGV4IG9iamVjdCogZGVzY3JpcHRvclxuICogQHBhcmFtIHtudW1iZXJ9IGNhcGFjaXR5IC0gTWF4aW11bSBudW1iZXIgb2YgKnZlcnRleCBvYmplY3RzKlxuICogQHBhcmFtIHs/QXJyYXlCdWZmZXJ8RGF0YVZpZXd8RmxvYXQzMkFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VzYWdlPVZPQXJyYXkuVVNBR0UuRFlOQU1JQ10gdXNhZ2UgaGludFxuICogQHBhcmFtIHtib29sZWFufSBbYXV0b3RvdWNoXSBhdXRvdG91Y2hcbiAqXG4gKiBAZGVzY1xuICogQW4gYXJyYXkgb2YgKnZlcnRleCBvYmplY3RzKi5cbiAqIEhhcyBhIG1heGltdW0gY2FwYWNpdHkgYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSAqdmVydGV4IG9iamVjdCBkZXNjcmlwdG9yKi5cbiAqXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVk9BcnJheSB7XG4gIGNvbnN0cnVjdG9yIChkZXNjcmlwdG9yLCBjYXBhY2l0eSwgZGF0YSwgdXNhZ2UgPSBWT0FycmF5LlVTQUdFLkRZTkFNSUMsIGF1dG90b3VjaCA9IHVuZGVmaW5lZCkge1xuICAgIC8qKiBAdHlwZSB7UmVzb3VyY2VSZWZ9ICovXG4gICAgdGhpcy5yZXNvdXJjZVJlZiA9IG5ldyBSZXNvdXJjZVJlZih0aGlzLCB7IHVzYWdlIH0pXG5cbiAgICAvKiogQHR5cGUge1ZPRGVzY3JpcHRvcn0gKi9cbiAgICB0aGlzLmRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5jYXBhY2l0eSA9IGNhcGFjaXR5XG5cbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICB0aGlzLmZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSlcbiAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRhVmlldykge1xuICAgICAgdGhpcy5mbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCAvIDQpXG4gICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7XG4gICAgICB0aGlzLmZsb2F0MzJBcnJheSA9IGRhdGFcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG5ldyBBcnJheUJ1ZmZlcihjYXBhY2l0eSAqIGRlc2NyaXB0b3IuYnl0ZXNQZXJWTykpXG4gICAgfVxuXG4gICAgLy8gbmVlZGVkIGJ5IFdlYkdsUmVuZGVyZXIjc3luY0J1ZmZlclxuICAgIHRoaXMucmVzb3VyY2VSZWYuaGludHMudHlwZWRBcnJheSA9IHRoaXMuZmxvYXQzMkFycmF5XG5cbiAgICBjb25zdCB7IGJ1ZmZlciwgYnVmZmVyQnl0ZU9mZnNldCwgYnVmZmVyQnl0ZUxlbmd0aCB9ID0gdGhpc1xuICAgIGRlc2NyaXB0b3IudHlwZUxpc3QuZmlsdGVyKHR5cGUgPT4gdHlwZSAhPT0gJ2Zsb2F0MzInKS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgdGhpc1tgJHt0eXBlfUFycmF5YF0gPSBuZXcgKFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SW3R5cGVdKShidWZmZXIsIGJ1ZmZlckJ5dGVPZmZzZXQsIGJ1ZmZlckJ5dGVMZW5ndGggLyBCWVRFU19QRVJfRUxFTUVOVFt0eXBlXSlcbiAgICB9KVxuXG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHRoaXMuZW5hYmxlQXV0b3RvdWNoID0gdHlwZW9mIGF1dG90b3VjaCA9PT0gJ2Jvb2xlYW4nID8gYXV0b3RvdWNoIDogdXNhZ2UgPT09IFZPQXJyYXkuVVNBR0UuRFlOQU1JQ1xuXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIGluY3JlYXNlIHNlcmlhbCB2YWx1ZSBmcm9tIHJlc291cmNlIHJlZmVyZW5jZVxuICAgKi9cbiAgdG91Y2ggKCkge1xuICAgIHRoaXMucmVzb3VyY2VSZWYuc2VyaWFsLnRvdWNoKClcbiAgfVxuXG4gIC8qKiBAdHlwZSB7QXJyYXlCdWZmZXJ9ICovXG4gIGdldCBidWZmZXIgKCkge1xuICAgIHJldHVybiB0aGlzLmZsb2F0MzJBcnJheS5idWZmZXJcbiAgfVxuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBnZXQgYnVmZmVyQnl0ZU9mZnNldCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmxvYXQzMkFycmF5LmJ5dGVPZmZzZXRcbiAgfVxuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBnZXQgYnVmZmVyQnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmxvYXQzMkFycmF5LmJ5dGVMZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3B5ICoqYWxsKiogKnZlcnRleCBvYmplY3QqIGRhdGEgZnJvbSBhbiBleHRlcm5hbCB2ZXJ0ZXggYXJyYXkgdG8gdGhlIGludGVybmFsIGFycmF5XG4gICAqIEBwYXJhbSB7Vk9BcnJheX0gZnJvbVZPQXJyYXkgLSBUaGUgc291cmNlIHZlcnRleCBhcnJheVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RvT2Zmc2V0PTBdIC0gKlZlcnRleCBvYmplY3QqIG9mZnNldCBmb3IgdGhlIGludGVybmFsIHZlcnRleCBhcnJheVxuICAgKi9cbiAgY29weSAoZnJvbVZPQXJyYXksIHRvT2Zmc2V0KSB7XG4gICAgbGV0IG9mZnNldCA9IDBcblxuICAgIGlmICh0b09mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvZmZzZXQgPSB0b09mZnNldCAqICh0aGlzLmRlc2NyaXB0b3IuYnl0ZXNQZXJWTyA+PiAyKVxuICAgIH1cblxuICAgIHRoaXMuZmxvYXQzMkFycmF5LnNldChmcm9tVk9BcnJheS5mbG9hdDMyQXJyYXksIG9mZnNldClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBWT0FycmF5ICpzdWIqIGFycmF5XG4gICAqIEBkZXNjXG4gICAqIFRoaXMgd2lsbCAqKm5vdCoqICpjb3B5KiB0aGUgaW50ZXJuYWwgdmVydGV4IGRhdGEgLSB0aGlzIHdpbGwgY3JlYXRlIGEgbmV3IHZpZXcgaW50byB0aGUgaW50ZXJuYWwgYnVmZmVyLlxuICAgKiBCb3RoICh0aGUgbmV3IFZPQXJyYXkgYW5kIHRoZSBjdXJyZW50IG9uZSkgd2lsbCBzaGFyZSB0aGVcbiAgICogc2FtZSBtZW1vcnkgYnVmZmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYmVnaW4gLSBJbmRleCBvZiBmaXJzdCB2ZXJ0ZXggb2JqZWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXVxuICAgKiBAcmV0dXJuIHtWT0FycmF5fVxuICAgKi9cbiAgc3ViYXJyYXkgKGJlZ2luLCBzaXplID0gMSkge1xuICAgIHJldHVybiBuZXcgVk9BcnJheSh0aGlzLmRlc2NyaXB0b3IsIHNpemUsXG4gICAgICBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIsXG4gICAgICAgICh0aGlzLmJ1ZmZlckJ5dGVPZmZzZXQgKyAoYmVnaW4gKiB0aGlzLmRlc2NyaXB0b3IuYnl0ZXNQZXJWTykpLFxuICAgICAgICBzaXplICogdGhpcy5kZXNjcmlwdG9yLmJ5dGVzUGVyVk8pKVxuICB9XG59XG5cblZPQXJyYXkuVVNBR0UgPSBPYmplY3QuZnJlZXplKHtcbiAgU1RBVElDOiAnc3RhdGljJyxcbiAgRFlOQU1JQzogJ2R5bmFtaWMnXG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvdl9vX2FycmF5LmpzIiwiaW1wb3J0IHsgQllURVNfUEVSX0VMRU1FTlQsIFRZUEVEX0FSUkFZX0dFVFRFUiB9IGZyb20gJy4uL3V0aWxzL3R5cGVkX2FycmF5X2hlbHBlcnMnXG5cbi8qKlxuICogVmVydGV4IG9iamVjdCAqYXR0cmlidXRlKiBkZXNjcmlwdG9yLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWT0F0dHJEZXNjcmlwdG9yIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0XSAtIGVpdGhlciBgb2Zmc2V0YCBvciBgYnl0ZU9mZnNldGAgbXVzdCBiZSBzcGVjaWZpZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtieXRlT2Zmc2V0XSAtIGVpdGhlciBgb2Zmc2V0YCBvciBgYnl0ZU9mZnNldGAgbXVzdCBiZSBzcGVjaWZpZWRcbiAgICogQHBhcmFtIHtib29sZWFufSB1bmlmb3JtXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFthdHRyTmFtZXNdXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobmFtZSwgdHlwZSwgc2l6ZSwgb2Zmc2V0LCBieXRlT2Zmc2V0LCB1bmlmb3JtLCBhdHRyTmFtZXMpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMuc2l6ZSA9IHNpemVcbiAgICB0aGlzLnVuaWZvcm0gPSB1bmlmb3JtXG4gICAgdGhpcy5hdHRyTmFtZXMgPSBhdHRyTmFtZXNcblxuICAgIHRoaXMuYnl0ZXNQZXJFbGVtZW50ID0gQllURVNfUEVSX0VMRU1FTlRbIHRoaXMudHlwZSBdXG4gICAgdGhpcy5ieXRlc1BlclZlcnRleCA9IHRoaXMuYnl0ZXNQZXJFbGVtZW50ICogc2l6ZVxuXG4gICAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0ICogdGhpcy5ieXRlc1BlckVsZW1lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gYnl0ZU9mZnNldFxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5vZmZzZXQgPSBieXRlT2Zmc2V0IC8gdGhpcy5ieXRlc1BlckVsZW1lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTnVtYmVyIG9mIGF0dHJpYnV0ZXMgcGVyIHZlcnRleFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgdmVydGV4QXR0ckNvdW50IChkZXNjcmlwdG9yKSB7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IuYnl0ZXNQZXJWZXJ0ZXggLyB0aGlzLmJ5dGVzUGVyRWxlbWVudFxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgZGVmaW5lUHJvcGVydGllcyAoYXR0ckRlc2MsIHByb3BlcnRpZXNPYmplY3QsIGRlc2NyaXB0b3IpIHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IGF0dHJEZXNjXG4gICAgY29uc3QgZ2V0QXJyYXkgPSBUWVBFRF9BUlJBWV9HRVRURVJbYXR0ckRlc2MudHlwZV1cbiAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IGRlc2NyaXB0b3IudmVydGV4Q291bnRcbiAgICBjb25zdCB2ZXJ0ZXhBdHRyQ291bnQgPSBhdHRyRGVzYy52ZXJ0ZXhBdHRyQ291bnQoZGVzY3JpcHRvcilcbiAgICBjb25zdCBvZmZzZXQgPSBhdHRyRGVzYy5ieXRlT2Zmc2V0IC8gYXR0ckRlc2MuYnl0ZXNQZXJFbGVtZW50XG5cbiAgICBsZXQgaSwgalxuXG4gICAgaWYgKGF0dHJEZXNjLnNpemUgPT09IDEpIHtcbiAgICAgIGlmIChhdHRyRGVzYy51bmlmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlR2V0dGVyID0gZ2V0VjF1KGdldEFycmF5LCBvZmZzZXQpXG4gICAgICAgIGNvbnN0IHZhbHVlU2V0dGVyID0gc2V0VjF1KGdldEFycmF5LCB2ZXJ0ZXhDb3VudCwgdmVydGV4QXR0ckNvdW50LCBvZmZzZXQpXG5cbiAgICAgICAgYXR0ckRlc2MuZ2V0VmFsdWUgPSAodm8pID0+IHZhbHVlR2V0dGVyLmNhbGwodm8pXG4gICAgICAgIGF0dHJEZXNjLnNldFZhbHVlID0gKHZvLCBhcmcpID0+IHZhbHVlU2V0dGVyLmNhbGwodm8sIGFyZylcblxuICAgICAgICBwcm9wZXJ0aWVzT2JqZWN0WyBuYW1lIF0gPSB7XG4gICAgICAgICAgZ2V0OiB2YWx1ZUdldHRlcixcbiAgICAgICAgICBzZXQ6IHZhbHVlU2V0dGVyLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsdWVTZXR0ZXIgPSBzZXRWTnYoZ2V0QXJyYXksIDEsIHZlcnRleENvdW50LCB2ZXJ0ZXhBdHRyQ291bnQsIG9mZnNldClcblxuICAgICAgICBhdHRyRGVzYy5zZXRWYWx1ZSA9ICh2bywgYXJncykgPT4gdmFsdWVTZXR0ZXIuYXBwbHkodm8sIGFyZ3MpXG5cbiAgICAgICAgcHJvcGVydGllc09iamVjdFsgJ3NldCcgKyBjYW1lbGl6ZShuYW1lKSBdID0ge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZVNldHRlcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWx1ZUdldHRlcnMgPSBbXVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBkZXNjcmlwdG9yLnZlcnRleENvdW50OyArK2kpIHtcbiAgICAgICAgICBjb25zdCBjdXJWYWx1ZUdldHRlciA9IGdldFYxdShnZXRBcnJheSwgb2Zmc2V0ICsgKGkgKiB2ZXJ0ZXhBdHRyQ291bnQpKVxuXG4gICAgICAgICAgdmFsdWVHZXR0ZXJzLnB1c2goY3VyVmFsdWVHZXR0ZXIpXG5cbiAgICAgICAgICBwcm9wZXJ0aWVzT2JqZWN0WyBuYW1lICsgaSBdID0ge1xuXG4gICAgICAgICAgICBnZXQ6IGN1clZhbHVlR2V0dGVyLFxuICAgICAgICAgICAgc2V0OiBzZXRWTnYoZ2V0QXJyYXksIDEsIDEsIDAsIG9mZnNldCArIChpICogdmVydGV4QXR0ckNvdW50KSksXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhdHRyRGVzYy5nZXRWYWx1ZSA9IGZ1bmN0aW9uICh2bywgdmkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWVHZXR0ZXJzW3ZpXS5jYWxsKHZvKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhdHRyRGVzYy5zaXplID49IDIpIHtcbiAgICAgIGlmIChhdHRyRGVzYy51bmlmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlR2V0dGVyID0gZ2V0Vk51KGdldEFycmF5LCBvZmZzZXQpXG4gICAgICAgIGNvbnN0IHZhbHVlU2V0dGVyID0gc2V0Vk51KGdldEFycmF5LCBhdHRyRGVzYy5zaXplLCB2ZXJ0ZXhDb3VudCwgdmVydGV4QXR0ckNvdW50LCBvZmZzZXQpXG5cbiAgICAgICAgYXR0ckRlc2MuZ2V0VmFsdWUgPSAodm8sIHZpLCBpZHgpID0+IHZhbHVlR2V0dGVyLmNhbGwodm8sIGlkeClcbiAgICAgICAgYXR0ckRlc2Muc2V0VmFsdWUgPSAodm8sIGFyZ3MpID0+IHZhbHVlU2V0dGVyLmFwcGx5KHZvLCBhcmdzKVxuXG4gICAgICAgIHByb3BlcnRpZXNPYmplY3RbICdnZXQnICsgY2FtZWxpemUobmFtZSkgXSA9IHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVHZXR0ZXIsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvcGVydGllc09iamVjdFsgJ3NldCcgKyBjYW1lbGl6ZShuYW1lKSBdID0ge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZVNldHRlcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXR0ckRlc2Muc2l6ZTsgKytpKSB7XG4gICAgICAgICAgY29uc3Qgc2V0dGVyTmFtZSA9IGF0dHJQb3N0Zml4KGF0dHJEZXNjLCBuYW1lLCBpKVxuXG4gICAgICAgICAgcHJvcGVydGllc09iamVjdFsgc2V0dGVyTmFtZSBdID0ge1xuXG4gICAgICAgICAgICBnZXQ6IGdldFYxdShnZXRBcnJheSwgb2Zmc2V0ICsgaSksXG4gICAgICAgICAgICBzZXQ6IHNldFYxdShnZXRBcnJheSwgdmVydGV4Q291bnQsIHZlcnRleEF0dHJDb3VudCwgb2Zmc2V0ICsgaSksXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHZhbHVlU2V0dGVyID0gc2V0Vk52KGdldEFycmF5LCBhdHRyRGVzYy5zaXplLCB2ZXJ0ZXhDb3VudCwgdmVydGV4QXR0ckNvdW50LCBvZmZzZXQpXG5cbiAgICAgICAgYXR0ckRlc2Muc2V0VmFsdWUgPSAodm8sIGFyZ3MpID0+IHZhbHVlU2V0dGVyLmFwcGx5KHZvLCBhcmdzKVxuXG4gICAgICAgIHByb3BlcnRpZXNPYmplY3RbICdzZXQnICsgY2FtZWxpemUobmFtZSkgXSA9IHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVTZXR0ZXIsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsdWVHZXR0ZXJzID0gW11cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVzY3JpcHRvci52ZXJ0ZXhDb3VudDsgKytpKSB7XG4gICAgICAgICAgY29uc3QgY3VyVmVydGV4VmFsdWVHZXR0ZXJzID0gW11cblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBhdHRyRGVzYy5zaXplOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IHNldHRlck5hbWUgPSBhdHRyUG9zdGZpeChhdHRyRGVzYywgbmFtZSwgaikgKyBpXG4gICAgICAgICAgICBjb25zdCBjdXJWYWx1ZUdldHRlciA9IGdldFYxdShnZXRBcnJheSwgb2Zmc2V0ICsgKGkgKiB2ZXJ0ZXhBdHRyQ291bnQpICsgailcblxuICAgICAgICAgICAgY3VyVmVydGV4VmFsdWVHZXR0ZXJzLnB1c2goY3VyVmFsdWVHZXR0ZXIpXG5cbiAgICAgICAgICAgIHByb3BlcnRpZXNPYmplY3RbIHNldHRlck5hbWUgXSA9IHtcblxuICAgICAgICAgICAgICBnZXQ6IGN1clZhbHVlR2V0dGVyLFxuICAgICAgICAgICAgICBzZXQ6IHNldFZOdihnZXRBcnJheSwgMSwgMSwgMCwgb2Zmc2V0ICsgKGkgKiB2ZXJ0ZXhBdHRyQ291bnQpICsgaiksXG4gICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbHVlR2V0dGVycy5wdXNoKGN1clZlcnRleFZhbHVlR2V0dGVycylcbiAgICAgICAgfVxuXG4gICAgICAgIGF0dHJEZXNjLmdldFZhbHVlID0gZnVuY3Rpb24gKHZvLCB2aSwgaWR4KSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlR2V0dGVyc1t2aV1baWR4XS5jYWxsKHZvKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gYXR0clBvc3RmaXggKGF0dHJEZXNjLCBuYW1lLCBpbmRleCkge1xuICBpZiAoYXR0ckRlc2MuYXR0ck5hbWVzKSB7XG4gICAgbGV0IHBvc3RmaXggPSBhdHRyRGVzYy5hdHRyTmFtZXNbIGluZGV4IF1cblxuICAgIGlmIChwb3N0Zml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwb3N0Zml4XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnXycgKyBpbmRleFxufVxuXG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIGdldFZOdSAoZ2V0QXJyYXksIG9mZnNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGF0dHJJbmRleCkge1xuICAgIHJldHVybiBnZXRBcnJheSh0aGlzLnZvQXJyYXkpWyBvZmZzZXQgKyBhdHRySW5kZXggXVxuICB9XG59XG5cbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gc2V0Vk51IChnZXRBcnJheSwgdmVjdG9yTGVuZ3RoLCB2ZXJ0ZXhDb3VudCwgdmVydGV4QXR0ckNvdW50LCBvZmZzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBfYXJyYXkgPSBnZXRBcnJheSh0aGlzLnZvQXJyYXkpXG4gICAgbGV0IGlcbiAgICBsZXQgblxuXG4gICAgZm9yIChpID0gMDsgaSA8IHZlcnRleENvdW50OyArK2kpIHtcbiAgICAgIGZvciAobiA9IDA7IG4gPCB2ZWN0b3JMZW5ndGg7ICsrbikge1xuICAgICAgICBfYXJyYXlbIChpICogdmVydGV4QXR0ckNvdW50KSArIG9mZnNldCArIG4gXSA9IGFyZ3VtZW50c1tuXVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIGdldFYxdSAoZ2V0QXJyYXksIG9mZnNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRBcnJheSh0aGlzLnZvQXJyYXkpWyBvZmZzZXQgXVxuICB9XG59XG5cbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gc2V0Vk52IChnZXRBcnJheSwgdmVjdG9yTGVuZ3RoLCB2ZXJ0ZXhDb3VudCwgdmVydGV4QXR0ckNvdW50LCBvZmZzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBfYXJyYXkgPSBnZXRBcnJheSh0aGlzLnZvQXJyYXkpXG4gICAgbGV0IGlcbiAgICBsZXQgblxuXG4gICAgZm9yIChpID0gMDsgaSA8IHZlcnRleENvdW50OyArK2kpIHtcbiAgICAgIGZvciAobiA9IDA7IG4gPCB2ZWN0b3JMZW5ndGg7ICsrbikge1xuICAgICAgICBfYXJyYXlbKGkgKiB2ZXJ0ZXhBdHRyQ291bnQpICsgb2Zmc2V0ICsgbl0gPSBhcmd1bWVudHNbKGkgKiB2ZWN0b3JMZW5ndGgpICsgbl1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqIEBwcml2YXRlICovXG5mdW5jdGlvbiBzZXRWMXUgKGdldEFycmF5LCB2ZXJ0ZXhDb3VudCwgdmVydGV4QXR0ckNvdW50LCBvZmZzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGNvbnN0IF9hcnJheSA9IGdldEFycmF5KHRoaXMudm9BcnJheSlcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7ICsraSkge1xuICAgICAgX2FycmF5WyAoaSAqIHZlcnRleEF0dHJDb3VudCkgKyBvZmZzZXQgXSA9IHZhbHVlXG4gICAgfVxuICB9XG59XG5cbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gY2FtZWxpemUgKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSlcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3Zfb19hdHRyX2Rlc2NyaXB0b3IuanMiLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG4vKipcbiAqIEdyb3VwIG9mIHNoYWRlciB2YXJpYWJsZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYWRlclZhcmlhYmxlR3JvdXAge1xuICAvKipcbiAgKiBAcGFyYW0ge0FycmF5PFNoYWRlclZhcmlhYmxlfFNoYWRlclZhcmlhYmxlQWxpYXM+fSBzaGFkZXJWYXJzXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoc2hhZGVyVmFycykge1xuICAgIHRoaXMuc2hhZGVyVmFycyA9IHNoYWRlclZhcnNcbiAgfVxuXG4gIHB1c2hWYXIgKHNoYWRlckNvbnRleHQpIHtcbiAgICB0aGlzLnNoYWRlclZhcnMuZm9yRWFjaChzaGFkZXJDb250ZXh0LnB1c2hWYXIuYmluZChzaGFkZXJDb250ZXh0KSlcbiAgfVxuXG4gIHBvcFZhciAoc2hhZGVyQ29udGV4dCkge1xuICAgIHRoaXMuc2hhZGVyVmFycy5mb3JFYWNoKHNoYWRlckNvbnRleHQucG9wVmFyLmJpbmQoc2hhZGVyQ29udGV4dCkpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3NoYWRlcl92YXJpYWJsZV9ncm91cC5qcyIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBQb3dlck9mMkltYWdlIGZyb20gJy4vcG93ZXJfb2ZfMl9pbWFnZSdcbmltcG9ydCBSZXNvdXJjZVJlZiBmcm9tICcuLi91dGlscy9yZXNvdXJjZV9yZWYnXG5cbmNvbnN0IGdldE9wdGlvbiA9IChvcHRpb25zLCBrZXksIGRlZmF1bHRWYWx1ZSkgPT4gb3B0aW9ucyAhPSBudWxsXG4gID8gKG9wdGlvbnNba2V5XSAhPT0gdW5kZWZpbmVkID8gb3B0aW9uc1trZXldIDogZGVmYXVsdFZhbHVlKSA6IGRlZmF1bHRWYWx1ZVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGV4dHVyZSBjb29yZGluYXRlcyBhbmQgaG9sZHMgYSByZWZlcmVuY2UgdG8gYSBgPGltZz5gIG9yIGA8Y2FudmFzPmAgZWxlbWVudC5cbiAqIFRleHR1cmVzIGNhbiBmb3JtIGhpZXJhY2hpY2FsIHN0cnVjdHVyZXMuXG4gKiBUaGUgKnJvb3QqIHRleHR1cmUgY29udGFpbnMgYWx3YXlzIHRoZSBpbWFnZSByZWZlcmVuY2UsIGFsbCBvdGhlciAqc3ViKiB0ZXh0dXJlcyBjb250YWluXG4gKiByZWZlcmVuY2VzIHRvIHRoZWlyIHBhcmVudCAoYW5kIHRoZSByb290KS5cbiAqXG4gKiBAY2xhc3MgVGV4dHVyZVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpXG4gKiBjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoY2FudmFzKVxuICogdGV4dHVyZS53aWR0aCAgICAvLyA9PiAzMDAgPC0gZGVmYXVsdCBzaXplIG9mIDxjYW52YXM+IGVsZW1lbnRcbiAqIHRleHR1cmUuaGVpZ2h0ICAgLy8gPT4gMTUwXG4gKlxuICogbGV0IHN1YlRleCA9IG5ldyBUZXh0dXJlKHRleHR1cmUsIDMwLCAxNSwgMTAwLCAxMDApXG4gKiBzdWJUZXgud2lkdGggICAgLy8gPT4gMTAwXG4gKlxuICogVGV4dHVyZS5sb2FkKCd0ZXN0L2Fzc2V0cy9iaXJkLWNoaWNrZW4tcGVuZ3Vpbi5wbmcnKS50aGVuKHRleCA9PiB7XG4gKiAgIHRleC53aWR0aCAgICAvLyA9PiA2NDBcbiAqICAgdGV4LmhlaWdodCAgIC8vID0+IDQ4MFxuICogfSlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0dXJlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VGV4dHVyZXxQb3dlck9mMkltYWdlfEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR9IHNvdXJjZSAtIGltYWdlIGVsZW1lbnRzIG11c3QgYmUgKmNvbXBsZXRlZCogKGxvYWRlZClcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbeD0wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3k9MF1cbiAgICogQHBhcmFtIHtPYmplY3R9IFtoaW50c10gdGV4dHVyZSBoaW50c1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtoaW50cy5mbGlwWT1mYWxzZV1cbiAgICogQHBhcmFtIHtib29sZWFufSBbaGludHMucmVwZWF0YWJsZT1mYWxzZV1cbiAgICogQHBhcmFtIHtib29sZWFufSBbaGludHMucHJlbXVsdGlwbHlBbHBoYT10cnVlXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHNvdXJjZSwgd2lkdGgsIGhlaWdodCwgeCA9IDAsIHkgPSAwLCBoaW50cyA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBUZXh0dXJlKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtUZXh0dXJlfVxuICAgICAgICovXG4gICAgICB0aGlzLnBhcmVudCA9IHNvdXJjZVxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7UG93ZXJPZjJJbWFnZXxIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fVxuICAgICAgICovXG4gICAgICB0aGlzLmltYWdlID0gbnVsbFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcgJiYgJ3dpZHRoJyBpbiBzb3VyY2UgJiYgJ2hlaWdodCcgaW4gc291cmNlKSB7XG4gICAgICB0aGlzLmltYWdlID0gc291cmNlXG4gICAgICB0aGlzLnBhcmVudCA9IG51bGxcblxuICAgICAgdGhpcy5fcmVzb3VyY2VSZWYgPSBuZXcgUmVzb3VyY2VSZWYodGhpcywge1xuICAgICAgICBmbGlwWTogZ2V0T3B0aW9uKGhpbnRzLCAnZmxpcFknLCBmYWxzZSksXG4gICAgICAgIHJlcGVhdGFibGU6IGdldE9wdGlvbihoaW50cywgJ3JlcGVhdGFibGUnLCBmYWxzZSksXG4gICAgICAgIHByZW11bHRpcGx5QWxwaGE6IGdldE9wdGlvbihoaW50cywgJ3ByZW11bHRpcGx5QWxwaGEnLCB0cnVlKSxcbiAgICAgICAgbmVhcmVzdDogZ2V0T3B0aW9uKGhpbnRzLCAnbmVhcmVzdCcsIGZhbHNlKVxuICAgICAgfSlcblxuICAgICAgaWYgKCdvcmlnV2lkdGgnIGluIHNvdXJjZSAmJiAnb3JpZ0hlaWdodCcgaW4gc291cmNlKSB7XG4gICAgICAgIHdpZHRoID0gc291cmNlLm9yaWdXaWR0aFxuICAgICAgICBoZWlnaHQgPSBzb3VyY2Uub3JpZ0hlaWdodFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25ldyBUZXh0dXJlKCkgcGFuaWM6IHVuZXhwZWN0ZWQgc291cmNlIGFyZ3VtZW50IScpXG4gICAgfVxuXG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aFxuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodFxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnggPSB4XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnkgPSB5XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1RleHR1cmV9XG4gICAqL1xuICBnZXQgcm9vdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5yb290KSB8fCB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR9XG4gICAqL1xuICBnZXQgaW1nRWwgKCkge1xuICAgIGNvbnN0IHsgcm9vdCB9ID0gdGhpc1xuICAgIHJldHVybiByb290LmltYWdlLmltZ0VsIHx8IHJvb3QuaW1hZ2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7UmVzb3VyY2VSZWZ9XG4gICAqL1xuICBnZXQgcmVzb3VyY2VSZWYgKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZVJlZiB8fCB0aGlzLnJvb3QucmVzb3VyY2VSZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdpZHRoICgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB0aGlzLl93aWR0aCA9PT0gJ251bWJlcidcbiAgICAgID8gdGhpcy5fd2lkdGhcbiAgICAgIDogKHRoaXMuaW1hZ2VcbiAgICAgICAgPyB0aGlzLmltYWdlLndpZHRoXG4gICAgICAgIDogKHRoaXMucGFyZW50XG4gICAgICAgICAgPyB0aGlzLnJvb3Qud2lkdGhcbiAgICAgICAgICA6IDBcbiAgICAgICAgKVxuICAgICAgKVxuICAgIClcbiAgfVxuXG4gIHNldCB3aWR0aCAodykge1xuICAgIHRoaXMuX3dpZHRoID0gd1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgaGVpZ2h0ICgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB0aGlzLl9oZWlnaHQgPT09ICdudW1iZXInXG4gICAgICA/IHRoaXMuX2hlaWdodFxuICAgICAgOiAodGhpcy5pbWFnZVxuICAgICAgICA/IHRoaXMuaW1hZ2UuaGVpZ2h0XG4gICAgICAgIDogKHRoaXMucGFyZW50XG4gICAgICAgICAgPyB0aGlzLnJvb3QuaGVpZ2h0XG4gICAgICAgICAgOiAwXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gIH1cblxuICBzZXQgaGVpZ2h0IChoKSB7XG4gICAgdGhpcy5faGVpZ2h0ID0gaFxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgbWluUyAoKSB7XG4gICAgbGV0IHggPSB0aGlzLnhcbiAgICBsZXQgdGV4dHVyZSA9IHRoaXNcblxuICAgIHdoaWxlICgodGV4dHVyZSA9IHRleHR1cmUucGFyZW50KSAhPSBudWxsKSB7XG4gICAgICB4ICs9IHRleHR1cmUueFxuICAgIH1cblxuICAgIHJldHVybiB4IC8gdGhpcy5yb290LmltYWdlLndpZHRoXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtaW5UICgpIHtcbiAgICBsZXQgeSA9IHRoaXMueVxuICAgIGxldCB0ZXh0dXJlID0gdGhpc1xuXG4gICAgd2hpbGUgKCh0ZXh0dXJlID0gdGV4dHVyZS5wYXJlbnQpICE9IG51bGwpIHtcbiAgICAgIHkgKz0gdGV4dHVyZS55XG4gICAgfVxuXG4gICAgcmV0dXJuIHkgLyB0aGlzLnJvb3QuaW1hZ2UuaGVpZ2h0XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtYXhTICgpIHtcbiAgICBsZXQgeCA9IHRoaXMueCArIHRoaXMud2lkdGhcbiAgICBsZXQgdGV4dHVyZSA9IHRoaXNcblxuICAgIHdoaWxlICgodGV4dHVyZSA9IHRleHR1cmUucGFyZW50KSAhPSBudWxsKSB7XG4gICAgICB4ICs9IHRleHR1cmUueFxuICAgIH1cblxuICAgIHJldHVybiB4IC8gdGhpcy5yb290LmltYWdlLndpZHRoXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtYXhUICgpIHtcbiAgICBsZXQgeSA9IHRoaXMueSArIHRoaXMuaGVpZ2h0XG4gICAgbGV0IHRleHR1cmUgPSB0aGlzXG5cbiAgICB3aGlsZSAoKHRleHR1cmUgPSB0ZXh0dXJlLnBhcmVudCkgIT0gbnVsbCkge1xuICAgICAgeSArPSB0ZXh0dXJlLnlcbiAgICB9XG5cbiAgICByZXR1cm4geSAvIHRoaXMucm9vdC5pbWFnZS5oZWlnaHRcbiAgfVxuXG4gIC8qKlxuICAgICogTG9hZHMgYW4gaW1hZ2UgZnJvbSB1cmwgYW5kIHJldHVybnMgYSB0ZXh0dXJlLlxuICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICogQHBhcmFtIHtvYmplY3R9IFt0ZXh0dXJlSGludHNdXG4gICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUZXh0dXJlPn1cbiAgICAqL1xuICBzdGF0aWMgbG9hZCAodXJsLCB0ZXh0dXJlSGludHMpIHtcbiAgICByZXR1cm4gbmV3IFBvd2VyT2YySW1hZ2UodXJsKS5jb21wbGV0ZS50aGVuKHAyaW1nID0+IG5ldyBUZXh0dXJlKHAyaW1nLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgMCwgMCwgdGV4dHVyZUhpbnRzKSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvdGV4dHVyZS5qcyIsIi8vIFRpbnlDb2xvciB2MS40LjFcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZ3JpbnMvVGlueUNvbG9yXG4vLyBCcmlhbiBHcmluc3RlYWQsIE1JVCBMaWNlbnNlXG5cbihmdW5jdGlvbihNYXRoKSB7XG5cbnZhciB0cmltTGVmdCA9IC9eXFxzKy8sXG4gICAgdHJpbVJpZ2h0ID0gL1xccyskLyxcbiAgICB0aW55Q291bnRlciA9IDAsXG4gICAgbWF0aFJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICBtYXRoTWluID0gTWF0aC5taW4sXG4gICAgbWF0aE1heCA9IE1hdGgubWF4LFxuICAgIG1hdGhSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuZnVuY3Rpb24gdGlueWNvbG9yIChjb2xvciwgb3B0cykge1xuXG4gICAgY29sb3IgPSAoY29sb3IpID8gY29sb3IgOiAnJztcbiAgICBvcHRzID0gb3B0cyB8fCB7IH07XG5cbiAgICAvLyBJZiBpbnB1dCBpcyBhbHJlYWR5IGEgdGlueWNvbG9yLCByZXR1cm4gaXRzZWxmXG4gICAgaWYgKGNvbG9yIGluc3RhbmNlb2YgdGlueWNvbG9yKSB7XG4gICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBhcmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGNhbGwgdXNpbmcgbmV3IGluc3RlYWRcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgdGlueWNvbG9yKSkge1xuICAgICAgICByZXR1cm4gbmV3IHRpbnljb2xvcihjb2xvciwgb3B0cyk7XG4gICAgfVxuXG4gICAgdmFyIHJnYiA9IGlucHV0VG9SR0IoY29sb3IpO1xuICAgIHRoaXMuX29yaWdpbmFsSW5wdXQgPSBjb2xvcixcbiAgICB0aGlzLl9yID0gcmdiLnIsXG4gICAgdGhpcy5fZyA9IHJnYi5nLFxuICAgIHRoaXMuX2IgPSByZ2IuYixcbiAgICB0aGlzLl9hID0gcmdiLmEsXG4gICAgdGhpcy5fcm91bmRBID0gbWF0aFJvdW5kKDEwMCp0aGlzLl9hKSAvIDEwMCxcbiAgICB0aGlzLl9mb3JtYXQgPSBvcHRzLmZvcm1hdCB8fCByZ2IuZm9ybWF0O1xuICAgIHRoaXMuX2dyYWRpZW50VHlwZSA9IG9wdHMuZ3JhZGllbnRUeXBlO1xuXG4gICAgLy8gRG9uJ3QgbGV0IHRoZSByYW5nZSBvZiBbMCwyNTVdIGNvbWUgYmFjayBpbiBbMCwxXS5cbiAgICAvLyBQb3RlbnRpYWxseSBsb3NlIGEgbGl0dGxlIGJpdCBvZiBwcmVjaXNpb24gaGVyZSwgYnV0IHdpbGwgZml4IGlzc3VlcyB3aGVyZVxuICAgIC8vIC41IGdldHMgaW50ZXJwcmV0ZWQgYXMgaGFsZiBvZiB0aGUgdG90YWwsIGluc3RlYWQgb2YgaGFsZiBvZiAxXG4gICAgLy8gSWYgaXQgd2FzIHN1cHBvc2VkIHRvIGJlIDEyOCwgdGhpcyB3YXMgYWxyZWFkeSB0YWtlbiBjYXJlIG9mIGJ5IGBpbnB1dFRvUmdiYFxuICAgIGlmICh0aGlzLl9yIDwgMSkgeyB0aGlzLl9yID0gbWF0aFJvdW5kKHRoaXMuX3IpOyB9XG4gICAgaWYgKHRoaXMuX2cgPCAxKSB7IHRoaXMuX2cgPSBtYXRoUm91bmQodGhpcy5fZyk7IH1cbiAgICBpZiAodGhpcy5fYiA8IDEpIHsgdGhpcy5fYiA9IG1hdGhSb3VuZCh0aGlzLl9iKTsgfVxuXG4gICAgdGhpcy5fb2sgPSByZ2Iub2s7XG4gICAgdGhpcy5fdGNfaWQgPSB0aW55Q291bnRlcisrO1xufVxuXG50aW55Y29sb3IucHJvdG90eXBlID0ge1xuICAgIGlzRGFyazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJyaWdodG5lc3MoKSA8IDEyODtcbiAgICB9LFxuICAgIGlzTGlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNEYXJrKCk7XG4gICAgfSxcbiAgICBpc1ZhbGlkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29rO1xuICAgIH0sXG4gICAgZ2V0T3JpZ2luYWxJbnB1dDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fb3JpZ2luYWxJbnB1dDtcbiAgICB9LFxuICAgIGdldEZvcm1hdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXQ7XG4gICAgfSxcbiAgICBnZXRBbHBoYTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hO1xuICAgIH0sXG4gICAgZ2V0QnJpZ2h0bmVzczogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vaHR0cDovL3d3dy53My5vcmcvVFIvQUVSVCNjb2xvci1jb250cmFzdFxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICByZXR1cm4gKHJnYi5yICogMjk5ICsgcmdiLmcgKiA1ODcgKyByZ2IuYiAqIDExNCkgLyAxMDAwO1xuICAgIH0sXG4gICAgZ2V0THVtaW5hbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9odHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHZhciBSc1JHQiwgR3NSR0IsIEJzUkdCLCBSLCBHLCBCO1xuICAgICAgICBSc1JHQiA9IHJnYi5yLzI1NTtcbiAgICAgICAgR3NSR0IgPSByZ2IuZy8yNTU7XG4gICAgICAgIEJzUkdCID0gcmdiLmIvMjU1O1xuXG4gICAgICAgIGlmIChSc1JHQiA8PSAwLjAzOTI4KSB7UiA9IFJzUkdCIC8gMTIuOTI7fSBlbHNlIHtSID0gTWF0aC5wb3coKChSc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIGlmIChHc1JHQiA8PSAwLjAzOTI4KSB7RyA9IEdzUkdCIC8gMTIuOTI7fSBlbHNlIHtHID0gTWF0aC5wb3coKChHc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIGlmIChCc1JHQiA8PSAwLjAzOTI4KSB7QiA9IEJzUkdCIC8gMTIuOTI7fSBlbHNlIHtCID0gTWF0aC5wb3coKChCc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIHJldHVybiAoMC4yMTI2ICogUikgKyAoMC43MTUyICogRykgKyAoMC4wNzIyICogQik7XG4gICAgfSxcbiAgICBzZXRBbHBoYTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYSA9IGJvdW5kQWxwaGEodmFsdWUpO1xuICAgICAgICB0aGlzLl9yb3VuZEEgPSBtYXRoUm91bmQoMTAwKnRoaXMuX2EpIC8gMTAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHRvSHN2OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzdiA9IHJnYlRvSHN2KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICByZXR1cm4geyBoOiBoc3YuaCAqIDM2MCwgczogaHN2LnMsIHY6IGhzdi52LCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b0hzdlN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc3YgPSByZ2JUb0hzdih0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgdmFyIGggPSBtYXRoUm91bmQoaHN2LmggKiAzNjApLCBzID0gbWF0aFJvdW5kKGhzdi5zICogMTAwKSwgdiA9IG1hdGhSb3VuZChoc3YudiAqIDEwMCk7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJoc3YoXCIgICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgdiArIFwiJSlcIiA6XG4gICAgICAgICAgXCJoc3ZhKFwiICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgdiArIFwiJSwgXCIrIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9Ic2w6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2wodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHJldHVybiB7IGg6IGhzbC5oICogMzYwLCBzOiBoc2wucywgbDogaHNsLmwsIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvSHNsU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzbCA9IHJnYlRvSHNsKHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICB2YXIgaCA9IG1hdGhSb3VuZChoc2wuaCAqIDM2MCksIHMgPSBtYXRoUm91bmQoaHNsLnMgKiAxMDApLCBsID0gbWF0aFJvdW5kKGhzbC5sICogMTAwKTtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcImhzbChcIiAgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyBsICsgXCIlKVwiIDpcbiAgICAgICAgICBcImhzbGEoXCIgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyBsICsgXCIlLCBcIisgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b0hleDogZnVuY3Rpb24oYWxsb3czQ2hhcikge1xuICAgICAgICByZXR1cm4gcmdiVG9IZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgYWxsb3czQ2hhcik7XG4gICAgfSxcbiAgICB0b0hleFN0cmluZzogZnVuY3Rpb24oYWxsb3czQ2hhcikge1xuICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hleChhbGxvdzNDaGFyKTtcbiAgICB9LFxuICAgIHRvSGV4ODogZnVuY3Rpb24oYWxsb3c0Q2hhcikge1xuICAgICAgICByZXR1cm4gcmdiYVRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EsIGFsbG93NENoYXIpO1xuICAgIH0sXG4gICAgdG9IZXg4U3RyaW5nOiBmdW5jdGlvbihhbGxvdzRDaGFyKSB7XG4gICAgICAgIHJldHVybiAnIycgKyB0aGlzLnRvSGV4OChhbGxvdzRDaGFyKTtcbiAgICB9LFxuICAgIHRvUmdiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0aFJvdW5kKHRoaXMuX3IpLCBnOiBtYXRoUm91bmQodGhpcy5fZyksIGI6IG1hdGhSb3VuZCh0aGlzLl9iKSwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9SZ2JTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwicmdiKFwiICArIG1hdGhSb3VuZCh0aGlzLl9yKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9nKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9iKSArIFwiKVwiIDpcbiAgICAgICAgICBcInJnYmEoXCIgKyBtYXRoUm91bmQodGhpcy5fcikgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fZykgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fYikgKyBcIiwgXCIgKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvUGVyY2VudGFnZVJnYjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgXCIlXCIsIGc6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2csIDI1NSkgKiAxMDApICsgXCIlXCIsIGI6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgXCIlXCIsIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvUGVyY2VudGFnZVJnYlN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJyZ2IoXCIgICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fciwgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fYiwgMjU1KSAqIDEwMCkgKyBcIiUpXCIgOlxuICAgICAgICAgIFwicmdiYShcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2csIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9OYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2EgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYSA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZXhOYW1lc1tyZ2JUb0hleCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iLCB0cnVlKV0gfHwgZmFsc2U7XG4gICAgfSxcbiAgICB0b0ZpbHRlcjogZnVuY3Rpb24oc2Vjb25kQ29sb3IpIHtcbiAgICAgICAgdmFyIGhleDhTdHJpbmcgPSAnIycgKyByZ2JhVG9BcmdiSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EpO1xuICAgICAgICB2YXIgc2Vjb25kSGV4OFN0cmluZyA9IGhleDhTdHJpbmc7XG4gICAgICAgIHZhciBncmFkaWVudFR5cGUgPSB0aGlzLl9ncmFkaWVudFR5cGUgPyBcIkdyYWRpZW50VHlwZSA9IDEsIFwiIDogXCJcIjtcblxuICAgICAgICBpZiAoc2Vjb25kQ29sb3IpIHtcbiAgICAgICAgICAgIHZhciBzID0gdGlueWNvbG9yKHNlY29uZENvbG9yKTtcbiAgICAgICAgICAgIHNlY29uZEhleDhTdHJpbmcgPSAnIycgKyByZ2JhVG9BcmdiSGV4KHMuX3IsIHMuX2csIHMuX2IsIHMuX2EpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KFwiK2dyYWRpZW50VHlwZStcInN0YXJ0Q29sb3JzdHI9XCIraGV4OFN0cmluZytcIixlbmRDb2xvcnN0cj1cIitzZWNvbmRIZXg4U3RyaW5nK1wiKVwiO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgZm9ybWF0U2V0ID0gISFmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCB0aGlzLl9mb3JtYXQ7XG5cbiAgICAgICAgdmFyIGZvcm1hdHRlZFN0cmluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzQWxwaGEgPSB0aGlzLl9hIDwgMSAmJiB0aGlzLl9hID49IDA7XG4gICAgICAgIHZhciBuZWVkc0FscGhhRm9ybWF0ID0gIWZvcm1hdFNldCAmJiBoYXNBbHBoYSAmJiAoZm9ybWF0ID09PSBcImhleFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg2XCIgfHwgZm9ybWF0ID09PSBcImhleDNcIiB8fCBmb3JtYXQgPT09IFwiaGV4NFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg4XCIgfHwgZm9ybWF0ID09PSBcIm5hbWVcIik7XG5cbiAgICAgICAgaWYgKG5lZWRzQWxwaGFGb3JtYXQpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgXCJ0cmFuc3BhcmVudFwiLCBhbGwgb3RoZXIgbm9uLWFscGhhIGZvcm1hdHNcbiAgICAgICAgICAgIC8vIHdpbGwgcmV0dXJuIHJnYmEgd2hlbiB0aGVyZSBpcyB0cmFuc3BhcmVuY3kuXG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSBcIm5hbWVcIiAmJiB0aGlzLl9hID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9OYW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwicmdiXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9SZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcInByZ2JcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b1BlcmNlbnRhZ2VSZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg2XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleDNcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleFN0cmluZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleDRcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleDhTdHJpbmcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoZXg4XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXg4U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJuYW1lXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9OYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoc2xcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hzbFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaHN2XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9Ic3ZTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRTdHJpbmcgfHwgdGhpcy50b0hleFN0cmluZygpO1xuICAgIH0sXG4gICAgY2xvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGlueWNvbG9yKHRoaXMudG9TdHJpbmcoKSk7XG4gICAgfSxcblxuICAgIF9hcHBseU1vZGlmaWNhdGlvbjogZnVuY3Rpb24oZm4sIGFyZ3MpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gZm4uYXBwbHkobnVsbCwgW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3MpKSk7XG4gICAgICAgIHRoaXMuX3IgPSBjb2xvci5fcjtcbiAgICAgICAgdGhpcy5fZyA9IGNvbG9yLl9nO1xuICAgICAgICB0aGlzLl9iID0gY29sb3IuX2I7XG4gICAgICAgIHRoaXMuc2V0QWxwaGEoY29sb3IuX2EpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGxpZ2h0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24obGlnaHRlbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGJyaWdodGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGJyaWdodGVuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZGFya2VuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGRhcmtlbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGRlc2F0dXJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZGVzYXR1cmF0ZSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNhdHVyYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKHNhdHVyYXRlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZ3JleXNjYWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGdyZXlzY2FsZSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNwaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oc3BpbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgX2FwcGx5Q29tYmluYXRpb246IGZ1bmN0aW9uKGZuLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbdGhpc10uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJncykpKTtcbiAgICB9LFxuICAgIGFuYWxvZ291czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKGFuYWxvZ291cywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGNvbXBsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihjb21wbGVtZW50LCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbW9ub2Nocm9tYXRpYzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKG1vbm9jaHJvbWF0aWMsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzcGxpdGNvbXBsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihzcGxpdGNvbXBsZW1lbnQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICB0cmlhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHRyaWFkLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgdGV0cmFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24odGV0cmFkLCBhcmd1bWVudHMpO1xuICAgIH1cbn07XG5cbi8vIElmIGlucHV0IGlzIGFuIG9iamVjdCwgZm9yY2UgMSBpbnRvIFwiMS4wXCIgdG8gaGFuZGxlIHJhdGlvcyBwcm9wZXJseVxuLy8gU3RyaW5nIGlucHV0IHJlcXVpcmVzIFwiMS4wXCIgYXMgaW5wdXQsIHNvIDEgd2lsbCBiZSB0cmVhdGVkIGFzIDFcbnRpbnljb2xvci5mcm9tUmF0aW8gPSBmdW5jdGlvbihjb2xvciwgb3B0cykge1xuICAgIGlmICh0eXBlb2YgY29sb3IgPT0gXCJvYmplY3RcIikge1xuICAgICAgICB2YXIgbmV3Q29sb3IgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBjb2xvcikge1xuICAgICAgICAgICAgaWYgKGNvbG9yLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IFwiYVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbG9yW2ldID0gY29sb3JbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdDb2xvcltpXSA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3JbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb2xvciA9IG5ld0NvbG9yO1xuICAgIH1cblxuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IsIG9wdHMpO1xufTtcblxuLy8gR2l2ZW4gYSBzdHJpbmcgb3Igb2JqZWN0LCBjb252ZXJ0IHRoYXQgaW5wdXQgdG8gUkdCXG4vLyBQb3NzaWJsZSBzdHJpbmcgaW5wdXRzOlxuLy9cbi8vICAgICBcInJlZFwiXG4vLyAgICAgXCIjZjAwXCIgb3IgXCJmMDBcIlxuLy8gICAgIFwiI2ZmMDAwMFwiIG9yIFwiZmYwMDAwXCJcbi8vICAgICBcIiNmZjAwMDAwMFwiIG9yIFwiZmYwMDAwMDBcIlxuLy8gICAgIFwicmdiIDI1NSAwIDBcIiBvciBcInJnYiAoMjU1LCAwLCAwKVwiXG4vLyAgICAgXCJyZ2IgMS4wIDAgMFwiIG9yIFwicmdiICgxLCAwLCAwKVwiXG4vLyAgICAgXCJyZ2JhICgyNTUsIDAsIDAsIDEpXCIgb3IgXCJyZ2JhIDI1NSwgMCwgMCwgMVwiXG4vLyAgICAgXCJyZ2JhICgxLjAsIDAsIDAsIDEpXCIgb3IgXCJyZ2JhIDEuMCwgMCwgMCwgMVwiXG4vLyAgICAgXCJoc2woMCwgMTAwJSwgNTAlKVwiIG9yIFwiaHNsIDAgMTAwJSA1MCVcIlxuLy8gICAgIFwiaHNsYSgwLCAxMDAlLCA1MCUsIDEpXCIgb3IgXCJoc2xhIDAgMTAwJSA1MCUsIDFcIlxuLy8gICAgIFwiaHN2KDAsIDEwMCUsIDEwMCUpXCIgb3IgXCJoc3YgMCAxMDAlIDEwMCVcIlxuLy9cbmZ1bmN0aW9uIGlucHV0VG9SR0IoY29sb3IpIHtcblxuICAgIHZhciByZ2IgPSB7IHI6IDAsIGc6IDAsIGI6IDAgfTtcbiAgICB2YXIgYSA9IDE7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciB2ID0gbnVsbDtcbiAgICB2YXIgbCA9IG51bGw7XG4gICAgdmFyIG9rID0gZmFsc2U7XG4gICAgdmFyIGZvcm1hdCA9IGZhbHNlO1xuXG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbG9yID0gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5yKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5nKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5iKSkge1xuICAgICAgICAgICAgcmdiID0gcmdiVG9SZ2IoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSBTdHJpbmcoY29sb3Iucikuc3Vic3RyKC0xKSA9PT0gXCIlXCIgPyBcInByZ2JcIiA6IFwicmdiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IudikpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgdiA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iudik7XG4gICAgICAgICAgICByZ2IgPSBoc3ZUb1JnYihjb2xvci5oLCBzLCB2KTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwiaHN2XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IubCkpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgbCA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3IubCk7XG4gICAgICAgICAgICByZ2IgPSBoc2xUb1JnYihjb2xvci5oLCBzLCBsKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwiaHNsXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sb3IuaGFzT3duUHJvcGVydHkoXCJhXCIpKSB7XG4gICAgICAgICAgICBhID0gY29sb3IuYTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGEgPSBib3VuZEFscGhhKGEpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgb2s6IG9rLFxuICAgICAgICBmb3JtYXQ6IGNvbG9yLmZvcm1hdCB8fCBmb3JtYXQsXG4gICAgICAgIHI6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5yLCAwKSksXG4gICAgICAgIGc6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5nLCAwKSksXG4gICAgICAgIGI6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5iLCAwKSksXG4gICAgICAgIGE6IGFcbiAgICB9O1xufVxuXG5cbi8vIENvbnZlcnNpb24gRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBgcmdiVG9Ic2xgLCBgcmdiVG9Ic3ZgLCBgaHNsVG9SZ2JgLCBgaHN2VG9SZ2JgIG1vZGlmaWVkIGZyb206XG4vLyA8aHR0cDovL21qaWphY2tzb24uY29tLzIwMDgvMDIvcmdiLXRvLWhzbC1hbmQtcmdiLXRvLWhzdi1jb2xvci1tb2RlbC1jb252ZXJzaW9uLWFsZ29yaXRobXMtaW4tamF2YXNjcmlwdD5cblxuLy8gYHJnYlRvUmdiYFxuLy8gSGFuZGxlIGJvdW5kcyAvIHBlcmNlbnRhZ2UgY2hlY2tpbmcgdG8gY29uZm9ybSB0byBDU1MgY29sb3Igc3BlY1xuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtY29sb3IvPlxuLy8gKkFzc3VtZXM6KiByLCBnLCBiIGluIFswLCAyNTVdIG9yIFswLCAxXVxuLy8gKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiBbMCwgMjU1XVxuZnVuY3Rpb24gcmdiVG9SZ2IociwgZywgYil7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogYm91bmQwMShyLCAyNTUpICogMjU1LFxuICAgICAgICBnOiBib3VuZDAxKGcsIDI1NSkgKiAyNTUsXG4gICAgICAgIGI6IGJvdW5kMDEoYiwgMjU1KSAqIDI1NVxuICAgIH07XG59XG5cbi8vIGByZ2JUb0hzbGBcbi8vIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU0wuXG4vLyAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgaCwgcywgbCB9IGluIFswLDFdXG5mdW5jdGlvbiByZ2JUb0hzbChyLCBnLCBiKSB7XG5cbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcblxuICAgIHZhciBtYXggPSBtYXRoTWF4KHIsIGcsIGIpLCBtaW4gPSBtYXRoTWluKHIsIGcsIGIpO1xuICAgIHZhciBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYobWF4ID09IG1pbikge1xuICAgICAgICBoID0gcyA9IDA7IC8vIGFjaHJvbWF0aWNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBkID0gbWF4IC0gbWluO1xuICAgICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICAgIHN3aXRjaChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjogaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZzogaCA9IChiIC0gcikgLyBkICsgMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGI6IGggPSAociAtIGcpIC8gZCArIDQ7IGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaCAvPSA2O1xuICAgIH1cblxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIGw6IGwgfTtcbn1cblxuLy8gYGhzbFRvUmdiYFxuLy8gQ29udmVydHMgYW4gSFNMIGNvbG9yIHZhbHVlIHRvIFJHQi5cbi8vICpBc3N1bWVzOiogaCBpcyBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAzNjBdIGFuZCBzIGFuZCBsIGFyZSBjb250YWluZWQgWzAsIDFdIG9yIFswLCAxMDBdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIHRoZSBzZXQgWzAsIDI1NV1cbmZ1bmN0aW9uIGhzbFRvUmdiKGgsIHMsIGwpIHtcbiAgICB2YXIgciwgZywgYjtcblxuICAgIGggPSBib3VuZDAxKGgsIDM2MCk7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICBsID0gYm91bmQwMShsLCAxMDApO1xuXG4gICAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgICAgIGlmKHQgPCAwKSB0ICs9IDE7XG4gICAgICAgIGlmKHQgPiAxKSB0IC09IDE7XG4gICAgICAgIGlmKHQgPCAxLzYpIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICAgICAgICBpZih0IDwgMS8yKSByZXR1cm4gcTtcbiAgICAgICAgaWYodCA8IDIvMykgcmV0dXJuIHAgKyAocSAtIHApICogKDIvMyAtIHQpICogNjtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgaWYocyA9PT0gMCkge1xuICAgICAgICByID0gZyA9IGIgPSBsOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHZhciBwID0gMiAqIGwgLSBxO1xuICAgICAgICByID0gaHVlMnJnYihwLCBxLCBoICsgMS8zKTtcbiAgICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxLzMpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cblxuLy8gYHJnYlRvSHN2YFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHZhbHVlIHRvIEhTVlxuLy8gKkFzc3VtZXM6KiByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgaCwgcywgdiB9IGluIFswLDFdXG5mdW5jdGlvbiByZ2JUb0hzdihyLCBnLCBiKSB7XG5cbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcblxuICAgIHZhciBtYXggPSBtYXRoTWF4KHIsIGcsIGIpLCBtaW4gPSBtYXRoTWluKHIsIGcsIGIpO1xuICAgIHZhciBoLCBzLCB2ID0gbWF4O1xuXG4gICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuXG4gICAgaWYobWF4ID09IG1pbikge1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBnOiBoID0gKGIgLSByKSAvIGQgKyAyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaCAvPSA2O1xuICAgIH1cbiAgICByZXR1cm4geyBoOiBoLCBzOiBzLCB2OiB2IH07XG59XG5cbi8vIGBoc3ZUb1JnYmBcbi8vIENvbnZlcnRzIGFuIEhTViBjb2xvciB2YWx1ZSB0byBSR0IuXG4vLyAqQXNzdW1lczoqIGggaXMgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMzYwXSBhbmQgcyBhbmQgdiBhcmUgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMTAwXVxuLy8gKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiB0aGUgc2V0IFswLCAyNTVdXG4gZnVuY3Rpb24gaHN2VG9SZ2IoaCwgcywgdikge1xuXG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKSAqIDY7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICB2ID0gYm91bmQwMSh2LCAxMDApO1xuXG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKGgpLFxuICAgICAgICBmID0gaCAtIGksXG4gICAgICAgIHAgPSB2ICogKDEgLSBzKSxcbiAgICAgICAgcSA9IHYgKiAoMSAtIGYgKiBzKSxcbiAgICAgICAgdCA9IHYgKiAoMSAtICgxIC0gZikgKiBzKSxcbiAgICAgICAgbW9kID0gaSAlIDYsXG4gICAgICAgIHIgPSBbdiwgcSwgcCwgcCwgdCwgdl1bbW9kXSxcbiAgICAgICAgZyA9IFt0LCB2LCB2LCBxLCBwLCBwXVttb2RdLFxuICAgICAgICBiID0gW3AsIHAsIHQsIHYsIHYsIHFdW21vZF07XG5cbiAgICByZXR1cm4geyByOiByICogMjU1LCBnOiBnICogMjU1LCBiOiBiICogMjU1IH07XG59XG5cbi8vIGByZ2JUb0hleGBcbi8vIENvbnZlcnRzIGFuIFJHQiBjb2xvciB0byBoZXhcbi8vIEFzc3VtZXMgciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdXG4vLyBSZXR1cm5zIGEgMyBvciA2IGNoYXJhY3RlciBoZXhcbmZ1bmN0aW9uIHJnYlRvSGV4KHIsIGcsIGIsIGFsbG93M0NoYXIpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSlcbiAgICBdO1xuXG4gICAgLy8gUmV0dXJuIGEgMyBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93M0NoYXIgJiYgaGV4WzBdLmNoYXJBdCgwKSA9PSBoZXhbMF0uY2hhckF0KDEpICYmIGhleFsxXS5jaGFyQXQoMCkgPT0gaGV4WzFdLmNoYXJBdCgxKSAmJiBoZXhbMl0uY2hhckF0KDApID09IGhleFsyXS5jaGFyQXQoMSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4LmpvaW4oXCJcIik7XG59XG5cbi8vIGByZ2JhVG9IZXhgXG4vLyBDb252ZXJ0cyBhbiBSR0JBIGNvbG9yIHBsdXMgYWxwaGEgdHJhbnNwYXJlbmN5IHRvIGhleFxuLy8gQXNzdW1lcyByLCBnLCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBhbmRcbi8vIGEgaW4gWzAsIDFdLiBSZXR1cm5zIGEgNCBvciA4IGNoYXJhY3RlciByZ2JhIGhleFxuZnVuY3Rpb24gcmdiYVRvSGV4KHIsIGcsIGIsIGEsIGFsbG93NENoYXIpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSlcbiAgICBdO1xuXG4gICAgLy8gUmV0dXJuIGEgNCBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93NENoYXIgJiYgaGV4WzBdLmNoYXJBdCgwKSA9PSBoZXhbMF0uY2hhckF0KDEpICYmIGhleFsxXS5jaGFyQXQoMCkgPT0gaGV4WzFdLmNoYXJBdCgxKSAmJiBoZXhbMl0uY2hhckF0KDApID09IGhleFsyXS5jaGFyQXQoMSkgJiYgaGV4WzNdLmNoYXJBdCgwKSA9PSBoZXhbM10uY2hhckF0KDEpKSB7XG4gICAgICAgIHJldHVybiBoZXhbMF0uY2hhckF0KDApICsgaGV4WzFdLmNoYXJBdCgwKSArIGhleFsyXS5jaGFyQXQoMCkgKyBoZXhbM10uY2hhckF0KDApO1xuICAgIH1cblxuICAgIHJldHVybiBoZXguam9pbihcIlwiKTtcbn1cblxuLy8gYHJnYmFUb0FyZ2JIZXhgXG4vLyBDb252ZXJ0cyBhbiBSR0JBIGNvbG9yIHRvIGFuIEFSR0IgSGV4OCBzdHJpbmdcbi8vIFJhcmVseSB1c2VkLCBidXQgcmVxdWlyZWQgZm9yIFwidG9GaWx0ZXIoKVwiXG5mdW5jdGlvbiByZ2JhVG9BcmdiSGV4KHIsIGcsIGIsIGEpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSlcbiAgICBdO1xuXG4gICAgcmV0dXJuIGhleC5qb2luKFwiXCIpO1xufVxuXG4vLyBgZXF1YWxzYFxuLy8gQ2FuIGJlIGNhbGxlZCB3aXRoIGFueSB0aW55Y29sb3IgaW5wdXRcbnRpbnljb2xvci5lcXVhbHMgPSBmdW5jdGlvbiAoY29sb3IxLCBjb2xvcjIpIHtcbiAgICBpZiAoIWNvbG9yMSB8fCAhY29sb3IyKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IxKS50b1JnYlN0cmluZygpID09IHRpbnljb2xvcihjb2xvcjIpLnRvUmdiU3RyaW5nKCk7XG59O1xuXG50aW55Y29sb3IucmFuZG9tID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvci5mcm9tUmF0aW8oe1xuICAgICAgICByOiBtYXRoUmFuZG9tKCksXG4gICAgICAgIGc6IG1hdGhSYW5kb20oKSxcbiAgICAgICAgYjogbWF0aFJhbmRvbSgpXG4gICAgfSk7XG59O1xuXG5cbi8vIE1vZGlmaWNhdGlvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRoYW5rcyB0byBsZXNzLmpzIGZvciBzb21lIG9mIHRoZSBiYXNpY3MgaGVyZVxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGhlYWQvbGVzcy5qcy9ibG9iL21hc3Rlci9saWIvbGVzcy9mdW5jdGlvbnMuanM+XG5cbmZ1bmN0aW9uIGRlc2F0dXJhdGUoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLnMgLT0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5zID0gY2xhbXAwMShoc2wucyk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wucyArPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIGdyZXlzY2FsZShjb2xvcikge1xuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IpLmRlc2F0dXJhdGUoMTAwKTtcbn1cblxuZnVuY3Rpb24gbGlnaHRlbiAoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmwgKz0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBicmlnaHRlbihjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIHJnYiA9IHRpbnljb2xvcihjb2xvcikudG9SZ2IoKTtcbiAgICByZ2IuciA9IG1hdGhNYXgoMCwgbWF0aE1pbigyNTUsIHJnYi5yIC0gbWF0aFJvdW5kKDI1NSAqIC0gKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgcmdiLmcgPSBtYXRoTWF4KDAsIG1hdGhNaW4oMjU1LCByZ2IuZyAtIG1hdGhSb3VuZCgyNTUgKiAtIChhbW91bnQgLyAxMDApKSkpO1xuICAgIHJnYi5iID0gbWF0aE1heCgwLCBtYXRoTWluKDI1NSwgcmdiLmIgLSBtYXRoUm91bmQoMjU1ICogLSAoYW1vdW50IC8gMTAwKSkpKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKHJnYik7XG59XG5cbmZ1bmN0aW9uIGRhcmtlbiAoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmwgLT0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG4vLyBTcGluIHRha2VzIGEgcG9zaXRpdmUgb3IgbmVnYXRpdmUgYW1vdW50IHdpdGhpbiBbLTM2MCwgMzYwXSBpbmRpY2F0aW5nIHRoZSBjaGFuZ2Ugb2YgaHVlLlxuLy8gVmFsdWVzIG91dHNpZGUgb2YgdGhpcyByYW5nZSB3aWxsIGJlIHdyYXBwZWQgaW50byB0aGlzIHJhbmdlLlxuZnVuY3Rpb24gc3Bpbihjb2xvciwgYW1vdW50KSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaHVlID0gKGhzbC5oICsgYW1vdW50KSAlIDM2MDtcbiAgICBoc2wuaCA9IGh1ZSA8IDAgPyAzNjAgKyBodWUgOiBodWU7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG4vLyBDb21iaW5hdGlvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVGhhbmtzIHRvIGpRdWVyeSB4Q29sb3IgZm9yIHNvbWUgb2YgdGhlIGlkZWFzIGJlaGluZCB0aGVzZVxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9pbmZ1c2lvbi9qUXVlcnkteGNvbG9yL2Jsb2IvbWFzdGVyL2pxdWVyeS54Y29sb3IuanM+XG5cbmZ1bmN0aW9uIGNvbXBsZW1lbnQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIGhzbC5oID0gKGhzbC5oICsgMTgwKSAlIDM2MDtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIHRyaWFkKGNvbG9yKSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaCA9IGhzbC5oO1xuICAgIHJldHVybiBbXG4gICAgICAgIHRpbnljb2xvcihjb2xvciksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMTIwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDI0MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIHRldHJhZChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIGggPSBoc2wuaDtcbiAgICByZXR1cm4gW1xuICAgICAgICB0aW55Y29sb3IoY29sb3IpLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDkwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDE4MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAyNzApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSlcbiAgICBdO1xufVxuXG5mdW5jdGlvbiBzcGxpdGNvbXBsZW1lbnQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBoID0gaHNsLmg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdGlueWNvbG9yKGNvbG9yKSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyA3MikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDIxNikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubH0pXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gYW5hbG9nb3VzKGNvbG9yLCByZXN1bHRzLCBzbGljZXMpIHtcbiAgICByZXN1bHRzID0gcmVzdWx0cyB8fCA2O1xuICAgIHNsaWNlcyA9IHNsaWNlcyB8fCAzMDtcblxuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIHBhcnQgPSAzNjAgLyBzbGljZXM7XG4gICAgdmFyIHJldCA9IFt0aW55Y29sb3IoY29sb3IpXTtcblxuICAgIGZvciAoaHNsLmggPSAoKGhzbC5oIC0gKHBhcnQgKiByZXN1bHRzID4+IDEpKSArIDcyMCkgJSAzNjA7IC0tcmVzdWx0czsgKSB7XG4gICAgICAgIGhzbC5oID0gKGhzbC5oICsgcGFydCkgJSAzNjA7XG4gICAgICAgIHJldC5wdXNoKHRpbnljb2xvcihoc2wpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gbW9ub2Nocm9tYXRpYyhjb2xvciwgcmVzdWx0cykge1xuICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IDY7XG4gICAgdmFyIGhzdiA9IHRpbnljb2xvcihjb2xvcikudG9Ic3YoKTtcbiAgICB2YXIgaCA9IGhzdi5oLCBzID0gaHN2LnMsIHYgPSBoc3YudjtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgdmFyIG1vZGlmaWNhdGlvbiA9IDEgLyByZXN1bHRzO1xuXG4gICAgd2hpbGUgKHJlc3VsdHMtLSkge1xuICAgICAgICByZXQucHVzaCh0aW55Y29sb3IoeyBoOiBoLCBzOiBzLCB2OiB2fSkpO1xuICAgICAgICB2ID0gKHYgKyBtb2RpZmljYXRpb24pICUgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vLyBVdGlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnRpbnljb2xvci5taXggPSBmdW5jdGlvbihjb2xvcjEsIGNvbG9yMiwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCA1MCk7XG5cbiAgICB2YXIgcmdiMSA9IHRpbnljb2xvcihjb2xvcjEpLnRvUmdiKCk7XG4gICAgdmFyIHJnYjIgPSB0aW55Y29sb3IoY29sb3IyKS50b1JnYigpO1xuXG4gICAgdmFyIHAgPSBhbW91bnQgLyAxMDA7XG5cbiAgICB2YXIgcmdiYSA9IHtcbiAgICAgICAgcjogKChyZ2IyLnIgLSByZ2IxLnIpICogcCkgKyByZ2IxLnIsXG4gICAgICAgIGc6ICgocmdiMi5nIC0gcmdiMS5nKSAqIHApICsgcmdiMS5nLFxuICAgICAgICBiOiAoKHJnYjIuYiAtIHJnYjEuYikgKiBwKSArIHJnYjEuYixcbiAgICAgICAgYTogKChyZ2IyLmEgLSByZ2IxLmEpICogcCkgKyByZ2IxLmFcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRpbnljb2xvcihyZ2JhKTtcbn07XG5cblxuLy8gUmVhZGFiaWxpdHkgRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmIChXQ0FHIFZlcnNpb24gMilcblxuLy8gYGNvbnRyYXN0YFxuLy8gQW5hbHl6ZSB0aGUgMiBjb2xvcnMgYW5kIHJldHVybnMgdGhlIGNvbG9yIGNvbnRyYXN0IGRlZmluZWQgYnkgKFdDQUcgVmVyc2lvbiAyKVxudGlueWNvbG9yLnJlYWRhYmlsaXR5ID0gZnVuY3Rpb24oY29sb3IxLCBjb2xvcjIpIHtcbiAgICB2YXIgYzEgPSB0aW55Y29sb3IoY29sb3IxKTtcbiAgICB2YXIgYzIgPSB0aW55Y29sb3IoY29sb3IyKTtcbiAgICByZXR1cm4gKE1hdGgubWF4KGMxLmdldEx1bWluYW5jZSgpLGMyLmdldEx1bWluYW5jZSgpKSswLjA1KSAvIChNYXRoLm1pbihjMS5nZXRMdW1pbmFuY2UoKSxjMi5nZXRMdW1pbmFuY2UoKSkrMC4wNSk7XG59O1xuXG4vLyBgaXNSZWFkYWJsZWBcbi8vIEVuc3VyZSB0aGF0IGZvcmVncm91bmQgYW5kIGJhY2tncm91bmQgY29sb3IgY29tYmluYXRpb25zIG1lZXQgV0NBRzIgZ3VpZGVsaW5lcy5cbi8vIFRoZSB0aGlyZCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCBPYmplY3QuXG4vLyAgICAgIHRoZSAnbGV2ZWwnIHByb3BlcnR5IHN0YXRlcyAnQUEnIG9yICdBQUEnIC0gaWYgbWlzc2luZyBvciBpbnZhbGlkLCBpdCBkZWZhdWx0cyB0byAnQUEnO1xuLy8gICAgICB0aGUgJ3NpemUnIHByb3BlcnR5IHN0YXRlcyAnbGFyZ2UnIG9yICdzbWFsbCcgLSBpZiBtaXNzaW5nIG9yIGludmFsaWQsIGl0IGRlZmF1bHRzIHRvICdzbWFsbCcuXG4vLyBJZiB0aGUgZW50aXJlIG9iamVjdCBpcyBhYnNlbnQsIGlzUmVhZGFibGUgZGVmYXVsdHMgdG8ge2xldmVsOlwiQUFcIixzaXplOlwic21hbGxcIn0uXG5cbi8vICpFeGFtcGxlKlxuLy8gICAgdGlueWNvbG9yLmlzUmVhZGFibGUoXCIjMDAwXCIsIFwiIzExMVwiKSA9PiBmYWxzZVxuLy8gICAgdGlueWNvbG9yLmlzUmVhZGFibGUoXCIjMDAwXCIsIFwiIzExMVwiLHtsZXZlbDpcIkFBXCIsc2l6ZTpcImxhcmdlXCJ9KSA9PiBmYWxzZVxudGlueWNvbG9yLmlzUmVhZGFibGUgPSBmdW5jdGlvbihjb2xvcjEsIGNvbG9yMiwgd2NhZzIpIHtcbiAgICB2YXIgcmVhZGFiaWxpdHkgPSB0aW55Y29sb3IucmVhZGFiaWxpdHkoY29sb3IxLCBjb2xvcjIpO1xuICAgIHZhciB3Y2FnMlBhcm1zLCBvdXQ7XG5cbiAgICBvdXQgPSBmYWxzZTtcblxuICAgIHdjYWcyUGFybXMgPSB2YWxpZGF0ZVdDQUcyUGFybXMod2NhZzIpO1xuICAgIHN3aXRjaCAod2NhZzJQYXJtcy5sZXZlbCArIHdjYWcyUGFybXMuc2l6ZSkge1xuICAgICAgICBjYXNlIFwiQUFzbWFsbFwiOlxuICAgICAgICBjYXNlIFwiQUFBbGFyZ2VcIjpcbiAgICAgICAgICAgIG91dCA9IHJlYWRhYmlsaXR5ID49IDQuNTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQUFsYXJnZVwiOlxuICAgICAgICAgICAgb3V0ID0gcmVhZGFiaWxpdHkgPj0gMztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQUFBc21hbGxcIjpcbiAgICAgICAgICAgIG91dCA9IHJlYWRhYmlsaXR5ID49IDc7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcblxufTtcblxuLy8gYG1vc3RSZWFkYWJsZWBcbi8vIEdpdmVuIGEgYmFzZSBjb2xvciBhbmQgYSBsaXN0IG9mIHBvc3NpYmxlIGZvcmVncm91bmQgb3IgYmFja2dyb3VuZFxuLy8gY29sb3JzIGZvciB0aGF0IGJhc2UsIHJldHVybnMgdGhlIG1vc3QgcmVhZGFibGUgY29sb3IuXG4vLyBPcHRpb25hbGx5IHJldHVybnMgQmxhY2sgb3IgV2hpdGUgaWYgdGhlIG1vc3QgcmVhZGFibGUgY29sb3IgaXMgdW5yZWFkYWJsZS5cbi8vICpFeGFtcGxlKlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZSh0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiIzEyM1wiLCBbXCIjMTI0XCIsIFwiIzEyNVwiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOmZhbHNlfSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjMTEyMjU1XCJcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUodGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiMxMjNcIiwgW1wiIzEyNFwiLCBcIiMxMjVcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlfSkudG9IZXhTdHJpbmcoKTsgIC8vIFwiI2ZmZmZmZlwiXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiI2E4MDE1YVwiLCBbXCIjZmFmM2YzXCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6dHJ1ZSxsZXZlbDpcIkFBQVwiLHNpemU6XCJsYXJnZVwifSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjZmFmM2YzXCJcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjYTgwMTVhXCIsIFtcIiNmYWYzZjNcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlLGxldmVsOlwiQUFBXCIsc2l6ZTpcInNtYWxsXCJ9KS50b0hleFN0cmluZygpOyAvLyBcIiNmZmZmZmZcIlxudGlueWNvbG9yLm1vc3RSZWFkYWJsZSA9IGZ1bmN0aW9uKGJhc2VDb2xvciwgY29sb3JMaXN0LCBhcmdzKSB7XG4gICAgdmFyIGJlc3RDb2xvciA9IG51bGw7XG4gICAgdmFyIGJlc3RTY29yZSA9IDA7XG4gICAgdmFyIHJlYWRhYmlsaXR5O1xuICAgIHZhciBpbmNsdWRlRmFsbGJhY2tDb2xvcnMsIGxldmVsLCBzaXplIDtcbiAgICBhcmdzID0gYXJncyB8fCB7fTtcbiAgICBpbmNsdWRlRmFsbGJhY2tDb2xvcnMgPSBhcmdzLmluY2x1ZGVGYWxsYmFja0NvbG9ycyA7XG4gICAgbGV2ZWwgPSBhcmdzLmxldmVsO1xuICAgIHNpemUgPSBhcmdzLnNpemU7XG5cbiAgICBmb3IgKHZhciBpPSAwOyBpIDwgY29sb3JMaXN0Lmxlbmd0aCA7IGkrKykge1xuICAgICAgICByZWFkYWJpbGl0eSA9IHRpbnljb2xvci5yZWFkYWJpbGl0eShiYXNlQ29sb3IsIGNvbG9yTGlzdFtpXSk7XG4gICAgICAgIGlmIChyZWFkYWJpbGl0eSA+IGJlc3RTY29yZSkge1xuICAgICAgICAgICAgYmVzdFNjb3JlID0gcmVhZGFiaWxpdHk7XG4gICAgICAgICAgICBiZXN0Q29sb3IgPSB0aW55Y29sb3IoY29sb3JMaXN0W2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aW55Y29sb3IuaXNSZWFkYWJsZShiYXNlQ29sb3IsIGJlc3RDb2xvciwge1wibGV2ZWxcIjpsZXZlbCxcInNpemVcIjpzaXplfSkgfHwgIWluY2x1ZGVGYWxsYmFja0NvbG9ycykge1xuICAgICAgICByZXR1cm4gYmVzdENvbG9yO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXJncy5pbmNsdWRlRmFsbGJhY2tDb2xvcnM9ZmFsc2U7XG4gICAgICAgIHJldHVybiB0aW55Y29sb3IubW9zdFJlYWRhYmxlKGJhc2VDb2xvcixbXCIjZmZmXCIsIFwiIzAwMFwiXSxhcmdzKTtcbiAgICB9XG59O1xuXG5cbi8vIEJpZyBMaXN0IG9mIENvbG9yc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jc3ZnLWNvbG9yPlxudmFyIG5hbWVzID0gdGlueWNvbG9yLm5hbWVzID0ge1xuICAgIGFsaWNlYmx1ZTogXCJmMGY4ZmZcIixcbiAgICBhbnRpcXVld2hpdGU6IFwiZmFlYmQ3XCIsXG4gICAgYXF1YTogXCIwZmZcIixcbiAgICBhcXVhbWFyaW5lOiBcIjdmZmZkNFwiLFxuICAgIGF6dXJlOiBcImYwZmZmZlwiLFxuICAgIGJlaWdlOiBcImY1ZjVkY1wiLFxuICAgIGJpc3F1ZTogXCJmZmU0YzRcIixcbiAgICBibGFjazogXCIwMDBcIixcbiAgICBibGFuY2hlZGFsbW9uZDogXCJmZmViY2RcIixcbiAgICBibHVlOiBcIjAwZlwiLFxuICAgIGJsdWV2aW9sZXQ6IFwiOGEyYmUyXCIsXG4gICAgYnJvd246IFwiYTUyYTJhXCIsXG4gICAgYnVybHl3b29kOiBcImRlYjg4N1wiLFxuICAgIGJ1cm50c2llbm5hOiBcImVhN2U1ZFwiLFxuICAgIGNhZGV0Ymx1ZTogXCI1ZjllYTBcIixcbiAgICBjaGFydHJldXNlOiBcIjdmZmYwMFwiLFxuICAgIGNob2NvbGF0ZTogXCJkMjY5MWVcIixcbiAgICBjb3JhbDogXCJmZjdmNTBcIixcbiAgICBjb3JuZmxvd2VyYmx1ZTogXCI2NDk1ZWRcIixcbiAgICBjb3Juc2lsazogXCJmZmY4ZGNcIixcbiAgICBjcmltc29uOiBcImRjMTQzY1wiLFxuICAgIGN5YW46IFwiMGZmXCIsXG4gICAgZGFya2JsdWU6IFwiMDAwMDhiXCIsXG4gICAgZGFya2N5YW46IFwiMDA4YjhiXCIsXG4gICAgZGFya2dvbGRlbnJvZDogXCJiODg2MGJcIixcbiAgICBkYXJrZ3JheTogXCJhOWE5YTlcIixcbiAgICBkYXJrZ3JlZW46IFwiMDA2NDAwXCIsXG4gICAgZGFya2dyZXk6IFwiYTlhOWE5XCIsXG4gICAgZGFya2toYWtpOiBcImJkYjc2YlwiLFxuICAgIGRhcmttYWdlbnRhOiBcIjhiMDA4YlwiLFxuICAgIGRhcmtvbGl2ZWdyZWVuOiBcIjU1NmIyZlwiLFxuICAgIGRhcmtvcmFuZ2U6IFwiZmY4YzAwXCIsXG4gICAgZGFya29yY2hpZDogXCI5OTMyY2NcIixcbiAgICBkYXJrcmVkOiBcIjhiMDAwMFwiLFxuICAgIGRhcmtzYWxtb246IFwiZTk5NjdhXCIsXG4gICAgZGFya3NlYWdyZWVuOiBcIjhmYmM4ZlwiLFxuICAgIGRhcmtzbGF0ZWJsdWU6IFwiNDgzZDhiXCIsXG4gICAgZGFya3NsYXRlZ3JheTogXCIyZjRmNGZcIixcbiAgICBkYXJrc2xhdGVncmV5OiBcIjJmNGY0ZlwiLFxuICAgIGRhcmt0dXJxdW9pc2U6IFwiMDBjZWQxXCIsXG4gICAgZGFya3Zpb2xldDogXCI5NDAwZDNcIixcbiAgICBkZWVwcGluazogXCJmZjE0OTNcIixcbiAgICBkZWVwc2t5Ymx1ZTogXCIwMGJmZmZcIixcbiAgICBkaW1ncmF5OiBcIjY5Njk2OVwiLFxuICAgIGRpbWdyZXk6IFwiNjk2OTY5XCIsXG4gICAgZG9kZ2VyYmx1ZTogXCIxZTkwZmZcIixcbiAgICBmaXJlYnJpY2s6IFwiYjIyMjIyXCIsXG4gICAgZmxvcmFsd2hpdGU6IFwiZmZmYWYwXCIsXG4gICAgZm9yZXN0Z3JlZW46IFwiMjI4YjIyXCIsXG4gICAgZnVjaHNpYTogXCJmMGZcIixcbiAgICBnYWluc2Jvcm86IFwiZGNkY2RjXCIsXG4gICAgZ2hvc3R3aGl0ZTogXCJmOGY4ZmZcIixcbiAgICBnb2xkOiBcImZmZDcwMFwiLFxuICAgIGdvbGRlbnJvZDogXCJkYWE1MjBcIixcbiAgICBncmF5OiBcIjgwODA4MFwiLFxuICAgIGdyZWVuOiBcIjAwODAwMFwiLFxuICAgIGdyZWVueWVsbG93OiBcImFkZmYyZlwiLFxuICAgIGdyZXk6IFwiODA4MDgwXCIsXG4gICAgaG9uZXlkZXc6IFwiZjBmZmYwXCIsXG4gICAgaG90cGluazogXCJmZjY5YjRcIixcbiAgICBpbmRpYW5yZWQ6IFwiY2Q1YzVjXCIsXG4gICAgaW5kaWdvOiBcIjRiMDA4MlwiLFxuICAgIGl2b3J5OiBcImZmZmZmMFwiLFxuICAgIGtoYWtpOiBcImYwZTY4Y1wiLFxuICAgIGxhdmVuZGVyOiBcImU2ZTZmYVwiLFxuICAgIGxhdmVuZGVyYmx1c2g6IFwiZmZmMGY1XCIsXG4gICAgbGF3bmdyZWVuOiBcIjdjZmMwMFwiLFxuICAgIGxlbW9uY2hpZmZvbjogXCJmZmZhY2RcIixcbiAgICBsaWdodGJsdWU6IFwiYWRkOGU2XCIsXG4gICAgbGlnaHRjb3JhbDogXCJmMDgwODBcIixcbiAgICBsaWdodGN5YW46IFwiZTBmZmZmXCIsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IFwiZmFmYWQyXCIsXG4gICAgbGlnaHRncmF5OiBcImQzZDNkM1wiLFxuICAgIGxpZ2h0Z3JlZW46IFwiOTBlZTkwXCIsXG4gICAgbGlnaHRncmV5OiBcImQzZDNkM1wiLFxuICAgIGxpZ2h0cGluazogXCJmZmI2YzFcIixcbiAgICBsaWdodHNhbG1vbjogXCJmZmEwN2FcIixcbiAgICBsaWdodHNlYWdyZWVuOiBcIjIwYjJhYVwiLFxuICAgIGxpZ2h0c2t5Ymx1ZTogXCI4N2NlZmFcIixcbiAgICBsaWdodHNsYXRlZ3JheTogXCI3ODlcIixcbiAgICBsaWdodHNsYXRlZ3JleTogXCI3ODlcIixcbiAgICBsaWdodHN0ZWVsYmx1ZTogXCJiMGM0ZGVcIixcbiAgICBsaWdodHllbGxvdzogXCJmZmZmZTBcIixcbiAgICBsaW1lOiBcIjBmMFwiLFxuICAgIGxpbWVncmVlbjogXCIzMmNkMzJcIixcbiAgICBsaW5lbjogXCJmYWYwZTZcIixcbiAgICBtYWdlbnRhOiBcImYwZlwiLFxuICAgIG1hcm9vbjogXCI4MDAwMDBcIixcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiBcIjY2Y2RhYVwiLFxuICAgIG1lZGl1bWJsdWU6IFwiMDAwMGNkXCIsXG4gICAgbWVkaXVtb3JjaGlkOiBcImJhNTVkM1wiLFxuICAgIG1lZGl1bXB1cnBsZTogXCI5MzcwZGJcIixcbiAgICBtZWRpdW1zZWFncmVlbjogXCIzY2IzNzFcIixcbiAgICBtZWRpdW1zbGF0ZWJsdWU6IFwiN2I2OGVlXCIsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46IFwiMDBmYTlhXCIsXG4gICAgbWVkaXVtdHVycXVvaXNlOiBcIjQ4ZDFjY1wiLFxuICAgIG1lZGl1bXZpb2xldHJlZDogXCJjNzE1ODVcIixcbiAgICBtaWRuaWdodGJsdWU6IFwiMTkxOTcwXCIsXG4gICAgbWludGNyZWFtOiBcImY1ZmZmYVwiLFxuICAgIG1pc3R5cm9zZTogXCJmZmU0ZTFcIixcbiAgICBtb2NjYXNpbjogXCJmZmU0YjVcIixcbiAgICBuYXZham93aGl0ZTogXCJmZmRlYWRcIixcbiAgICBuYXZ5OiBcIjAwMDA4MFwiLFxuICAgIG9sZGxhY2U6IFwiZmRmNWU2XCIsXG4gICAgb2xpdmU6IFwiODA4MDAwXCIsXG4gICAgb2xpdmVkcmFiOiBcIjZiOGUyM1wiLFxuICAgIG9yYW5nZTogXCJmZmE1MDBcIixcbiAgICBvcmFuZ2VyZWQ6IFwiZmY0NTAwXCIsXG4gICAgb3JjaGlkOiBcImRhNzBkNlwiLFxuICAgIHBhbGVnb2xkZW5yb2Q6IFwiZWVlOGFhXCIsXG4gICAgcGFsZWdyZWVuOiBcIjk4ZmI5OFwiLFxuICAgIHBhbGV0dXJxdW9pc2U6IFwiYWZlZWVlXCIsXG4gICAgcGFsZXZpb2xldHJlZDogXCJkYjcwOTNcIixcbiAgICBwYXBheWF3aGlwOiBcImZmZWZkNVwiLFxuICAgIHBlYWNocHVmZjogXCJmZmRhYjlcIixcbiAgICBwZXJ1OiBcImNkODUzZlwiLFxuICAgIHBpbms6IFwiZmZjMGNiXCIsXG4gICAgcGx1bTogXCJkZGEwZGRcIixcbiAgICBwb3dkZXJibHVlOiBcImIwZTBlNlwiLFxuICAgIHB1cnBsZTogXCI4MDAwODBcIixcbiAgICByZWJlY2NhcHVycGxlOiBcIjY2MzM5OVwiLFxuICAgIHJlZDogXCJmMDBcIixcbiAgICByb3N5YnJvd246IFwiYmM4ZjhmXCIsXG4gICAgcm95YWxibHVlOiBcIjQxNjllMVwiLFxuICAgIHNhZGRsZWJyb3duOiBcIjhiNDUxM1wiLFxuICAgIHNhbG1vbjogXCJmYTgwNzJcIixcbiAgICBzYW5keWJyb3duOiBcImY0YTQ2MFwiLFxuICAgIHNlYWdyZWVuOiBcIjJlOGI1N1wiLFxuICAgIHNlYXNoZWxsOiBcImZmZjVlZVwiLFxuICAgIHNpZW5uYTogXCJhMDUyMmRcIixcbiAgICBzaWx2ZXI6IFwiYzBjMGMwXCIsXG4gICAgc2t5Ymx1ZTogXCI4N2NlZWJcIixcbiAgICBzbGF0ZWJsdWU6IFwiNmE1YWNkXCIsXG4gICAgc2xhdGVncmF5OiBcIjcwODA5MFwiLFxuICAgIHNsYXRlZ3JleTogXCI3MDgwOTBcIixcbiAgICBzbm93OiBcImZmZmFmYVwiLFxuICAgIHNwcmluZ2dyZWVuOiBcIjAwZmY3ZlwiLFxuICAgIHN0ZWVsYmx1ZTogXCI0NjgyYjRcIixcbiAgICB0YW46IFwiZDJiNDhjXCIsXG4gICAgdGVhbDogXCIwMDgwODBcIixcbiAgICB0aGlzdGxlOiBcImQ4YmZkOFwiLFxuICAgIHRvbWF0bzogXCJmZjYzNDdcIixcbiAgICB0dXJxdW9pc2U6IFwiNDBlMGQwXCIsXG4gICAgdmlvbGV0OiBcImVlODJlZVwiLFxuICAgIHdoZWF0OiBcImY1ZGViM1wiLFxuICAgIHdoaXRlOiBcImZmZlwiLFxuICAgIHdoaXRlc21va2U6IFwiZjVmNWY1XCIsXG4gICAgeWVsbG93OiBcImZmMFwiLFxuICAgIHllbGxvd2dyZWVuOiBcIjlhY2QzMlwiXG59O1xuXG4vLyBNYWtlIGl0IGVhc3kgdG8gYWNjZXNzIGNvbG9ycyB2aWEgYGhleE5hbWVzW2hleF1gXG52YXIgaGV4TmFtZXMgPSB0aW55Y29sb3IuaGV4TmFtZXMgPSBmbGlwKG5hbWVzKTtcblxuXG4vLyBVdGlsaXRpZXNcbi8vIC0tLS0tLS0tLVxuXG4vLyBgeyAnbmFtZTEnOiAndmFsMScgfWAgYmVjb21lcyBgeyAndmFsMSc6ICduYW1lMScgfWBcbmZ1bmN0aW9uIGZsaXAobykge1xuICAgIHZhciBmbGlwcGVkID0geyB9O1xuICAgIGZvciAodmFyIGkgaW4gbykge1xuICAgICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgZmxpcHBlZFtvW2ldXSA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZsaXBwZWQ7XG59XG5cbi8vIFJldHVybiBhIHZhbGlkIGFscGhhIHZhbHVlIFswLDFdIHdpdGggYWxsIGludmFsaWQgdmFsdWVzIGJlaW5nIHNldCB0byAxXG5mdW5jdGlvbiBib3VuZEFscGhhKGEpIHtcbiAgICBhID0gcGFyc2VGbG9hdChhKTtcblxuICAgIGlmIChpc05hTihhKSB8fCBhIDwgMCB8fCBhID4gMSkge1xuICAgICAgICBhID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbn1cblxuLy8gVGFrZSBpbnB1dCBmcm9tIFswLCBuXSBhbmQgcmV0dXJuIGl0IGFzIFswLCAxXVxuZnVuY3Rpb24gYm91bmQwMShuLCBtYXgpIHtcbiAgICBpZiAoaXNPbmVQb2ludFplcm8obikpIHsgbiA9IFwiMTAwJVwiOyB9XG5cbiAgICB2YXIgcHJvY2Vzc1BlcmNlbnQgPSBpc1BlcmNlbnRhZ2Uobik7XG4gICAgbiA9IG1hdGhNaW4obWF4LCBtYXRoTWF4KDAsIHBhcnNlRmxvYXQobikpKTtcblxuICAgIC8vIEF1dG9tYXRpY2FsbHkgY29udmVydCBwZXJjZW50YWdlIGludG8gbnVtYmVyXG4gICAgaWYgKHByb2Nlc3NQZXJjZW50KSB7XG4gICAgICAgIG4gPSBwYXJzZUludChuICogbWF4LCAxMCkgLyAxMDA7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yc1xuICAgIGlmICgoTWF0aC5hYnMobiAtIG1heCkgPCAwLjAwMDAwMSkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBpbnRvIFswLCAxXSByYW5nZSBpZiBpdCBpc24ndCBhbHJlYWR5XG4gICAgcmV0dXJuIChuICUgbWF4KSAvIHBhcnNlRmxvYXQobWF4KTtcbn1cblxuLy8gRm9yY2UgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXG5mdW5jdGlvbiBjbGFtcDAxKHZhbCkge1xuICAgIHJldHVybiBtYXRoTWluKDEsIG1hdGhNYXgoMCwgdmFsKSk7XG59XG5cbi8vIFBhcnNlIGEgYmFzZS0xNiBoZXggdmFsdWUgaW50byBhIGJhc2UtMTAgaW50ZWdlclxuZnVuY3Rpb24gcGFyc2VJbnRGcm9tSGV4KHZhbCkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWwsIDE2KTtcbn1cblxuLy8gTmVlZCB0byBoYW5kbGUgMS4wIGFzIDEwMCUsIHNpbmNlIG9uY2UgaXQgaXMgYSBudW1iZXIsIHRoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiBpdCBhbmQgMVxuLy8gPGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzQyMjA3Mi9qYXZhc2NyaXB0LWhvdy10by1kZXRlY3QtbnVtYmVyLWFzLWEtZGVjaW1hbC1pbmNsdWRpbmctMS0wPlxuZnVuY3Rpb24gaXNPbmVQb2ludFplcm8obikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PSBcInN0cmluZ1wiICYmIG4uaW5kZXhPZignLicpICE9IC0xICYmIHBhcnNlRmxvYXQobikgPT09IDE7XG59XG5cbi8vIENoZWNrIHRvIHNlZSBpZiBzdHJpbmcgcGFzc2VkIGluIGlzIGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gaXNQZXJjZW50YWdlKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09IFwic3RyaW5nXCIgJiYgbi5pbmRleE9mKCclJykgIT0gLTE7XG59XG5cbi8vIEZvcmNlIGEgaGV4IHZhbHVlIHRvIGhhdmUgMiBjaGFyYWN0ZXJzXG5mdW5jdGlvbiBwYWQyKGMpIHtcbiAgICByZXR1cm4gYy5sZW5ndGggPT0gMSA/ICcwJyArIGMgOiAnJyArIGM7XG59XG5cbi8vIFJlcGxhY2UgYSBkZWNpbWFsIHdpdGggaXQncyBwZXJjZW50YWdlIHZhbHVlXG5mdW5jdGlvbiBjb252ZXJ0VG9QZXJjZW50YWdlKG4pIHtcbiAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgIG4gPSAobiAqIDEwMCkgKyBcIiVcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gbjtcbn1cblxuLy8gQ29udmVydHMgYSBkZWNpbWFsIHRvIGEgaGV4IHZhbHVlXG5mdW5jdGlvbiBjb252ZXJ0RGVjaW1hbFRvSGV4KGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGQpICogMjU1KS50b1N0cmluZygxNik7XG59XG4vLyBDb252ZXJ0cyBhIGhleCB2YWx1ZSB0byBhIGRlY2ltYWxcbmZ1bmN0aW9uIGNvbnZlcnRIZXhUb0RlY2ltYWwoaCkge1xuICAgIHJldHVybiAocGFyc2VJbnRGcm9tSGV4KGgpIC8gMjU1KTtcbn1cblxudmFyIG1hdGNoZXJzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNpbnRlZ2Vycz5cbiAgICB2YXIgQ1NTX0lOVEVHRVIgPSBcIlstXFxcXCtdP1xcXFxkKyU/XCI7XG5cbiAgICAvLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI251bWJlci12YWx1ZT5cbiAgICB2YXIgQ1NTX05VTUJFUiA9IFwiWy1cXFxcK10/XFxcXGQqXFxcXC5cXFxcZCslP1wiO1xuXG4gICAgLy8gQWxsb3cgcG9zaXRpdmUvbmVnYXRpdmUgaW50ZWdlci9udW1iZXIuICBEb24ndCBjYXB0dXJlIHRoZSBlaXRoZXIvb3IsIGp1c3QgdGhlIGVudGlyZSBvdXRjb21lLlxuICAgIHZhciBDU1NfVU5JVCA9IFwiKD86XCIgKyBDU1NfTlVNQkVSICsgXCIpfCg/OlwiICsgQ1NTX0lOVEVHRVIgKyBcIilcIjtcblxuICAgIC8vIEFjdHVhbCBtYXRjaGluZy5cbiAgICAvLyBQYXJlbnRoZXNlcyBhbmQgY29tbWFzIGFyZSBvcHRpb25hbCwgYnV0IG5vdCByZXF1aXJlZC5cbiAgICAvLyBXaGl0ZXNwYWNlIGNhbiB0YWtlIHRoZSBwbGFjZSBvZiBjb21tYXMgb3Igb3BlbmluZyBwYXJlblxuICAgIHZhciBQRVJNSVNTSVZFX01BVENIMyA9IFwiW1xcXFxzfFxcXFwoXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVxcXFxzKlxcXFwpP1wiO1xuICAgIHZhciBQRVJNSVNTSVZFX01BVENINCA9IFwiW1xcXFxzfFxcXFwoXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVxcXFxzKlxcXFwpP1wiO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgQ1NTX1VOSVQ6IG5ldyBSZWdFeHAoQ1NTX1VOSVQpLFxuICAgICAgICByZ2I6IG5ldyBSZWdFeHAoXCJyZ2JcIiArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICAgICAgcmdiYTogbmV3IFJlZ0V4cChcInJnYmFcIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICAgICAgaHNsOiBuZXcgUmVnRXhwKFwiaHNsXCIgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgICAgIGhzbGE6IG5ldyBSZWdFeHAoXCJoc2xhXCIgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgICAgIGhzdjogbmV3IFJlZ0V4cChcImhzdlwiICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgICAgICBoc3ZhOiBuZXcgUmVnRXhwKFwiaHN2YVwiICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgICAgICBoZXgzOiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8sXG4gICAgICAgIGhleDY6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxcbiAgICAgICAgaGV4NDogL14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxcbiAgICAgICAgaGV4ODogL14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkL1xuICAgIH07XG59KSgpO1xuXG4vLyBgaXNWYWxpZENTU1VuaXRgXG4vLyBUYWtlIGluIGEgc2luZ2xlIHN0cmluZyAvIG51bWJlciBhbmQgY2hlY2sgdG8gc2VlIGlmIGl0IGxvb2tzIGxpa2UgYSBDU1MgdW5pdFxuLy8gKHNlZSBgbWF0Y2hlcnNgIGFib3ZlIGZvciBkZWZpbml0aW9uKS5cbmZ1bmN0aW9uIGlzVmFsaWRDU1NVbml0KGNvbG9yKSB7XG4gICAgcmV0dXJuICEhbWF0Y2hlcnMuQ1NTX1VOSVQuZXhlYyhjb2xvcik7XG59XG5cbi8vIGBzdHJpbmdJbnB1dFRvT2JqZWN0YFxuLy8gUGVybWlzc2l2ZSBzdHJpbmcgcGFyc2luZy4gIFRha2UgaW4gYSBudW1iZXIgb2YgZm9ybWF0cywgYW5kIG91dHB1dCBhbiBvYmplY3Rcbi8vIGJhc2VkIG9uIGRldGVjdGVkIGZvcm1hdC4gIFJldHVybnMgYHsgciwgZywgYiB9YCBvciBgeyBoLCBzLCBsIH1gIG9yIGB7IGgsIHMsIHZ9YFxuZnVuY3Rpb24gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcikge1xuXG4gICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKHRyaW1MZWZ0LCcnKS5yZXBsYWNlKHRyaW1SaWdodCwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIG5hbWVkID0gZmFsc2U7XG4gICAgaWYgKG5hbWVzW2NvbG9yXSkge1xuICAgICAgICBjb2xvciA9IG5hbWVzW2NvbG9yXTtcbiAgICAgICAgbmFtZWQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2xvciA9PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAsIGZvcm1hdDogXCJuYW1lXCIgfTtcbiAgICB9XG5cbiAgICAvLyBUcnkgdG8gbWF0Y2ggc3RyaW5nIGlucHV0IHVzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gICAgLy8gS2VlcCBtb3N0IG9mIHRoZSBudW1iZXIgYm91bmRpbmcgb3V0IG9mIHRoaXMgZnVuY3Rpb24gLSBkb24ndCB3b3JyeSBhYm91dCBbMCwxXSBvciBbMCwxMDBdIG9yIFswLDM2MF1cbiAgICAvLyBKdXN0IHJldHVybiBhbiBvYmplY3QgYW5kIGxldCB0aGUgY29udmVyc2lvbiBmdW5jdGlvbnMgaGFuZGxlIHRoYXQuXG4gICAgLy8gVGhpcyB3YXkgdGhlIHJlc3VsdCB3aWxsIGJlIHRoZSBzYW1lIHdoZXRoZXIgdGhlIHRpbnljb2xvciBpcyBpbml0aWFsaXplZCB3aXRoIHN0cmluZyBvciBvYmplY3QuXG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5yZ2IuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLnJnYmEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc2wuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzbGEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc3YuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzdmEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg4LmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLFxuICAgICAgICAgICAgYTogY29udmVydEhleFRvRGVjaW1hbChtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleDhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4Ni5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhleDQuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0gKyAnJyArIG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSArICcnICsgbWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdICsgJycgKyBtYXRjaFszXSksXG4gICAgICAgICAgICBhOiBjb252ZXJ0SGV4VG9EZWNpbWFsKG1hdGNoWzRdICsgJycgKyBtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleDhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4My5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSArICcnICsgbWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdICsgJycgKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10gKyAnJyArIG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4XCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlV0NBRzJQYXJtcyhwYXJtcykge1xuICAgIC8vIHJldHVybiB2YWxpZCBXQ0FHMiBwYXJtcyBmb3IgaXNSZWFkYWJsZS5cbiAgICAvLyBJZiBpbnB1dCBwYXJtcyBhcmUgaW52YWxpZCwgcmV0dXJuIHtcImxldmVsXCI6XCJBQVwiLCBcInNpemVcIjpcInNtYWxsXCJ9XG4gICAgdmFyIGxldmVsLCBzaXplO1xuICAgIHBhcm1zID0gcGFybXMgfHwge1wibGV2ZWxcIjpcIkFBXCIsIFwic2l6ZVwiOlwic21hbGxcIn07XG4gICAgbGV2ZWwgPSAocGFybXMubGV2ZWwgfHwgXCJBQVwiKS50b1VwcGVyQ2FzZSgpO1xuICAgIHNpemUgPSAocGFybXMuc2l6ZSB8fCBcInNtYWxsXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxldmVsICE9PSBcIkFBXCIgJiYgbGV2ZWwgIT09IFwiQUFBXCIpIHtcbiAgICAgICAgbGV2ZWwgPSBcIkFBXCI7XG4gICAgfVxuICAgIGlmIChzaXplICE9PSBcInNtYWxsXCIgJiYgc2l6ZSAhPT0gXCJsYXJnZVwiKSB7XG4gICAgICAgIHNpemUgPSBcInNtYWxsXCI7XG4gICAgfVxuICAgIHJldHVybiB7XCJsZXZlbFwiOmxldmVsLCBcInNpemVcIjpzaXplfTtcbn1cblxuLy8gTm9kZTogRXhwb3J0IGZ1bmN0aW9uXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gdGlueWNvbG9yO1xufVxuLy8gQU1EL3JlcXVpcmVqczogRGVmaW5lIHRoZSBtb2R1bGVcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7cmV0dXJuIHRpbnljb2xvcjt9KTtcbn1cbi8vIEJyb3dzZXI6IEV4cG9zZSB0byB3aW5kb3dcbmVsc2Uge1xuICAgIHdpbmRvdy50aW55Y29sb3IgPSB0aW55Y29sb3I7XG59XG5cbn0pKE1hdGgpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdGlueWNvbG9yMi90aW55Y29sb3IuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIGVzbGludCBuby1tdWx0aS1zcGFjZXM6IFtcImVycm9yXCIsIHsgZXhjZXB0aW9uczogeyBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOiB0cnVlIH0gfV0gKi9cblxuZXhwb3J0IGNvbnN0IERPTV9FTEVNX0VOVElUWSAgICAgICAgPSAnYmxpdHB1bmstZW50aXR5J1xuZXhwb3J0IGNvbnN0IERPTV9FTEVNX0NBTlZBUyAgICAgICAgPSAnYmxpdHB1bmstY2FudmFzJ1xuZXhwb3J0IGNvbnN0IERPTV9FTEVNX1NDRU5FICAgICAgICAgPSAnYmxpdHB1bmstc2NlbmUnXG5leHBvcnQgY29uc3QgRE9NX0VMRU1fU1BSSVRFX0dST1VQICA9ICdibGl0cHVuay1zcHJpdGUtZ3JvdXAnXG5leHBvcnQgY29uc3QgRE9NX0VMRU1fVEVYVFVSRV9BVExBUyA9ICdibGl0cHVuay10ZXh0dXJlLWF0bGFzJ1xuXG5leHBvcnQgY29uc3QgTk9ERV9OQU1FX0VOVElUWSAgICAgICAgPSBET01fRUxFTV9FTlRJVFkudG9VcHBlckNhc2UoKVxuZXhwb3J0IGNvbnN0IE5PREVfTkFNRV9DQU5WQVMgICAgICAgID0gRE9NX0VMRU1fQ0FOVkFTLnRvVXBwZXJDYXNlKClcbmV4cG9ydCBjb25zdCBOT0RFX05BTUVfU0NFTkUgICAgICAgICA9IERPTV9FTEVNX1NDRU5FLnRvVXBwZXJDYXNlKClcbmV4cG9ydCBjb25zdCBOT0RFX05BTUVfU1BSSVRFX0dST1VQICA9IERPTV9FTEVNX1NQUklURV9HUk9VUC50b1VwcGVyQ2FzZSgpXG5leHBvcnQgY29uc3QgTk9ERV9OQU1FX1RFWFRVUkVfQVRMQVMgPSBET01fRUxFTV9URVhUVVJFX0FUTEFTLnRvVXBwZXJDYXNlKClcblxuZXhwb3J0IGNvbnN0IENPTVBfUFJJT19DTEVBUiAgICAgICAgPSAyMDAwXG5leHBvcnQgY29uc3QgQ09NUF9QUklPX1BST0pFQ1RJT04gICA9IDEwMDBcbmV4cG9ydCBjb25zdCBDT01QX1BSSU9fQkxFTkRfQkVGT1JFID0gNTAwXG5leHBvcnQgY29uc3QgQ09NUF9QUklPX0NISUxEUkVOICAgICA9IDEwMFxuZXhwb3J0IGNvbnN0IENPTVBfUFJJT19CTEVORF9BRlRFUiAgPSAtNTAwXG5cbmV4cG9ydCBjb25zdCBBVFRSX0FMUEhBICAgICAgICAgICAgICAgPSAnYWxwaGEnXG5leHBvcnQgY29uc3QgQVRUUl9BTlRJQUxJQVMgICAgICAgICAgID0gJ2FudGlhbGlhcydcbmV4cG9ydCBjb25zdCBBVFRSX0JMRU5EX01PREUgICAgICAgICAgPSAnYmxlbmQtbW9kZSdcbmV4cG9ydCBjb25zdCBBVFRSX0NBUEFDSVRZICAgICAgICAgICAgPSAnY2FwYWNpdHknXG5leHBvcnQgY29uc3QgQVRUUl9DTEVBUl9DT0xPUiAgICAgICAgID0gJ2NsZWFyLWNvbG9yJ1xuZXhwb3J0IGNvbnN0IEFUVFJfREVQVEggICAgICAgICAgICAgICA9ICdkZXB0aCdcbmV4cG9ydCBjb25zdCBBVFRSX0RFU0NSSVBUT1IgICAgICAgICAgPSAnZGVzY3JpcHRvcidcbmV4cG9ydCBjb25zdCBBVFRSX0ZMSVBfWSAgICAgICAgICAgICAgPSAnZmxpcC15J1xuZXhwb3J0IGNvbnN0IEFUVFJfRlJBR01FTlRfU0hBREVSICAgICA9ICdmcmFnbWVudC1zaGFkZXInXG5leHBvcnQgY29uc3QgQVRUUl9NT0RVTEVfU1JDICAgICAgICAgID0gJ21vZHVsZS1zcmMnXG5leHBvcnQgY29uc3QgQVRUUl9ORUFSRVNUICAgICAgICAgICAgID0gJ25lYXJlc3QnXG5leHBvcnQgY29uc3QgQVRUUl9QUkVNVUxUSVBMSUVEX0FMUEhBID0gJ3ByZW11bHRpcGxpZWQtYWxwaGEnXG5leHBvcnQgY29uc3QgQVRUUl9QUkVNVUxUSVBMWV9BTFBIQSAgID0gJ3ByZW11bHRpcGx5LWFscGhhJ1xuZXhwb3J0IGNvbnN0IEFUVFJfUFJFU0VSVkVfRFJBVyAgICAgICA9ICdwcmVzZXJ2ZS1kcmF3aW5nLWJ1ZmZlcidcbmV4cG9ydCBjb25zdCBBVFRSX1BSSU1JVElWRSAgICAgICAgICAgPSAncHJpbWl0aXZlJ1xuZXhwb3J0IGNvbnN0IEFUVFJfUFJPSkVDVElPTiAgICAgICAgICA9ICdwcm9qZWN0aW9uJ1xuZXhwb3J0IGNvbnN0IEFUVFJfUkVQRUFUQUJMRSAgICAgICAgICA9ICdyZXBlYXRhYmxlJ1xuZXhwb3J0IGNvbnN0IEFUVFJfU1JDICAgICAgICAgICAgICAgICA9ICdzcmMnXG5leHBvcnQgY29uc3QgQVRUUl9TVEVOQ0lMICAgICAgICAgICAgID0gJ3N0ZW5jaWwnXG5leHBvcnQgY29uc3QgQVRUUl9URVhUVVJFX01BUCAgICAgICAgID0gJ3RleHR1cmUtbWFwJ1xuZXhwb3J0IGNvbnN0IEFUVFJfVkVSVEVYX1NIQURFUiAgICAgICA9ICd2ZXJ0ZXgtc2hhZGVyJ1xuZXhwb3J0IGNvbnN0IEFUVFJfVk9fTkVXICAgICAgICAgICAgICA9ICd2by1uZXcnXG5leHBvcnQgY29uc3QgQVRUUl9WT19aRVJPICAgICAgICAgICAgID0gJ3ZvLXplcm8nXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvZG9tL2NvbnN0YW50cy5qcyIsIi8qIGdsb2JhbCBIVE1MRWxlbWVudCAqL1xuaW1wb3J0IGdlbmVyYXRlVVVJRCBmcm9tICcuLi91dGlscy9nZW5lcmF0ZV91dWlkJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJTb3VyY2Uge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBgVkVSVEVYX1NIQURFUmAgb3IgYEZSQUdNRU5UX1NIQURFUmBcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxzdHJpbmd9IHNvdXJjZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHR5cGUsIHNvdXJjZSkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pZCA9IGdlbmVyYXRlVVVJRCgpXG5cbiAgICB0aGlzLnR5cGUgPSB0eXBlXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc291cmNlID0gc291cmNlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBzb3VyY2UudGV4dENvbnRlbnQgOiBzb3VyY2VcbiAgfVxufVxuXG5TaGFkZXJTb3VyY2UuVkVSVEVYX1NIQURFUiA9ICdWRVJURVhfU0hBREVSJ1xuU2hhZGVyU291cmNlLkZSQUdNRU5UX1NIQURFUiA9ICdGUkFHTUVOVF9TSEFERVInXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS9zaGFkZXJfc291cmNlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzTWFwID0gY2FuVXNlTWFwKCk7XG52YXIgaGFzU3ltYm9sID0gY2FuVXNlU3ltYm9sKCk7XG52YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcblxudmFyIHdhcm4gPSBoYXNDb25zb2xlID8gY29uc29sZVtjb25zb2xlLndhcm4gPyAnd2FybicgOiAnbG9nJ10uYmluZChjb25zb2xlKSA6IGZ1bmN0aW9uICgpIHt9O1xuXG52YXIgUFJPUF9OQU1FU1BBQ0UgID0gIWhhc1N5bWJvbCA/ICdAQGV2ZW50aXplJyA6IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFTeW1ib2wuZXZlbnRpemUpIHtcbiAgICAgICAgU3ltYm9sLmV2ZW50aXplID0gU3ltYm9sKCdldmVudGl6ZScpO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLmV2ZW50aXplO1xufSkoKTtcblxudmFyIENBVENIX0FMTF9FVkVOVCA9ICcqJztcbnZhciBMT0dfTkFNRVNQQUNFICAgPSAnW2V2ZW50aXplLmpzXSc7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9cbi8vIGV2ZW50aXplKCBvYmplY3QgKVxuLy9cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBldmVudGl6ZSAobykge1xuXG4gICAgaWYgKG9bUFJPUF9OQU1FU1BBQ0VdKSByZXR1cm4gbztcblxuICAgIHZhciBfZSA9IHtcbiAgICAgICAgbGFzdENhbGxiYWNrSWQgOiAwLFxuICAgICAgICBjYWxsYmFja3MgICAgICA6IHt9LFxuICAgICAgICBib3VuZE9iamVjdHMgICA6IFtdXG4gICAgfTtcblxuICAgIF9lLmNhbGxiYWNrc1tDQVRDSF9BTExfRVZFTlRdID0gW107XG5cbiAgICB2YXIgX2VQdWJsaWMgPSBkZWZpbmVQdWJsaWNQcm9wZXJ0aWVzUk8oe30sIHtcbiAgICAgICAgc2lsZW5jZWQgOiBmYWxzZSxcbiAgICAgICAgb2ZmICAgICAgOiBbXVxuICAgIH0pO1xuXG4gICAgZGVmaW5lSGlkZGVuUHJvcGVydHlSTyhvLCBQUk9QX05BTUVTUEFDRSwgX2VQdWJsaWMpO1xuXG4gICAgaWYgKGV2ZW50aXplLlBSSU9fREVGQVVMVCA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgZGVmaW5lUHVibGljUHJvcGVydGllc1JPKGV2ZW50aXplLCB7XG4gICAgICAgICAgICBQUklPX01BWCAgICAgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICBQUklPX0EgICAgICAgOiAxMDAwMDAwMDAwLFxuICAgICAgICAgICAgUFJJT19CICAgICAgIDogMTAwMDAwMDAsXG4gICAgICAgICAgICBQUklPX0MgICAgICAgOiAxMDAwMDAsXG4gICAgICAgICAgICBQUklPX0RFRkFVTFQgOiAwLFxuICAgICAgICAgICAgUFJJT19MT1cgICAgIDogLTEwMDAwMCxcbiAgICAgICAgICAgIFBSSU9fTUlOICAgICA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyBvYmplY3Qub24oIGV2ZW50TmFtZSwgWyBwcmlvLCBdIGNhbGxiYWNrRnVuYyApXG4gICAgLy8gb2JqZWN0Lm9uKCBldmVudE5hbWUsIFsgcHJpbywgXSBvYmogKVxuICAgIC8vXG4gICAgLy8gb2JqZWN0Lm9uKCBjYWxsYmFja0Z1bmMgKSAgICA9PiBvYmplY3Qub24oICcqJywgY2FsbGJhY2tGdW5jIClcbiAgICAvLyBvYmplY3Qub24oIG9iaiApICAgICAgICAgICAgID0+IG9iamVjdC5vbiggJyonLCBvYmogKVxuICAgIC8vXG4gICAgLy8gb2JqZWN0Lm9uKCBldmVudE5hbWUgKVxuICAgIC8vIG9iamVjdC5vbigpXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgby5vbiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIHByaW8sIGZuKSB7ICAvLyAtLS0ge3t7XG5cbiAgICAgICAgdmFyIGFyZ3NMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChhcmdzTGVuID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoX2VQdWJsaWMuc2lsZW5jZWQpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQdWJsaWNQcm9wZXJ0eVJPKF9lUHVibGljLCAnc2lsZW5jZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgX2VQdWJsaWMub2ZmLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcblxuICAgICAgICBpZiAoYXJnc0xlbiA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudE5hbWUgPT09ICdzdHJpbmcnKSB7XG5cbiAgICAgICAgICAgICAgICBpID0gX2VQdWJsaWMub2ZmLmluZGV4T2YoZXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIF9lUHVibGljLm9mZi5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgZXZlbnROYW1lID09PSAnZnVuY3Rpb24nKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBhbGlhcyBmb3I6IG9uKCcqJywgbGlzdGVuZXIpXG5cbiAgICAgICAgICAgICAgICBmbiA9IGV2ZW50TmFtZTtcbiAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBDQVRDSF9BTExfRVZFTlQ7XG4gICAgICAgICAgICAgICAgcHJpbyA9IGV2ZW50aXplLlBSSU9fREVGQVVMVDtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzQ29uc29sZSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKExPR19OQU1FU1BBQ0UsICcub24oKSBjYWxsZWQgd2l0aCBpbnN1ZmZpY2llbnQgYXJndW1lbnRzIScsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcmdzTGVuID09PSAyKSB7XG4gICAgICAgICAgICBmbiA9IHByaW87XG4gICAgICAgICAgICBwcmlvID0gZXZlbnRpemUuUFJJT19ERUZBVUxUO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV2ZW50aXplQ2FsbGJhY2tzID0gX2UuY2FsbGJhY2tzO1xuICAgICAgICB2YXIgZXZlbnRMaXN0ZW5lciA9IGV2ZW50aXplQ2FsbGJhY2tzW2V2ZW50TmFtZV0gfHwgKGV2ZW50aXplQ2FsbGJhY2tzW2V2ZW50TmFtZV0gPSBbXSk7XG4gICAgICAgIHZhciBsaXN0ZW5lcklkID0gY3JlYXRlSWQoKTtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZGVmaW5lUHVibGljUHJvcGVydGllc1JPKHt9LCB7XG4gICAgICAgICAgICBpZCAgICAgICAgIDogbGlzdGVuZXJJZCxcbiAgICAgICAgICAgIGZuICAgICAgICAgOiBmbixcbiAgICAgICAgICAgIHByaW8gICAgICAgOiAodHlwZW9mIHByaW8gIT09ICdudW1iZXInID8gZXZlbnRpemUuUFJJT19ERUZBVUxUIDogcHJpbyksXG4gICAgICAgICAgICBpc0Z1bmN0aW9uIDogKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV2ZW50TGlzdGVuZXIucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGV2ZW50TGlzdGVuZXIuc29ydChzb3J0TGlzdGVuZXJCeVByaW8pO1xuXG4gICAgICAgIHJldHVybiBsaXN0ZW5lcklkO1xuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUlkICgpIHtcbiAgICAgICAgcmV0dXJuICsrX2UubGFzdENhbGxiYWNrSWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc29ydExpc3RlbmVyQnlQcmlvIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLnByaW8gIT09IGIucHJpbyA/IGIucHJpbyAtIGEucHJpbyA6IGEuaWQgLSBiLmlkO1xuICAgIH1cblxuICAgIC8vIC0tLSBvbiB9fX1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vIG9iamVjdC5vbmNlKCBldmVudE5hbWUsIFsgcHJpbywgXSBjYWxsYmFja0Z1bmMgKVxuICAgIC8vIG9iamVjdC5vbmNlKCBldmVudE5hbWUsIFsgcHJpbywgXSBvYmogKVxuICAgIC8vXG4gICAgLy8gb2JqZWN0Lm9uY2UoIGNhbGxiYWNrRnVuYyApICAgICAgPT4gb2JqZWN0Lm9uY2UoICcqJywgY2FsbGJhY2tGdW5jIClcbiAgICAvLyBvYmplY3Qub25jZSggb2JqICkgICAgICAgICAgICAgICA9PiBvYmplY3Qub25jZSggJyonLCBvYmogKVxuICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgby5vbmNlID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgcHJpbywgZm4pIHsgIC8vIC0tLSB7e3tcblxuICAgICAgICB2YXIgYXJnc0xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFhcmdzTGVuIHx8IGFyZ3NMZW4gPiAzKSB7XG4gICAgICAgICAgICBpZiAoaGFzQ29uc29sZSkge1xuICAgICAgICAgICAgICAgIHdhcm4oTE9HX05BTUVTUEFDRSwgJy5vbmNlKCkgY2FsbGVkIHdpdGggaW5zdWZmaWNpZW50IGFyZ3VtZW50cyEnLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFyZ3NMZW4gPT09IDEpIHtcblxuICAgICAgICAgICAgZm4gPSBldmVudE5hbWU7XG4gICAgICAgICAgICBldmVudE5hbWUgPSBDQVRDSF9BTExfRVZFTlQ7XG4gICAgICAgICAgICBwcmlvID0gZXZlbnRpemUuUFJJT19ERUZBVUxUO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoYXJnc0xlbiA9PT0gMikge1xuXG4gICAgICAgICAgICBmbiA9IHByaW87XG4gICAgICAgICAgICBwcmlvID0gZXZlbnRpemUuUFJJT19ERUZBVUxUO1xuXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaWQgPSBvLm9uKGV2ZW50TmFtZSwgcHJpbywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBvLm9mZihpZCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaWQ7XG5cbiAgICB9O1xuXG4gICAgLy8gLS0tIG9uY2UgfX19XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gb2JqZWN0Lm9mZiggaWQgKVxuICAgIC8vIG9iamVjdC5vZmYoIGNhbGxiYWNrIClcbiAgICAvLyBvYmplY3Qub2ZmKCBvYmogKVxuICAgIC8vIG9iamVjdC5vZmYoIGV2ZW50TmFtZSApXG4gICAgLy8gb2JqZWN0Lm9mZigpXG4gICAgLy9cbiAgICAvLyBkZWFjdGl2ZSBsaXN0ZW5lciBieSBpZCBvciBwcmV2aW91c2x5IGJvdW5kIG9iamVjdCBvclxuICAgIC8vIGZ1bmN0aW9uIHJlZmVyZW5jZSBvciBldmVudCBuYW1lIG9yIHNpbGVuY2UgYWxsIGV2ZW50c1xuICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIG8ub2ZmID0gZnVuY3Rpb24gKGlkKSB7ICAvLyAtLSB7e3tcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKCFfZVB1YmxpYy5zaWxlbmNlZCkge1xuICAgICAgICAgICAgICAgIGRlZmluZVB1YmxpY1Byb3BlcnR5Uk8oX2VQdWJsaWMsICdzaWxlbmNlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIF9lUHVibGljLm9mZi5sZW5ndGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBieSBldmVudCBuYW1lXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgaWYgKF9lUHVibGljLm9mZi5pbmRleE9mKGlkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBfZVB1YmxpYy5vZmYucHVzaChpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXZlbnRpemVDYWxsYmFja3MgPSBfZS5jYWxsYmFja3M7XG4gICAgICAgIHZhciBjYiwgaSwgaiwgX2NhbGxiYWNrcywga2V5cztcbiAgICAgICAgdmFyIGlzT2JqZWN0ID0gdHlwZW9mIGlkID09PSAnb2JqZWN0JztcblxuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgaWQgPT09ICdmdW5jdGlvbicgfHwgaXNPYmplY3QpIHtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBieSBpZCBvciBmdW5jdGlvbiByZWZlcmVuY2VcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRpemVDYWxsYmFja3MpO1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBfY2FsbGJhY2tzID0gZXZlbnRpemVDYWxsYmFja3Nba2V5c1tqXV07XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IF9jYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2IgPSBfY2FsbGJhY2tzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2IuaWQgPT09IGlkIHx8IGNiLmZuID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzT2JqZWN0KSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNPYmplY3QpIHtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBieSBib3VuZCBvYmplY3QgcmVmZXJlbmNlXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgaSA9IF9lLmJvdW5kT2JqZWN0cy5pbmRleE9mKGlkKTtcbiAgICAgICAgICAgIGlmICggaSA+PSAwICkge1xuICAgICAgICAgICAgICAgIF9lLmJvdW5kT2JqZWN0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICAvLyAtLS0gb2ZmIH19fVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vIG9iamVjdC5jb25uZWN0KCBvYmosIG1hcHBpbmcgKVxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vICAgb2JqZWN0LmNvbm5lY3Qob3B0aW9ucywge1xuICAgIC8vICAgICAgICBvblByb2plY3Rpb25VcGRhdGVkIDogWzEwMCwgJ3Byb2plY3Rpb25VcGRhdGVkJ10sXG4gICAgLy8gICAgICAgIG9uRnJhbWUgICAgICAgICAgICAgOiAnZnJhbWUnLFxuICAgIC8vICAgICAgICBvbkZyYW1lRW5kICAgICAgICAgIDogJ2ZyYW1lRW5kJ1xuICAgIC8vICAgfSlcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBvLmNvbm5lY3QgPSBmdW5jdGlvbiAob2JqLCBtYXBwaW5nKSB7ICAvLyAtLS0ge3t7XG4gICAgICAgIHZhciBhcmdzTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ3NMZW4gPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBfY29ubmVjdFdpdGhNYXBwaW5nKHRoaXMsIG9iaiwgbWFwcGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaGFzQ29uc29sZSkge1xuICAgICAgICAgICAgICAgIHdhcm4oTE9HX05BTUVTUEFDRSwgJy5jb25uZWN0KCkgY2FsbGVkIHdpdGggaW5zdWZmaWNpZW50IGFyZ3VtZW50cyAobmVlZCAyIGFyZ3MsIGJ1dCBnb3QgJyArIGFyZ3NMZW4gKyAnKScsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX2JpbmRPYmplY3QgKG9iaikge1xuXG4gICAgICAgIC8vIFRPRE8gY29ubmVjdChvYmopIHNob3VsZCAuLlxuICAgICAgICAvLyAtIHN1cHBvcnQgcHJpb3JpdHlcbiAgICAgICAgLy8gLSBzdXBwb3J0IGZpbHRlcnM/ICh2aWEgb25seSwgZXhjZXB0IG9wdGlvbnMpXG4gICAgICAgIC8vIC0gc3VwcG9ydCBzZW5kZXJDb250ZXh0QXJndW1lbnQ/OiAncHJlcGVuZCd8J2FwcGVuZCd8ZmFsc2VcblxuICAgICAgICBpZiAoIW9iaikgcmV0dXJuO1xuICAgICAgICB2YXIgaSA9IF9lLmJvdW5kT2JqZWN0cy5pbmRleE9mKG9iaik7XG4gICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgICAgX2UuYm91bmRPYmplY3RzLnB1c2gob2JqKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2Nvbm5lY3RXaXRoTWFwcGluZyAob2JqLCBvcHRpb25zLCBsaXN0ZW5lck1hcCkge1xuXG4gICAgICAgIHZhciBldmVudE5hbWUsIGxpc3Rlbk5hbWUsIGxpc3RlbkZ1bmMsIHByaW87XG5cbiAgICAgICAgZm9yIChsaXN0ZW5OYW1lIGluIGxpc3RlbmVyTWFwKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJNYXAuaGFzT3duUHJvcGVydHkobGlzdGVuTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5GdW5jID0gb3B0aW9uc1tsaXN0ZW5OYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbkZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gbGlzdGVuZXJNYXBbbGlzdGVuTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW8gPSBldmVudE5hbWVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBldmVudE5hbWVbMV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlvID0gZXZlbnRpemUuUFJJT19ERUZBVUxUO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9iai5vbihldmVudE5hbWUsIHByaW8sIGxpc3RlbkZ1bmMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmo7XG5cbiAgICB9XG5cbiAgICAvLyAtLS0gY29ubmVjdCB9fX1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyBvYmplY3QuZW1pdCggZXZlbnROYW1lIFssIGFyZ3VtZW50cyAuLiBdIClcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBvLmVtaXQgPSBmdW5jdGlvbiAoKSB7ICAvLyAtLS0ge3t7XG5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BldGthYW50b25vdi9ibHVlYmlyZC93aWtpL09wdGltaXphdGlvbi1raWxsZXJzIzMtbWFuYWdpbmctYXJndW1lbnRzXG4gICAgICAgIHZhciBhcmdzV2l0aEV2ZW50TmFtZSA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzV2l0aEV2ZW50TmFtZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYXJnc1dpdGhFdmVudE5hbWVbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXZlbnROYW1lID0gYXJnc1dpdGhFdmVudE5hbWVbMF07XG4gICAgICAgIHZhciBhcmdzV2l0aG91dEV2ZW50TmFtZSA9IGFyZ3NXaXRoRXZlbnROYW1lLnNsaWNlKDEpO1xuICAgICAgICB2YXIgc2VuZGVyQ3R4ID0gdGhpcztcblxuICAgICAgICBfZGlzcGF0Y2goZXZlbnROYW1lLCBmdW5jdGlvbiAobGlzdGVuZXIpIHtcblxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyLmlzRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5mbi5hcHBseShzZW5kZXJDdHgsIGFyZ3NXaXRob3V0RXZlbnROYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGZuID0gbGlzdGVuZXIuZm5bZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGZuLmFwcGx5KGxpc3RlbmVyLmZuLCBhcmdzV2l0aG91dEV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lci5mbi5lbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmZuLmVtaXQuYXBwbHkobGlzdGVuZXIuZm4sIGFyZ3NXaXRoRXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSwgZnVuY3Rpb24gKGZuLCBib3VuZE9iaikge1xuXG4gICAgICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgICAgICBmbi5hcHBseShib3VuZE9iaiwgYXJnc1dpdGhvdXRFdmVudE5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChib3VuZE9iai5lbWl0KSB7XG4gICAgICAgICAgICAgICAgYm91bmRPYmouZW1pdC5hcHBseShib3VuZE9iaiwgYXJnc1dpdGhFdmVudE5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2Rpc3BhdGNoIChldmVudE5hbWUsIGVtaXRMaXN0ZW5lciwgZW1pdEJvdW5kT2JqZWN0KSB7XG5cbiAgICAgICAgaWYgKF9lUHVibGljLnNpbGVuY2VkKSByZXR1cm47XG4gICAgICAgIGlmIChfZVB1YmxpYy5vZmYuaW5kZXhPZihldmVudE5hbWUpID49IDApIHJldHVybjtcblxuICAgICAgICB2YXIgbGlzdGVuZXJzICAgICAgICAgICAgICA9IF9lLmNhbGxiYWNrc1tldmVudE5hbWVdO1xuICAgICAgICB2YXIgY2F0Y2hBbGxMaXN0ZW5lcnMgICAgICA9IF9lLmNhbGxiYWNrc1tDQVRDSF9BTExfRVZFTlRdO1xuICAgICAgICB2YXIgYm91bmRPYmpzQ291bnQgICAgICAgICA9IF9lLmJvdW5kT2JqZWN0cy5sZW5ndGg7XG4gICAgICAgIHZhciBoYXNCb3VuZE9iamVjdHNFbWl0dGVkID0gZmFsc2U7XG5cbiAgICAgICAgZnVuY3Rpb24gX2VtaXRCb3VuZE9iamVjdHMgKCkge1xuICAgICAgICAgICAgdmFyIGosIGJvLCBmbjtcbiAgICAgICAgICAgIGlmIChib3VuZE9ianNDb3VudCkge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBib3VuZE9ianNDb3VudDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvID0gX2UuYm91bmRPYmplY3RzW2pdO1xuICAgICAgICAgICAgICAgICAgICBmbiA9IGJvW2V2ZW50TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRCb3VuZE9iamVjdChmbiwgYm8pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvW1BST1BfTkFNRVNQQUNFXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdEJvdW5kT2JqZWN0KG51bGwsIGJvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpLCBsZW4sIGxpc3RlbjtcblxuICAgICAgICBpZiAobGlzdGVuZXJzIHx8IGNhdGNoQWxsTGlzdGVuZXJzLmxlbmd0aCkge1xuXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgPyBsaXN0ZW5lcnMuY29uY2F0KGNhdGNoQWxsTGlzdGVuZXJzKSA6IGNhdGNoQWxsTGlzdGVuZXJzO1xuICAgICAgICAgICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuID0gbGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghaGFzQm91bmRPYmplY3RzRW1pdHRlZCAmJiBsaXN0ZW4gJiYgbGlzdGVuLnByaW8gPCBldmVudGl6ZS5QUklPX0RFRkFVTFQpIHtcbiAgICAgICAgICAgICAgICAgICAgX2VtaXRCb3VuZE9iamVjdHMoKTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQm91bmRPYmplY3RzRW1pdHRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVtaXRMaXN0ZW5lcihsaXN0ZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoYXNCb3VuZE9iamVjdHNFbWl0dGVkKSBfZW1pdEJvdW5kT2JqZWN0cygpO1xuXG4gICAgfVxuXG4gICAgLy8gLS0tIGVtaXQgfX19XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gb2JqZWN0LmVtaXRSZWR1Y2UoIGV2ZW50TmFtZSBbLCB2YWx1ZT0ge30gXSBbLCBhcmd1bWVudHMgLi4gXSApXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgby5lbWl0UmVkdWNlID0gZnVuY3Rpb24gKCkgeyAgLy8gLS0tIHt7e1xuXG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXZlbnROYW1lID0gYXJncy5zaGlmdCgpO1xuICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0VmFsdWUgKHZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0ge307XG4gICAgICAgICAgICBhcmdzLnB1c2godmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VmFsdWUoYXJnc1swXSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3R4ID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3NXaXRoRXZlbnROYW1lID0gW2V2ZW50TmFtZV0uY29uY2F0KGFyZ3MpO1xuXG4gICAgICAgIF9kaXNwYXRjaChldmVudE5hbWUsIGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuXG4gICAgICAgICAgICBpZiAobGlzdGVuZXIuaXNGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBzZXRWYWx1ZShsaXN0ZW5lci5mbi5hcHBseShjdHgsIGFyZ3MpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGZuID0gbGlzdGVuZXIuZm5bZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZm4uYXBwbHkobGlzdGVuZXIuZm4sIGFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RlbmVyLmZuLmVtaXRSZWR1Y2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1dpdGhFdmVudE5hbWVbMV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUobGlzdGVuZXIuZm4uZW1pdFJlZHVjZS5hcHBseShsaXN0ZW5lci5mbiwgYXJnc1dpdGhFdmVudE5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSwgZnVuY3Rpb24gKGZuLCBib3VuZE9iaikge1xuXG4gICAgICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgICAgICBhcmdzWzBdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUoZm4uYXBwbHkoYm91bmRPYmosIGFyZ3MpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG5cbiAgICB9O1xuXG4gICAgLy8gLS0tIGVtaXQgfX19XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gb2JqZWN0LmZyb20oIGV2ZW50TmFtZSwgT2JzZXJ2YWJsZSApXG4gICAgLy9cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vICAgICAgb2JqZWN0XG4gICAgLy8gICAgICAgICAgLmZyb20oJ2ZvbycsIFJ4Lk9ic2VydmFibGUpXG4gICAgLy8gICAgICAgICAgLmZpbHRlcih4ID0+IHggJSAyID09PSAwKVxuICAgIC8vICAgICAgICAgIC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gICAgLy9cbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBvLmZyb20gPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBvYnNlcnZhYmxlKSB7ICAvLyAtLS0ge3t7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBvYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuXG4gICAgICAgICAgICB2YXIgaWQgPSBzZWxmLm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vZmYoaWQpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gLS0tIGZyb20gfX19XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gb2JqZWN0LnN1YnNjcmliZSggT2JzZXJ2YWJsZSwgb25OZXh0Wywgb25FcnJvcl1bLCBvbkNvbXBsZXRlXSApXG4gICAgLy9cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vXG4gICAgLy8gICAgICBvYmplY3Quc3Vic2NyaWJlKGEsICd2YWx1ZScsICdlcnJvcicpOyAgIC8vIGEgPT4gT2JzZXJ2YWJsZVxuICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIG8uc3Vic2NyaWJlID0gZnVuY3Rpb24gKHNvdXJjZSwgb25OZXh0LCBvbkVycm9yLCBvbkNvbXBsZXRlKSB7ICAvLyAtLS0ge3t7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzZWxmLmVtaXQob25OZXh0LCB2YWx1ZSk7XG4gICAgICAgIH0sIG9uRXJyb3IgPyBmdW5jdGlvbiAoZXJyb3JWYWx1ZSkge1xuICAgICAgICAgICAgc2VsZi5lbWl0KG9uRXJyb3IsIGVycm9yVmFsdWUpO1xuICAgICAgICB9IDogdW5kZWZpbmVkLCBvbkNvbXBsZXRlID8gZnVuY3Rpb24gKGNvbXBsZXRlVmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGYuZW1pdChvbkNvbXBsZXRlLCBjb21wbGV0ZVZhbHVlKTtcbiAgICAgICAgfSA6IHVuZGVmaW5lZCk7XG4gICAgfTtcblxuICAgIC8vIC0tLSBzdWJzY3JpYmUgfX19XG5cbiAgICByZXR1cm4gbztcblxufSAvLyA8PSBldmVudGl6ZSgpXG5cblxuZXZlbnRpemUuaXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuICEhKCBvYmogJiYgb2JqW1BST1BfTkFNRVNQQUNFXSApO1xufTtcblxuXG5kZWZpbmVIaWRkZW5Qcm9wZXJ0eVJPKCBldmVudGl6ZSxcbiAgICAnRXZlbnRpemVOYW1lc3BhY2UnLCBQUk9QX05BTUVTUEFDRSk7XG5cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyBldmVudGl6ZS5xdWV1ZShbIHF1ZXVlSWQgXVssIG9wdGlvbnNdKSA6IHF1ZXVlXG4vL1xuLy8gb3B0aW9ucyBhcmU6XG4vLyAgICAtIHJlcGxhY2U6IHRydWV8ZmFsc2UgIC0gcmVwbGFjZSBwcmV2aW91cyBldmVudHMgd2l0aCBzYW1lIG5hbWVcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHF1ZXVlIGlzIGluIGNvbGxlY3Rpb24gbW9kZVxuLy9cbi8vIHF1ZXVlLnBsYXkoKSAgICAgICAgICAgICAgLSBhY3RpdmF0ZSBwbGF5IChpbW1lZGlhdGVseSBlbWl0KSBtb2RlXG4vLyBxdWV1ZS5jb2xsZWN0KCkgICAgICAgICAgIC0gYWN0aXZhdGUgY29sbGVjdGlvbiAoc3RvcmUgYWxsIGV2ZW50cykgbW9kZVxuLy8gcXVldWUudG9nZ2xlKCkgICAgICAgICAgICAtIHRvZ2dsZSBzdGF0ZVxuLy8gcXVldWUuc3RhdGUgICAgICAgICAgICAgICAtICdwbGF5J3wnY29sbGVjdCdcbi8vXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5kZWZpbmVIaWRkZW5Qcm9wZXJ0eVJPKGV2ZW50aXplLCAncXVldWVzJywgaGFzTWFwID8gbmV3IE1hcCA6IHt9KTtcblxuZXZlbnRpemUucXVldWUgPSBmdW5jdGlvbiAoaWQvKiwgb3B0aW9ucyAqLykge1xuXG4gICAgdmFyIHF1ZXVlLCBvcHRpb25zO1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbiA+PSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaWQgIT09ICdvYmplY3QnIHx8IGxlbiA9PT0gMikge1xuICAgICAgICAgICAgcXVldWUgPSBoYXNNYXAgPyBldmVudGl6ZS5xdWV1ZXMuZ2V0KGlkKSA6IGV2ZW50aXplLnF1ZXVlc1tpZF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbiA9PT0gMikge1xuICAgICAgICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgfSBlbHNlIGlmIChsZW4gPT09IDEgJiYgdHlwZW9mIGlkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IGlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFxdWV1ZSkge1xuICAgICAgICBxdWV1ZSA9IGNyZWF0ZVF1ZXVlKGlkLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGhhc01hcCkge1xuICAgICAgICAgICAgZXZlbnRpemUucXVldWVzLnNldChxdWV1ZS5pZCwgcXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXZlbnRpemUucXVldWVzW3F1ZXVlLmlkXSA9IHF1ZXVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXVlO1xuXG59O1xuXG5cbnZhciBTVEFURSA9ICdzdGF0ZSc7XG52YXIgUExBWSA9ICdwbGF5JztcbnZhciBDT0xMRUNUID0gJ2NvbGxlY3QnO1xuXG5mdW5jdGlvbiBjcmVhdGVRdWV1ZSAoaWQsIG9wdGlvbnMpIHtcblxuICAgIHZhciBxdWV1ZUlkID0gKCh0eXBlb2YgaWQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBpZCA9PT0gJ3N5bWJvbCcpICYmIGlkKSB8fCBjcmVhdGVVdWlkKCk7XG4gICAgdmFyIHF1ZXVlID0gZXZlbnRpemUoe30pO1xuICAgIHZhciBpc1JlcGxhY2UgPSAhIShvcHRpb25zICYmIG9wdGlvbnMucmVwbGFjZSk7XG5cbiAgICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgZGVmaW5lUHVibGljUHJvcGVydHlSTyhxdWV1ZSwgU1RBVEUsIHN0YXRlKTtcbiAgICB9O1xuXG4gICAgdmFyIGVtaXQgPSAoZnVuY3Rpb24gKF9lbWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgIF9lbWl0LmFwcGx5KHF1ZXVlLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9KShxdWV1ZS5lbWl0KTtcblxuICAgIGRlZmluZUhpZGRlblByb3BlcnR5Uk8ocXVldWUsICdldmVudHMnLCBbXSk7XG4gICAgZGVmaW5lUHVibGljUHJvcGVydHlSTyhxdWV1ZSwgJ2lkJywgcXVldWVJZCk7XG5cbiAgICBxdWV1ZS5jb2xsZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocXVldWVbU1RBVEVdICE9PSBDT0xMRUNUKSB7XG4gICAgICAgICAgICBzZXRTdGF0ZShDT0xMRUNUKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcXVldWU7XG4gICAgfTtcblxuICAgIHF1ZXVlLmVtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHF1ZXVlW1NUQVRFXSA9PT0gUExBWSkge1xuICAgICAgICAgICAgZW1pdChhcmdzKTtcbiAgICAgICAgfSBlbHNlIHsgIC8vIENPTExFQ1RcbiAgICAgICAgICAgIGlmIChpc1JlcGxhY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGVuLCBldmVudE5hbWUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHF1ZXVlLmV2ZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocXVldWUuZXZlbnRzW2ldWzBdID09PSBldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLmV2ZW50c1tpXSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWV1ZS5ldmVudHMucHVzaChhcmdzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBxdWV1ZS5wbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocXVldWVbU1RBVEVdICE9PSBQTEFZKSB7XG4gICAgICAgICAgICBzZXRTdGF0ZShQTEFZKTtcbiAgICAgICAgICAgIHF1ZXVlLmV2ZW50cy5mb3JFYWNoKGVtaXQpO1xuICAgICAgICAgICAgcXVldWUuZXZlbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1ZXVlO1xuICAgIH07XG5cbiAgICBxdWV1ZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBxdWV1ZVtTVEFURV0gIT09IFBMQVkgPyBxdWV1ZS5wbGF5KCkgOiBxdWV1ZS5jb2xsZWN0KCk7XG4gICAgfTtcblxuICAgIHJldHVybiBxdWV1ZS5wbGF5KCk7XG5cbn1cblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyBoZWxwZXIgZnVuY3Rpb25zXG4vL1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuZnVuY3Rpb24gY3JlYXRlVXVpZCAoKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvY3JlYXRlLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XG4gICAgdmFyIHV1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSoxNnwwLCB2ID0gYyA9PSAneCcgPyByIDogKHImMHgzfDB4OCk7XG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbiAgICByZXR1cm4gaGFzU3ltYm9sID8gU3ltYm9sKHV1aWQpIDogdXVpZDtcbn1cblxuZnVuY3Rpb24gY2FuVXNlU3ltYm9sICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbmZ1bmN0aW9uIGNhblVzZU1hcCAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVQdWJsaWNQcm9wZXJ0eVJPIChvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgICB2YWx1ZSAgICAgICAgOiB2YWx1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlIDogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZSAgIDogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGRlZmluZVB1YmxpY1Byb3BlcnRpZXNSTyAob2JqLCBhdHRycykge1xuICAgIHZhciBpLCBrZXlzID0gT2JqZWN0LmtleXMoYXR0cnMpO1xuICAgIGZvciAoaSA9IGtleXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGRlZmluZVB1YmxpY1Byb3BlcnR5Uk8ob2JqLCBrZXlzW2ldLCBhdHRyc1trZXlzW2ldXSk7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUhpZGRlblByb3BlcnR5Uk8gKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB7XG4gICAgICAgIHZhbHVlICAgICAgICA6IHZhbHVlLFxuICAgICAgICBjb25maWd1cmFibGUgOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn1cblxuXG4vLyAtLS0gZW5kXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBldmVudGl6ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0BzcGVhcndvbGYvZXZlbnRpemUvc3JjL2V2ZW50aXplLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanNcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanNcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IGlzUG93ZXJPZjIsIGZpbmROZXh0UG93ZXJPZjIgfSBmcm9tICcuLi91dGlscy9tYXRoX2hlbHBlcnMnXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGA8aW1nPmAgb3IgYDxjYW52YXM+YCBlbGVtZW50IHdoaWNoIHNpemVzICh3aWR0aCBhbmQgaGVpZ2h0KSBhcmVcbiAqIGFsd2F5cyBwb3dlciBvZiAyLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3dlck9mMkltYWdlIHtcbiAgLyoqXG4gICAqIElmIGltYWdlIGRpbWVuc2lvbiBpcyBOT1QgcG93ZXIgb2YgMiB0aGVuIGNyZWF0ZSBhIG5ldyBgPGNhbnZhcz5gXG4gICAqICh3aXRoIHBvd2VyIG9mIDIgZGltZW5zaW9uKSBhbmQgY29weSB0aGUgb3JpZ2luYWwgaW1hZ2UgY29udGVudCBvbnRvIGl0LlxuICAgKiBTaW5jZSBmZXRjaGluZyBpbWdlIGRhdGEgZnJvbSBzZXJ2ZXIgaXMgYSAqYXN5bmMqIG9wZXJhdGlvbiB0aGUgYGltZ0VsYCBwcm9wZXJ0eVxuICAgKiBjYW4gYmUgYG51bGxgIHJpZ2h0IGFmdGVyIG9iamVjdCBjb25zdHJ1Y3Rpb24gYW5kIHdpbGwgYmUgc2V0IGxhdGVyIGFmdGVyXG4gICAqIGltYWdlIGlzIGxvYWRlZCAoYW5kIHBvc3NpYmxlIGNvbnZlcnRlZCkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR9IGZyb20gLSB1cmwgb3IgaHRtbCAqaW1hZ2UqIGVsZW1lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChmcm9tKSB7XG4gICAgbGV0IGltZ0VsXG4gICAgaWYgKHR5cGVvZiBmcm9tID09PSAnc3RyaW5nJykge1xuICAgICAgaW1nRWwgPSBuZXcgd2luZG93LkltYWdlKClcbiAgICAgIGltZ0VsLnNyYyA9IGZyb21cbiAgICB9IGVsc2Uge1xuICAgICAgaW1nRWwgPSBmcm9tXG4gICAgfVxuICAgIGlmIChpbWdFbC5jb21wbGV0ZSA9PT0gZmFsc2UgfHwgKGltZ0VsLndpZHRoID09PSAwICYmIGltZ0VsLmhlaWdodCA9PT0gMCkpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR9XG4gICAgICAgKi9cbiAgICAgIHRoaXMuaW1nRWwgPSBudWxsXG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtQcm9taXNlPFBvd2VyT2YySW1hZ2U+fVxuICAgICAgICovXG4gICAgICB0aGlzLmNvbXBsZXRlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGNvbnN0IG9yaWdPbkxvYWQgPSBpbWdFbC5vbmxvYWRcbiAgICAgICAgaW1nRWwub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChvcmlnT25Mb2FkKSBvcmlnT25Mb2FkLmNhbGwoaW1nRWwpXG4gICAgICAgICAgc2V0UG93ZXJPZjJJbWdFbCh0aGlzLCBpbWdFbClcbiAgICAgICAgICByZXNvbHZlKHRoaXMpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFBvd2VyT2YySW1nRWwodGhpcywgaW1nRWwpXG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtQcm9taXNlPFBvd2VyT2YySW1hZ2U+fVxuICAgICAgICovXG4gICAgICB0aGlzLmNvbXBsZXRlID0gUHJvbWlzZS5yZXNvbHZlKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgYm9vbGVhbiB0aGF0IGlzIGB0cnVlYCBpZiB0aGUgaW1hZ2UgaGFzIGxvYWRlZCBhbmQgcG9zc2libGUgY29udmVydGVkLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc0NvbXBsZXRlICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbWdFbCAhPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpbWFnZSB3aWR0aCBvciBgMGAgaWYgaW1hZ2UgbG9hZGluZyBpcyBub3QgZmluaXNoZWQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgd2lkdGggKCkge1xuICAgIHJldHVybiAodGhpcy5pbWdFbCAmJiB0aGlzLmltZ0VsLndpZHRoKSB8fCAwXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpbWFnZSBoZWlnaHQgb3IgYDBgIGlmIGltYWdlIGxvYWRpbmcgaXMgbm90IGZpbmlzaGVkLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGhlaWdodCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLmltZ0VsICYmIHRoaXMuaW1nRWwuaGVpZ2h0KSB8fCAwXG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0UG93ZXJPZjJJbWdFbCAocDJpbWcsIGltZ0VsKSB7XG4gIHAyaW1nLmltZ0VsID0gaXNQb3dlck9mMihpbWdFbC53aWR0aCkgJiYgaXNQb3dlck9mMihpbWdFbC5oZWlnaHQpID8gaW1nRWwgOiBjb252ZXJ0VG9Qb3dlck9mMihpbWdFbClcbiAgcDJpbWcub3JpZ1dpZHRoID0gaW1nRWwud2lkdGhcbiAgcDJpbWcub3JpZ0hlaWdodCA9IGltZ0VsLmhlaWdodFxufVxuXG5mdW5jdGlvbiBjb252ZXJ0VG9Qb3dlck9mMiAoaW1hZ2UpIHtcbiAgY29uc3QgdyA9IGZpbmROZXh0UG93ZXJPZjIoaW1hZ2Uud2lkdGgpXG4gIGNvbnN0IGggPSBmaW5kTmV4dFBvd2VyT2YyKGltYWdlLmhlaWdodClcblxuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICBjYW52YXMud2lkdGggPSB3XG4gIGNhbnZhcy5oZWlnaHQgPSBoXG4gIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShpbWFnZSwgMCwgMClcblxuICByZXR1cm4gY2FudmFzXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS9wb3dlcl9vZl8yX2ltYWdlLmpzIiwiaW1wb3J0IFNoYWRlclZhcmlhYmxlIGZyb20gJy4vc2hhZGVyX3ZhcmlhYmxlJ1xuXG4vKipcbiAqIFNoYWRlciB0ZXh0dXJlIDJkIHZhcmlhYmxlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJUZXh0dXJlMmRWYXJpYWJsZSBleHRlbmRzIFNoYWRlclZhcmlhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gdmFsdWVcbiAgICovXG4gIGNvbnN0cnVjdG9yIChuYW1lLCB2YWx1ZSkge1xuICAgIHN1cGVyKG5hbWUsIFNoYWRlclZhcmlhYmxlLlRZUEUuVEVYVFVSRV8yRCwgdmFsdWUpXG4gICAgdGhpcy50ZXh0dXJlID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIFN5bmMgdGV4dHVyZSB0byBncHUgYW5kIHVwZGF0ZSBgLnZhbHVlYCB0byB0aGUgZ2wgdGV4dHVyZSB1bml0LlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYkdsUmVuZGVyZXJ9IHJlbmRlcmVyXG4gICAqL1xuICBzeW5jVGV4dHVyZUFuZFZhbHVlIChyZW5kZXJlcikge1xuICAgIGlmICh0aGlzLnRleHR1cmUgIT0gbnVsbCkge1xuICAgICAgY29uc3QgZ2xUZXggPSByZW5kZXJlci5zeW5jVGV4dHVyZSh0aGlzLnRleHR1cmUpXG4gICAgICB0aGlzLnZhbHVlID0gZ2xUZXguYmluZCgpXG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS9zaGFkZXJfdGV4dHVyZV8yZF92YXJpYWJsZS5qcyIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvS2V5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b0tleS5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJ1xuaW1wb3J0IFRleHR1cmVBdGxhc1NwZWMgZnJvbSAnLi90ZXh0dXJlX2F0bGFzX3NwZWMuanMnXG5pbXBvcnQgc2FtcGxlIGZyb20gJy4uL3V0aWxzL3NhbXBsZS5qcydcblxuLyoqXG4gICogQGV4YW1wbGVcbiAgKiBUZXh0dXJlQXRsYXMubG9hZCgnbm9iaW5nZXIuanNvbicpLnRoZW4oYXRsYXMgPT4ge1xuICAqICAgY29uc3QgYmxhdSA9IGF0bGFzLmdldEZyYW1lKCdub2Jpbmdlci1ibGF1LnBuZycpXG4gICogICBibGF1LndpZHRoICAgIyA9PiA1NVxuICAqICAgYmxhdS5oZWlnaHQgICMgPT4gNjFcbiAgKiB9KVxuICAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZUF0bGFzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VGV4dHVyZX0gcm9vdFRleHR1cmVcbiAgICogQHBhcmFtIHtUZXh0dXJlQXRsYXNTcGVjfSBbc3BlYz1udWxsXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHJvb3RUZXh0dXJlLCBzcGVjID0gbnVsbCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtUZXh0dXJlfVxuICAgICAqL1xuICAgIHRoaXMucm9vdFRleHR1cmUgPSByb290VGV4dHVyZVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtUZXh0dXJlQXRsYXNTcGVjfVxuICAgICAqL1xuICAgIHRoaXMuc3BlYyA9IHNwZWNcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZyxUZXh0dXJlPn1cbiAgICAgKi9cbiAgICB0aGlzLmZyYW1lcyA9IG5ldyBNYXAoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqL1xuICBhZGRGcmFtZSAobmFtZSwgd2lkdGgsIGhlaWdodCwgeCwgeSkge1xuICAgIHRoaXMuZnJhbWVzLnNldChuYW1lLCBuZXcgVGV4dHVyZSh0aGlzLnJvb3RUZXh0dXJlLCB3aWR0aCwgaGVpZ2h0LCB4LCB5KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJucyB7VGV4dHVyZX1cbiAgICovXG4gIGdldEZyYW1lIChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVzLmdldChuYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtUZXh0dXJlfVxuICAgKi9cbiAgZ2V0UmFuZG9tRnJhbWUgKCkge1xuICAgIHJldHVybiBzYW1wbGUoQXJyYXkuZnJvbSh0aGlzLmZyYW1lcy52YWx1ZXMoKSkpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldFJhbmRvbUZyYW1lTmFtZSAoKSB7XG4gICAgcmV0dXJuIHNhbXBsZSh0aGlzLmZyYW1lTmFtZXMoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn1cbiAgICovXG4gIGZyYW1lTmFtZXMgKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZnJhbWVzLmtleXMoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkcyBhIFRleHR1cmVBdGxhcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHNob3VsZCBwb2ludCB0byB0aGUgKnRleHR1cmUgYXRsYXMganNvbiBzcGVjKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2ZldGNoT3B0aW9ucz11bmRlZmluZWRdIC0gb3B0aW9ucyBmb3IgdGhlIGBmZXRjaCgpYCBjYWxsXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufFBvd2VyT2YySW1hZ2V8SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudH0gW2ltYWdlPW51bGxdIC0gcGVyIGRlZmF1bHQgdGhlIGltYWdlIHdpbGwgYmUgbG9hZGVkIGZyb20gYG1ldGEuaW1hZ2VgIHVybCBmcm9tIHRoZSAqdGV4dHVyZSBhdGxhcyBzcGVjKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW3RleHR1cmVIaW50cz11bmRlZmluZWRdIC0gdGV4dHVyZSBoaW50c1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUZXh0dXJlQXRsYXM+fVxuICAgKi9cbiAgc3RhdGljIGxvYWQgKHVybCwgZmV0Y2hPcHRpb25zID0gbnVsbCwgaW1hZ2UgPSBudWxsLCB0ZXh0dXJlSGludHMgPSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gVGV4dHVyZUF0bGFzU3BlYy5sb2FkKHVybCwgZmV0Y2hPcHRpb25zIHx8IHt9KS50aGVuKGF0bGFzU3BlYyA9PiBhdGxhc1NwZWMuY3JlYXRlVGV4dHVyZUF0bGFzKGltYWdlIHx8IGF0bGFzU3BlYy5pbWFnZVVybCwgdGV4dHVyZUhpbnRzKSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvdGV4dHVyZV9hdGxhcy5qcyIsImltcG9ydCBDb21wb25lbnRSZWdpc3RyeSBmcm9tICcuL2Vjcy9jb21wb25lbnRfcmVnaXN0cnknXG5pbXBvcnQgcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyBmcm9tICcuL2RvbS9yZWdpc3RlckNvcmVDb21wb25lbnRzJ1xuXG5jb25zdCBjb21wb25lbnRSZWdpc3RyeSA9IG5ldyBDb21wb25lbnRSZWdpc3RyeSgpXG5yZWdpc3RlckNvcmVDb21wb25lbnRzKGNvbXBvbmVudFJlZ2lzdHJ5KVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRSZWdpc3RyeVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvbXBvbmVudFJlZ2lzdHJ5LmpzIiwiaW1wb3J0IGdlbmVyYXRlVXVpZCBmcm9tICcuL2dlbmVyYXRlX3V1aWQnXG5pbXBvcnQgTWF0NCBmcm9tICcuL21hdDQnXG5pbXBvcnQge1xuICBtYXhPZixcbiAgZmluZE5leHRQb3dlck9mMixcbiAgaXNQb3dlck9mMlxufSBmcm9tICcuL21hdGhfaGVscGVycydcbmltcG9ydCBwYXJzZUNzc1N0eWxlZFByb3BlcnRpZXMgZnJvbSAnLi9wYXJzZUNzc1N0eWxlZFByb3BlcnRpZXMnXG5pbXBvcnQgc2FtcGxlIGZyb20gJy4vc2FtcGxlJ1xuaW1wb3J0IHJlbW92ZUl0ZW0gZnJvbSAnLi9yZW1vdmVJdGVtJ1xuaW1wb3J0IGdldERlZmF1bHRPcHRpb24gZnJvbSAnLi9nZXREZWZhdWx0T3B0aW9uJ1xuXG5leHBvcnQge1xuICBNYXQ0LFxuICBmaW5kTmV4dFBvd2VyT2YyLFxuICBnZW5lcmF0ZVV1aWQsXG4gIGlzUG93ZXJPZjIsXG4gIG1heE9mLFxuICBwYXJzZUNzc1N0eWxlZFByb3BlcnRpZXMsXG4gIHNhbXBsZSxcbiAgcmVtb3ZlSXRlbSxcbiAgZ2V0RGVmYXVsdE9wdGlvblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3V0aWxzL2luZGV4LmpzIiwiaW1wb3J0IEVudGl0eU1hbmFnZXIgZnJvbSAnLi9lY3MvZW50aXR5X21hbmFnZXInXG5cbmNvbnN0IGVudGl0eU1hbmFnZXIgPSBuZXcgRW50aXR5TWFuYWdlcigpXG5cbmV4cG9ydCBkZWZhdWx0IGVudGl0eU1hbmFnZXJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9lbnRpdHlNYW5hZ2VyLmpzIiwiXG5jb25zdCBsb2cgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgPyAoXG4gIHR5cGVvZiBjb25zb2xlLmRlYnVnID09PSAnZnVuY3Rpb24nXG4gID8gKC4uLmFyZ3MpID0+IGNvbnNvbGUuZGVidWcoLi4uYXJncylcbiAgOiAoLi4uYXJncykgPT4gY29uc29sZS5sb2coLi4uYXJncylcbikgOiAoKSA9PiAxXG5cbmNvbnN0IGVycm9yID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnID8gKFxuICB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJ1xuICA/ICguLi5hcmdzKSA9PiBjb25zb2xlLmVycm9yKC4uLmFyZ3MpXG4gIDogKC4uLmFyZ3MpID0+IGNvbnNvbGUubG9nKC4uLmFyZ3MpXG4pIDogKCkgPT4gMVxuXG5leHBvcnQgZGVmYXVsdCBsb2dcbmV4cG9ydCB7XG4gIGVycm9yXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uL2xvZy5qcyIsImltcG9ydCBBcHAgZnJvbSAnLi9hcHAnXG5cbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnLi9jb3JlJ1xuaW1wb3J0ICogYXMgZWNzIGZyb20gJy4vZWNzJ1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscydcblxuaW1wb3J0IGNvbXBvbmVudFJlZ2lzdHJ5IGZyb20gJy4vY29tcG9uZW50UmVnaXN0cnknXG5pbXBvcnQgZW50aXR5TWFuYWdlciBmcm9tICcuL2VudGl0eU1hbmFnZXInXG5pbXBvcnQgcmVzb3VyY2VMaWJyYXJ5IGZyb20gJy4vcmVzb3VyY2VMaWJyYXJ5J1xuaW1wb3J0IHRleHR1cmVMaWJyYXJ5IGZyb20gJy4vdGV4dHVyZUxpYnJhcnknXG5cbmV4cG9ydCB7XG4gIEFwcCxcblxuICBjb3JlLFxuICBlY3MsXG4gIHV0aWxzLFxuXG4gIGNvbXBvbmVudFJlZ2lzdHJ5LFxuICBlbnRpdHlNYW5hZ2VyLFxuXG4gIHJlc291cmNlTGlicmFyeSxcbiAgdGV4dHVyZUxpYnJhcnlcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9hcGkuanMiLCJpbXBvcnQgV2ViR2xSZXNvdXJjZUxpYnJhcnkgZnJvbSAnLi93ZWJfZ2xfcmVzb3VyY2VfbGlicmFyeSdcbmltcG9ydCBXZWJHbFRleHR1cmVNYW5hZ2VyIGZyb20gJy4vd2ViX2dsX3RleHR1cmVfbWFuYWdlcidcbmltcG9ydCBkZXN0cm95IGZyb20gJy4uL3V0aWxzL2Rlc3Ryb3knXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdsQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yIChnbCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZ2wnLCB7IHZhbHVlOiBnbCB9KVxuXG4gICAgaW5pdGlhbGl6ZSh0aGlzKVxuXG4gICAgdGhpcy5yZXNvdXJjZUxpYnJhcnkgPSBuZXcgV2ViR2xSZXNvdXJjZUxpYnJhcnkodGhpcylcbiAgICB0aGlzLmJvdW5kQnVmZmVycyA9IG5ldyBNYXAoKVxuICAgIHRoaXMuY3VycmVudFByb2dyYW0gPSAwXG4gICAgdGhpcy5lbmFibGVkVmVydGV4QXR0cmliTG9jYXRpb25zID0gW11cblxuICAgIHRoaXMudGV4dHVyZU1hbmFnZXIgPSBuZXcgV2ViR2xUZXh0dXJlTWFuYWdlcih0aGlzKVxuXG4gICAgdGhpcy5ib3VuZFRleHR1cmVzID0gbmV3IEFycmF5KHRoaXMuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJvdW5kVGV4dHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYm91bmRUZXh0dXJlc1tpXSA9IHsgVEVYVFVSRV8yRDogbnVsbCB9XG4gICAgfVxuXG4gICAgdGhpcy5yZWFkQ3VycmVudFN0YXRlKClcbiAgICB0aGlzLmFjdGl2ZVRleHR1cmUoMCkgLy8gZW5hYmxlIGZpcnN0IHRleHR1cmUgdW5pdCBieSBkZWZhdWx0XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnRleHR1cmVNYW5hZ2VyLmRlc3Ryb3koKVxuICAgIHRoaXMuYm91bmRCdWZmZXJzLmNsZWFyKClcbiAgICB0aGlzLnJlc291cmNlTGlicmFyeS5kZXN0cm95KClcbiAgICBkZXN0cm95KHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtCbGVuZE1vZGV9IGJsZW5kTW9kZVxuICAgKi9cbiAgYmxlbmQgKGJsZW5kTW9kZSkge1xuICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXNcbiAgICBpZiAoYmxlbmRNb2RlLmVuYWJsZSkge1xuICAgICAgaWYgKCF0aGlzLmJsZW5kRW5hYmxlZCkge1xuICAgICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpXG4gICAgICAgIHRoaXMuYmxlbmRFbmFibGVkID0gdHJ1ZVxuICAgICAgfVxuICAgICAgZ2wuYmxlbmRGdW5jKGdsW2JsZW5kTW9kZS5zZmFjdG9yXSwgZ2xbYmxlbmRNb2RlLmRmYWN0b3JdKVxuICAgIH0gZWxzZSBpZiAodGhpcy5ibGVuZEVuYWJsZWQpIHtcbiAgICAgIGdsLmRpc2FibGUoZ2wuQkxFTkQpXG4gICAgICB0aGlzLmJsZW5kRW5hYmxlZCA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0ZXhVbml0XG4gICAqL1xuICBhY3RpdmVUZXh0dXJlICh0ZXhVbml0KSB7XG4gICAgY29uc3QgeyBnbCB9ID0gdGhpc1xuICAgIGNvbnN0IHRleCA9IGdsLlRFWFRVUkUwICsgdGV4VW5pdFxuXG4gICAgaWYgKHRoaXMuYWN0aXZlVGV4VW5pdCAhPT0gdGV4KSB7XG4gICAgICB0aGlzLmFjdGl2ZVRleFVuaXQgPSB0ZXhcbiAgICAgIGdsLmFjdGl2ZVRleHR1cmUodGhpcy5hY3RpdmVUZXhVbml0KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZ2xUZXh0dXJlSWRcbiAgICovXG4gIGJpbmRUZXh0dXJlMmQgKGdsVGV4dHVyZUlkKSB7XG4gICAgY29uc3QgeyBnbCB9ID0gdGhpc1xuICAgIGNvbnN0IGJvdW5kID0gdGhpcy5ib3VuZFRleHR1cmVzW3RoaXMuYWN0aXZlVGV4VW5pdCAtIGdsLlRFWFRVUkUwXVxuXG4gICAgaWYgKGJvdW5kLlRFWFRVUkVfMkQgIT09IGdsVGV4dHVyZUlkKSB7XG4gICAgICBib3VuZC5URVhUVVJFXzJEID0gZ2xUZXh0dXJlSWRcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGdsVGV4dHVyZUlkKVxuICAgIH1cbiAgfVxuXG4gIHJlYWRDdXJyZW50U3RhdGUgKCkge1xuICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXNcblxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RlL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvZ2V0UGFyYW1ldGVyXG5cbiAgICB0aGlzLmJvdW5kQnVmZmVycy5zZXQoXG4gICAgICBnbC5BUlJBWV9CVUZGRVIsXG4gICAgICBnbC5nZXRQYXJhbWV0ZXIoZ2wuQVJSQVlfQlVGRkVSX0JJTkRJTkcpKVxuICAgIHRoaXMuYm91bmRCdWZmZXJzLnNldChcbiAgICAgIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxuICAgICAgZ2wuZ2V0UGFyYW1ldGVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkcpKVxuXG4gICAgdGhpcy5jdXJyZW50UHJvZ3JhbSA9IGdsLmdldFBhcmFtZXRlcihnbC5DVVJSRU5UX1BST0dSQU0pXG4gICAgdGhpcy5ibGVuZEVuYWJsZWQgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuQkxFTkQpXG4gIH1cblxuICBiaW5kQnVmZmVyICh0YXJnZXQsIGJ1ZmZlcikge1xuICAgIGlmICh0aGlzLmJvdW5kQnVmZmVycy5nZXQodGFyZ2V0KSAhPT0gYnVmZmVyKSB7XG4gICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpXG4gICAgICB0aGlzLmJvdW5kQnVmZmVycy5zZXQodGFyZ2V0LCBidWZmZXIpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICB1c2VQcm9ncmFtIChnbFByb2dyYW0pIHtcbiAgICBpZiAodGhpcy5jdXJyZW50UHJvZ3JhbSAhPT0gZ2xQcm9ncmFtKSB7XG4gICAgICB0aGlzLmdsLnVzZVByb2dyYW0oZ2xQcm9ncmFtKVxuICAgICAgdGhpcy5jdXJyZW50UHJvZ3JhbSA9IGdsUHJvZ3JhbVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheXMgKGVuYWJsZUxvY2F0aW9ucykge1xuICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXNcblxuICAgIHRoaXMuZW5hYmxlZFZlcnRleEF0dHJpYkxvY2F0aW9uc1xuICAgICAgLmZpbHRlcihsb2NhdGlvbiA9PiBlbmFibGVMb2NhdGlvbnMuaW5kZXhPZihsb2NhdGlvbikgPT09IC0xKVxuICAgICAgLmZvckVhY2gobG9jYXRpb24gPT4ge1xuICAgICAgICBnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24pXG4gICAgICAgIHRoaXMuZW5hYmxlZFZlcnRleEF0dHJpYkxvY2F0aW9ucy5zcGxpY2UoZW5hYmxlTG9jYXRpb25zLmluZGV4T2YobG9jYXRpb24pLCAxKVxuICAgICAgfSlcblxuICAgIGVuYWJsZUxvY2F0aW9ucy5mb3JFYWNoKGxvYyA9PiB7XG4gICAgICBjb25zdCBpZHggPSB0aGlzLmVuYWJsZWRWZXJ0ZXhBdHRyaWJMb2NhdGlvbnMuaW5kZXhPZihsb2MpXG4gICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShsb2MpXG4gICAgICAgIHRoaXMuZW5hYmxlZFZlcnRleEF0dHJpYkxvY2F0aW9ucy5wdXNoKGxvYylcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZSAoZ2x4KSB7XG4gIGNvbnN0IHsgZ2wgfSA9IGdseFxuXG4gIGdseC5ERVBUSF9CSVRTID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkRFUFRIX0JJVFMpXG4gIGdseC5TVEVOQ0lMX0JJVFMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuU1RFTkNJTF9CSVRTKVxuICBnbHguTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvcmVuZGVyL3dlYl9nbF9jb250ZXh0LmpzIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXG5cdFx0ZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdsQnVmZmVyIHtcbiAgY29uc3RydWN0b3IgKGdseCwgdGFyZ2V0ID0gV2ViR2xCdWZmZXIuQVJSQVlfQlVGRkVSLCB1c2FnZSA9IFdlYkdsQnVmZmVyLlNUQVRJQ19EUkFXKSB7XG4gICAgdGhpcy5nbHggPSBnbHhcblxuICAgIGNvbnN0IHsgZ2wgfSA9IGdseFxuICAgIHRoaXMudGFyZ2V0ID0gZ2xbdGFyZ2V0XVxuICAgIHRoaXMudXNhZ2UgPSBnbFt1c2FnZV1cblxuICAgIHRoaXMuZ2xCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKVxuICB9XG5cbiAgYmluZEJ1ZmZlciAoKSB7XG4gICAgdGhpcy5nbHguYmluZEJ1ZmZlcih0aGlzLnRhcmdldCwgdGhpcy5nbEJ1ZmZlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgYXJyYXkgYnVmZmVyIGNvbnRlbnQgdG8gZ3B1IHZpYSBgZy5idWZmZXJEYXRhKC4uKWAuXG4gICAqL1xuICBidWZmZXJEYXRhICh0eXBlZEFycmF5KSB7XG4gICAgdGhpcy5iaW5kQnVmZmVyKClcbiAgICB0aGlzLmdseC5nbC5idWZmZXJEYXRhKHRoaXMudGFyZ2V0LCB0eXBlZEFycmF5LCB0aGlzLnVzYWdlKVxuICB9XG59XG5cbldlYkdsQnVmZmVyLkFSUkFZX0JVRkZFUiA9ICdBUlJBWV9CVUZGRVInXG5XZWJHbEJ1ZmZlci5FTEVNRU5UX0FSUkFZX0JVRkZFUiA9ICdFTEVNRU5UX0FSUkFZX0JVRkZFUidcblxuV2ViR2xCdWZmZXIuU1RBVElDX0RSQVcgPSAnU1RBVElDX0RSQVcnXG5XZWJHbEJ1ZmZlci5EWU5BTUlDX0RSQVcgPSAnRFlOQU1JQ19EUkFXJ1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfYnVmZmVyLmpzIiwiaW1wb3J0IHsgVmlld3BvcnQsIFNoYWRlckNvbnRleHQgfSBmcm9tICdibGl0cHVuay9jb3JlJ1xuaW1wb3J0IENsZWFyQnVmZmVyIGZyb20gJy4vY2xlYXJfYnVmZmVyJ1xuaW1wb3J0IGRlc3Ryb3kgZnJvbSAnYmxpdHB1bmsvdXRpbHMvZGVzdHJveSdcblxuY29uc3QgYXV0b3RvdWNoQnVmZmVyID0gKHJlbmRlcmVyLCByZXNvdXJjZVJlZikgPT4ge1xuICBjb25zdCB7IHJlc291cmNlIH0gPSByZXNvdXJjZVJlZlxuICBpZiAocmVzb3VyY2UuZW5hYmxlQXV0b3RvdWNoKSB7XG4gICAgaWYgKCFyZW5kZXJlci5hdXRvdG91Y2hSZXNvdXJjZXMuaGFzKHJlc291cmNlUmVmLmlkKSkge1xuICAgICAgcmVuZGVyZXIuYXV0b3RvdWNoUmVzb3VyY2VzLnNldChyZXNvdXJjZVJlZi5pZCwgdHJ1ZSlcbiAgICAgIHJlc291cmNlLnRvdWNoKClcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgYXBwbHlCbGVuZE1vZGUgPSAocmVuZGVyZXIpID0+IHtcbiAgY29uc3QgYmxlbmRNb2RlID0gcmVuZGVyZXIuYmxlbmRTdGFja1tyZW5kZXJlci5ibGVuZFN0YWNrLmxlbmd0aCAtIDFdIHx8IHJlbmRlcmVyLmluaXRpYWxCbGVuZE1vZGVcbiAgaWYgKGJsZW5kTW9kZSAmJiAhYmxlbmRNb2RlLmlzRXF1YWwocmVuZGVyZXIuY3VycmVudEJsZW5kTW9kZSkpIHtcbiAgICByZW5kZXJlci5nbHguYmxlbmQoYmxlbmRNb2RlKVxuICAgIHJlbmRlcmVyLmN1cnJlbnRCbGVuZE1vZGUgPSBibGVuZE1vZGVcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJHbFJlbmRlcmVyIHtcbiAgY29uc3RydWN0b3IgKGdseCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZ2x4JywgeyB2YWx1ZTogZ2x4IH0pXG5cbiAgICB0aGlzLnNoYWRlckNvbnRleHQgPSBuZXcgU2hhZGVyQ29udGV4dCgpXG4gICAgdGhpcy5hdXRvdG91Y2hSZXNvdXJjZXMgPSBuZXcgTWFwKClcbiAgICB0aGlzLmNsZWFyQnVmZmVyID0gbmV3IENsZWFyQnVmZmVyKHRoaXMuZ2x4KVxuICAgIHRoaXMuYmxlbmRTdGFjayA9IFtdXG4gICAgdGhpcy5pbml0aWFsQmxlbmRNb2RlID0gbnVsbFxuICAgIHRoaXMuY3VycmVudEJsZW5kTW9kZSA9IG51bGxcbiAgICB0aGlzLnZpZXdwb3J0ID0gbnVsbFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5zaGFkZXJDb250ZXh0LmRlc3Ryb3koKVxuICAgIHRoaXMuYXV0b3RvdWNoUmVzb3VyY2VzLmNsZWFyKClcbiAgICB0aGlzLmJsZW5kU3RhY2subGVuZ3RoID0gMFxuICAgIGRlc3Ryb3kodGhpcylcbiAgfVxuXG4gIHNldFZpZXdwb3J0ICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgbGV0IHsgdmlld3BvcnQgfSA9IHRoaXNcbiAgICBpZiAoIXZpZXdwb3J0KSB7XG4gICAgICB0aGlzLnZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KClcbiAgICAgIHZpZXdwb3J0ID0gdGhpcy52aWV3cG9ydFxuICAgIH1cbiAgICB2aWV3cG9ydC54ID0geFxuICAgIHZpZXdwb3J0LnkgPSB5XG4gICAgdmlld3BvcnQud2lkdGggPSB3aWR0aFxuICAgIHZpZXdwb3J0LmhlaWdodCA9IGhlaWdodFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgaW5pdGlhbCBibGVuZCBtb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0JsZW5kTW9kZX0gYmxlbmRNb2RlXG4gICAqL1xuICBzZXRJbml0aWFsQmxlbmRNb2RlIChibGVuZE1vZGUpIHtcbiAgICB0aGlzLmluaXRpYWxCbGVuZE1vZGUgPSBibGVuZE1vZGVcbiAgfVxuXG4gIHJlbmRlckZyYW1lIChyZW5kZXJDYWxsYmFjaykge1xuICAgIHRoaXMuYmVnaW5SZW5kZXJGcmFtZSgpXG4gICAgcmVuZGVyQ2FsbGJhY2soKVxuICAgIHRoaXMuZW5kUmVuZGVyRnJhbWUoKVxuICB9XG5cbiAgYmVnaW5SZW5kZXJGcmFtZSAoKSB7XG4gICAgdGhpcy5zaGFkZXJDb250ZXh0LmNsZWFyKClcbiAgICB0aGlzLmNsZWFyQnVmZmVyLnJlc2V0KClcbiAgICB0aGlzLnNldEdsVmlld3BvcnQodGhpcy52aWV3cG9ydClcbiAgfVxuXG4gIGVuZFJlbmRlckZyYW1lICgpIHtcbiAgICB0aGlzLmF1dG90b3VjaFJlc291cmNlcy5jbGVhcigpXG4gIH1cblxuICBzZXRHbFZpZXdwb3J0ICh2aWV3cG9ydCkge1xuICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXMuZ2x4XG4gICAgaWYgKHZpZXdwb3J0KSB7XG4gICAgICBnbC52aWV3cG9ydCh2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0KVxuICAgIH0gZWxzZSB7XG4gICAgICBnbC52aWV3cG9ydCgwLCAwKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQdXNoIGEgbmV3IGJsZW5kIG1vZGUgdG8gdGhlIHN0YWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge0JsZW5kTW9kZX0gYmxlbmRNb2RlXG4gICAqL1xuICBwdXNoQmxlbmRNb2RlIChibGVuZE1vZGUpIHtcbiAgICB0aGlzLmJsZW5kU3RhY2sucHVzaChibGVuZE1vZGUpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBjdXJyZW50IGJsZW5kIG1vZGUgZnJvbSBpbnRlcm5hbCBzdGFjay5cbiAgICogVGhlIGluaXRpYWwgYmxlbmQgbW9kZSBjYW4ndCBiZSByZW1vdmVkLlxuICAgKi9cbiAgcG9wQmxlbmRNb2RlICgpIHtcbiAgICB0aGlzLmJsZW5kU3RhY2sucG9wKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1NoYWRlclByb2dyYW19IHNoYWRlclByb2dyYW1cbiAgICovXG4gIHVzZVNoYWRlclByb2dyYW0gKHNoYWRlclByb2dyYW0pIHtcbiAgICBjb25zdCBwcm9ncmFtID0gdGhpcy5nbHgucmVzb3VyY2VMaWJyYXJ5LmxvYWRQcm9ncmFtKHNoYWRlclByb2dyYW0pXG4gICAgY29uc3QgeyBzaGFkZXJDb250ZXh0IH0gPSB0aGlzXG4gICAgcHJvZ3JhbS51c2Uoc2hhZGVyQ29udGV4dClcbiAgICBwcm9ncmFtLmxvYWRVbmlmb3JtcyhzaGFkZXJDb250ZXh0LCB0aGlzKVxuICAgIHByb2dyYW0ubG9hZEF0dHJpYnV0ZXMoc2hhZGVyQ29udGV4dCwgdGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJpbWl0aXZlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0SW5kZXg9MF1cbiAgICovXG4gIGRyYXdBcnJheXMgKHByaW1pdGl2ZSwgY291bnQsIHN0YXJ0SW5kZXggPSAwKSB7XG4gICAgYXBwbHlCbGVuZE1vZGUodGhpcylcblxuICAgIGNvbnN0IHsgZ2wgfSA9IHRoaXMuZ2x4XG4gICAgZ2wuZHJhd0FycmF5cyhnbFtwcmltaXRpdmVdLCBzdGFydEluZGV4LCBjb3VudClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJpbWl0aXZlXG4gICAqIEBwYXJhbSB7RWxlbWVudEluZGV4QXJyYXl9IGVsZW1lbnRJbmRleEFycmF5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbY291bnRdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdXG4gICAqL1xuICBkcmF3SW5kZXhlZCAocHJpbWl0aXZlLCBlbGVtZW50SW5kZXhBcnJheSwgY291bnQsIG9mZnNldCA9IDApIHtcbiAgICBhcHBseUJsZW5kTW9kZSh0aGlzKVxuICAgIHRoaXMuc3luY0J1ZmZlcihlbGVtZW50SW5kZXhBcnJheSkuYmluZEJ1ZmZlcigpXG5cbiAgICBjb25zdCB7IGdsIH0gPSB0aGlzLmdseFxuICAgIGdsLmRyYXdFbGVtZW50cyhcbiAgICAgIGdsW3ByaW1pdGl2ZV0sXG4gICAgICBjb3VudCB8fCBlbGVtZW50SW5kZXhBcnJheS5sZW5ndGgsXG4gICAgICBnbC5VTlNJR05FRF9TSE9SVCxcbiAgICAgIG9mZnNldCAqIGVsZW1lbnRJbmRleEFycmF5LmFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Vk9BcnJheXxFbGVtZW50SW5kZXhBcnJheX0gcmVzb3VyY2VcbiAgICogQHJldHVybiB7V2ViR2xCdWZmZXJ9XG4gICAqL1xuICBzeW5jQnVmZmVyIChyZXNvdXJjZSkge1xuICAgIGNvbnN0IHsgcmVzb3VyY2VSZWYgfSA9IHJlc291cmNlXG4gICAgYXV0b3RvdWNoQnVmZmVyKHRoaXMsIHJlc291cmNlUmVmKVxuXG4gICAgY29uc3QgYnVmZmVyUmVmID0gdGhpcy5nbHgucmVzb3VyY2VMaWJyYXJ5LmxvYWRCdWZmZXIocmVzb3VyY2VSZWYpXG4gICAgYnVmZmVyUmVmLnN5bmMocmVzb3VyY2VSZWYsIGJ1ZmZlciA9PiBidWZmZXIuYnVmZmVyRGF0YShyZXNvdXJjZVJlZi5oaW50cy50eXBlZEFycmF5KSlcbiAgICByZXR1cm4gYnVmZmVyUmVmLnJlc291cmNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlXG4gICAqIEByZXR1cm4ge1dlYkdsVGV4dHVyZX1cbiAgICovXG4gIHN5bmNUZXh0dXJlICh0ZXh0dXJlKSB7XG4gICAgY29uc3QgdGV4UmVmID0gdGV4dHVyZS5yZXNvdXJjZVJlZlxuICAgIGNvbnN0IGdsVGV4UmVmID0gdGhpcy5nbHgucmVzb3VyY2VMaWJyYXJ5LmxvYWRUZXh0dXJlKHRleFJlZilcbiAgICBnbFRleFJlZi5zeW5jKHRleFJlZiwgdGV4ID0+IHRleC51cGxvYWRJbWFnZURhdGEoKSlcbiAgICByZXR1cm4gZ2xUZXhSZWYucmVzb3VyY2VcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfcmVuZGVyZXIuanMiLCJpbXBvcnQgVk9EZXNjcmlwdG9yIGZyb20gJy4vdl9vX2Rlc2NyaXB0b3InXG5pbXBvcnQgVk9Qb29sIGZyb20gJy4vdl9vX3Bvb2wnXG5pbXBvcnQgQUFCQjIgZnJvbSAnLi9hYWJiMidcbmltcG9ydCBCbGVuZE1vZGUgZnJvbSAnLi9ibGVuZF9tb2RlJ1xuaW1wb3J0IEVsZW1lbnRJbmRleEFycmF5IGZyb20gJy4vZWxlbWVudF9pbmRleF9hcnJheSdcbmltcG9ydCBQb3dlck9mMkltYWdlIGZyb20gJy4vcG93ZXJfb2ZfMl9pbWFnZSdcbmltcG9ydCBQcm9qZWN0aW9uIGZyb20gJy4vcHJvamVjdGlvbidcbmltcG9ydCBSZXNvdXJjZUxpYnJhcnkgZnJvbSAnLi9yZXNvdXJjZV9saWJyYXJ5J1xuaW1wb3J0IFNoYWRlckF0dHJpYlZhbHVlIGZyb20gJy4vc2hhZGVyX2F0dHJpYl92YWx1ZSdcbmltcG9ydCBTaGFkZXJBdHRyaWJWYXJpYWJsZSBmcm9tICcuL3NoYWRlcl9hdHRyaWJfdmFyaWFibGUnXG5pbXBvcnQgU2hhZGVyQ29udGV4dCBmcm9tICcuL3NoYWRlcl9jb250ZXh0J1xuaW1wb3J0IFNoYWRlclByb2dyYW0gZnJvbSAnLi9zaGFkZXJfcHJvZ3JhbSdcbmltcG9ydCBTaGFkZXJTb3VyY2UgZnJvbSAnLi9zaGFkZXJfc291cmNlJ1xuaW1wb3J0IFNoYWRlclRleHR1cmUyZFZhcmlhYmxlIGZyb20gJy4vc2hhZGVyX3RleHR1cmVfMmRfdmFyaWFibGUnXG5pbXBvcnQgU2hhZGVyVGV4dHVyZUdyb3VwIGZyb20gJy4vc2hhZGVyX3RleHR1cmVfZ3JvdXAnXG5pbXBvcnQgU2hhZGVyVW5pZm9ybVZhcmlhYmxlIGZyb20gJy4vc2hhZGVyX3VuaWZvcm1fdmFyaWFibGUnXG5pbXBvcnQgU2hhZGVyVmFyaWFibGUgZnJvbSAnLi9zaGFkZXJfdmFyaWFibGUnXG5pbXBvcnQgU2hhZGVyVmFyaWFibGVBbGlhcyBmcm9tICcuL3NoYWRlcl92YXJpYWJsZV9hbGlhcydcbmltcG9ydCBTaGFkZXJWYXJpYWJsZUJ1ZmZlckdyb3VwIGZyb20gJy4vc2hhZGVyX3ZhcmlhYmxlX2J1ZmZlcl9ncm91cCdcbmltcG9ydCBTaGFkZXJWYXJpYWJsZUdyb3VwIGZyb20gJy4vc2hhZGVyX3ZhcmlhYmxlX2dyb3VwJ1xuaW1wb3J0IFNwcml0ZUdyb3VwIGZyb20gJy4vc3ByaXRlX2dyb3VwJ1xuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJ1xuaW1wb3J0IFRleHR1cmVBdGxhcyBmcm9tICcuL3RleHR1cmVfYXRsYXMnXG5pbXBvcnQgVGV4dHVyZUF0bGFzU3BlYyBmcm9tICcuL3RleHR1cmVfYXRsYXNfc3BlYydcbmltcG9ydCBUZXh0dXJlTGlicmFyeSBmcm9tICcuL3RleHR1cmVfbGlicmFyeSdcbmltcG9ydCBUZXh0dXJlU3RhdGUgZnJvbSAnLi90ZXh0dXJlX3N0YXRlJ1xuaW1wb3J0IFZPQXJyYXkgZnJvbSAnLi92X29fYXJyYXknXG5pbXBvcnQgVk9BdHRyRGVzY3JpcHRvciBmcm9tICcuL3Zfb19hdHRyX2Rlc2NyaXB0b3InXG5pbXBvcnQgVmlld3BvcnQgZnJvbSAnLi9WaWV3cG9ydCdcblxuZXhwb3J0IHtcbiAgQUFCQjIsXG4gIEJsZW5kTW9kZSxcbiAgRWxlbWVudEluZGV4QXJyYXksXG4gIFBvd2VyT2YySW1hZ2UsXG4gIFByb2plY3Rpb24sXG4gIFJlc291cmNlTGlicmFyeSxcbiAgU2hhZGVyQXR0cmliVmFsdWUsXG4gIFNoYWRlckF0dHJpYlZhcmlhYmxlLFxuICBTaGFkZXJDb250ZXh0LFxuICBTaGFkZXJQcm9ncmFtLFxuICBTaGFkZXJTb3VyY2UsXG4gIFNoYWRlclRleHR1cmUyZFZhcmlhYmxlLFxuICBTaGFkZXJUZXh0dXJlR3JvdXAsXG4gIFNoYWRlclVuaWZvcm1WYXJpYWJsZSxcbiAgU2hhZGVyVmFyaWFibGUsXG4gIFNoYWRlclZhcmlhYmxlQWxpYXMsXG4gIFNoYWRlclZhcmlhYmxlQnVmZmVyR3JvdXAsXG4gIFNoYWRlclZhcmlhYmxlR3JvdXAsXG4gIFNwcml0ZUdyb3VwLFxuICBUZXh0dXJlLFxuICBUZXh0dXJlQXRsYXMsXG4gIFRleHR1cmVBdGxhc1NwZWMsXG4gIFRleHR1cmVMaWJyYXJ5LFxuICBUZXh0dXJlU3RhdGUsXG4gIFZPQXJyYXksXG4gIFZPQXR0ckRlc2NyaXB0b3IsXG4gIFZPRGVzY3JpcHRvcixcbiAgVk9Qb29sLFxuICBWaWV3cG9ydFxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvaW5kZXguanMiLCJpbXBvcnQgeyBjcmVhdGVWTyB9IGZyb20gJy4uL3Zfb19oZWxwZXInXG5pbXBvcnQgVk9BcnJheSBmcm9tICcuLi92X29fYXJyYXknXG5pbXBvcnQgY3JlYXRlVk9Qcm90b3R5cGUgZnJvbSAnLi9jcmVhdGVfdl9vX3Byb3RvdHlwZSdcbmltcG9ydCBjcmVhdGVUeXBlZEFycmF5cyBmcm9tICcuL2NyZWF0ZV90eXBlZF9hcnJheXMnXG5pbXBvcnQgY3JlYXRlQXR0cmlidXRlcyBmcm9tICcuL2NyZWF0ZV9hdHRyaWJ1dGVzJ1xuaW1wb3J0IGNyZWF0ZUFsaWFzZXMgZnJvbSAnLi9jcmVhdGVfYWxpYXNlcydcblxuLyoqXG4gKiBWZXJ0ZXggb2JqZWN0IGRlc2NyaXB0b3IuXG4gKlxuICogQGNsYXNzIFZPRGVzY3JpcHRvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy52ZXJ0ZXhDb3VudCAtIG51bWJlciBvZiB2ZXJ0aWNlc1xuICogQHBhcmFtIHtPYmplY3RbXX0gb3B0aW9ucy5hdHRyaWJ1dGVzIC0gbGlzdCBvZiB2ZXJ0ZXggYXR0cmlidXRlIGRlc2NyaXB0aW9ucyAoc2VlIGV4YW1wbGUpXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuYWxpYXNlc10gLSAqb3B0aW9uYWwqIGxpc3Qgb2YgYXR0cmlidXRlIGFsaWFzZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5wcm90b11cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgZGVzY3JpcHRvciA9IG5ldyBWT0Rlc2NyaXB0b3Ioe1xuICpcbiAqICAgICBwcm90bzoge1xuICogICAgICAgICBmb28oKSB7XG4gKiAgICAgICAgICAgICByZXR1cm4gdGhpcy52b0FycmF5LmZsb2F0MzJBcnJheVswXTtcbiAqICAgICAgICAgfVxuICogICAgIH0sXG4gKlxuICogICAgIC8vIHZlcnRleCBidWZmZXIgbGF5b3V0XG4gKiAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICAgICAvL1xuICogICAgIC8vIHYwOiAoeDApKHkwKSh6MCkocm90YXRlXShzMCkodDApKHR4KSh0eSkoc2NhbGUpKG9wYWNpdHkpXG4gKiAgICAgLy8gdjE6ICh4MSkoeTEpKHoxKShyb3RhdGVdKHMxKSh0MSkodHgpKHR5KShzY2FsZSkob3BhY2l0eSlcbiAqICAgICAvLyB2MjogKHgyKSh5MikoejIpKHJvdGF0ZV0oczIpKHQyKSh0eCkodHkpKHNjYWxlKShvcGFjaXR5KVxuICogICAgIC8vIHYzOiAoeDMpKHkzKSh6Mykocm90YXRlXShzMykodDMpKHR4KSh0eSkoc2NhbGUpKG9wYWNpdHkpXG4gKiAgICAgLy9cbiAqICAgICB2ZXJ0ZXhDb3VudDogNCxcbiAqXG4gKiAgICAgYXR0cmlidXRlczogW1xuICpcbiAqICAgICAgICAgeyBuYW1lOiAncG9zaXRpb24nLCAgdHlwZTogJ2Zsb2F0MzInLCBzaXplOiAzLCBhdHRyTmFtZXM6IFsgJ3gnLCAneScsICd6JyBdIH0sXG4gKiAgICAgICAgIHsgbmFtZTogJ3JvdGF0ZScsICAgIHR5cGU6ICdmbG9hdDMyJywgc2l6ZTogMSwgdW5pZm9ybTogdHJ1ZSB9LFxuICogICAgICAgICB7IG5hbWU6ICd0ZXhDb29yZHMnLCB0eXBlOiAnZmxvYXQzMicsIHNpemU6IDIsIGF0dHJOYW1lczogWyAncycsICd0JyBdIH0sXG4gKiAgICAgICAgIHsgbmFtZTogJ3RyYW5zbGF0ZScsIHR5cGU6ICdmbG9hdDMyJywgc2l6ZTogMiwgYXR0ck5hbWVzOiBbICd0eCcsICd0eScgXSwgdW5pZm9ybTogdHJ1ZSB9LFxuICogICAgICAgICB7IG5hbWU6ICdzY2FsZScsICAgICB0eXBlOiAnZmxvYXQzMicsIHNpemU6IDEsIHVuaWZvcm06IHRydWUgfSxcbiAqICAgICAgICAgeyBuYW1lOiAnb3BhY2l0eScsICAgdHlwZTogJ2Zsb2F0MzInLCBzaXplOiAxLCB1bmlmb3JtOiB0cnVlIH1cbiAqXG4gKiAgICAgXSxcbiAqXG4gKiAgICAgYWxpYXNlczoge1xuICpcbiAqICAgICAgICAgcG9zMmQ6IHsgc2l6ZTogMiwgdHlwZTogJ2Zsb2F0MzInLCBvZmZzZXQ6IDAgfSxcbiAqICAgICAgICAgcG9zWjogIHsgc2l6ZTogMSwgdHlwZTogJ2Zsb2F0MzInLCBvZmZzZXQ6IDIsIHVuaWZvcm06IHRydWUgfSxcbiAqICAgICAgICAgcjogICAgIHsgc2l6ZTogMSwgdHlwZTogJ2Zsb2F0MzInLCBvZmZzZXQ6IDMgfSxcbiAqICAgICAgICAgdXY6ICAgICd0ZXhDb29yZHMnLFxuICpcbiAqICAgICB9XG4gKlxuICogfSk7XG4gKlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZPRGVzY3JpcHRvciB7XG4gIGNvbnN0cnVjdG9yICh7IHZlcnRleENvdW50LCBhdHRyaWJ1dGVzLCBhbGlhc2VzLCBwcm90byB9KSB7XG4gICAgdGhpcy52ZXJ0ZXhDb3VudCA9IHBhcnNlSW50KHZlcnRleENvdW50LCAxMClcblxuICAgIGNyZWF0ZUF0dHJpYnV0ZXModGhpcywgYXR0cmlidXRlcylcbiAgICBjcmVhdGVBbGlhc2VzKHRoaXMsIGFsaWFzZXMpXG4gICAgY3JlYXRlVk9Qcm90b3R5cGUodGhpcywgcHJvdG8pXG4gICAgY3JlYXRlVHlwZWRBcnJheXModGhpcylcblxuICAgIC8vID09PSB3aW50ZXJrw6RsdGUgamV0enRcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuYXR0cikuZm9yRWFjaChuYW1lID0+IE9iamVjdC5mcmVlemUodGhpcy5hdHRyW25hbWVdKSlcbiAgICBPYmplY3QuZnJlZXplKHRoaXMuYXR0cilcbiAgICBPYmplY3QuZnJlZXplKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNhZ2VdXG4gICAqIEByZXR1cm5zIHtWT0FycmF5fVxuICAgKi9cbiAgY3JlYXRlVk9BcnJheSAoc2l6ZSA9IDEsIHVzYWdlID0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBWT0FycmF5KHRoaXMsIHNpemUsIG51bGwsIHVzYWdlKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyAqdmVydGV4IG9iamVjdCpcbiAgICpcbiAgICogQHBhcmFtIHtWT0FycmF5fSBbdm9BcnJheV1cbiAgICogQHJldHVybnMge09iamVjdH0gdGhlICp2ZXJ0ZXggb2JqZWN0KlxuICAgKi9cbiAgY3JlYXRlVk8gKHZvQXJyYXkpIHtcbiAgICByZXR1cm4gY3JlYXRlVk8oT2JqZWN0LmNyZWF0ZSh0aGlzLnZvUHJvdG90eXBlKSwgdGhpcywgdm9BcnJheSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIGF0dHJpYnV0ZSBpdGVtIGNvdW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaGFzQXR0cmlidXRlIChuYW1lLCBzaXplKSB7XG4gICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0clsgbmFtZSBdXG4gICAgcmV0dXJuIGF0dHIgJiYgYXR0ci5zaXplID09PSBzaXplXG4gIH1cblxuICAvKipcbiAgICogTWF4IG51bWJlciBvZiB2ZXJ0ZXggb2JqZWN0cyB3aGVuIGEgdmVydGV4IGJ1ZmZlciBpcyB1c2VkIHRvZ2V0aGVyXG4gICAqIHdpdGggYSBpbmRleGVkIGVsZW1lbnQgYXJyYXkgdG8gZHJhdyBwcmltaXRpdmVzLiB0aGUgcmVhc29uIGZvclxuICAgKiBzdWNoIGEgbGltaXQgaXMgdGhhdCB3ZWJnbCByZXN0cmljdHMgZWxlbWVudCBhcnJheSBpbmRpY2VzXG4gICAqIHRvIGFuIHVpbjE2IGRhdGEgdHlwZS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cbiAgZ2V0IG1heEluZGV4ZWRWT1Bvb2xTaXplICgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcig2NTUzNiAvIHRoaXMudmVydGV4Q291bnQpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3Zfb19kZXNjcmlwdG9yL2luZGV4LmpzIiwiaW1wb3J0IGNyZWF0ZVZlcnRleE9iamVjdHMgZnJvbSAnLi9jcmVhdGVfdmVydGV4X29iamVjdHMnXG5pbXBvcnQgZ2VuZXJhdGVVVUlEIGZyb20gJy4uLy4uL3V0aWxzL2dlbmVyYXRlX3V1aWQnXG5pbXBvcnQgVk9BcnJheSBmcm9tICcuLi92X29fYXJyYXknXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZPUG9vbCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1ZPRGVzY3JpcHRvcn0gZGVzY3JpcHRvciAtIHZlcnRleCBvYmplY3QgZGVzY3JpcHRvclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQWR2YW5jZWQgb3B0aW9uc1xuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY2FwYWNpdHldIC0gTWF4aW11bSBudW1iZXIgb2YgKnZlcnRleCBvYmplY3RzKlxuICAgKiBAcGFyYW0ge1ZPQXJyYXl9IFtvcHRpb25zLnZvQXJyYXldIC0gVmVydGV4IG9iamVjdCBhcnJheVxuICAgKiBAcGFyYW0ge1ZlcnRleE9iamVjdH0gW29wdGlvbnMudm9aZXJvXSAtICp2ZXJ0ZXggb2JqZWN0KiAqKnByb3RvdHlwZSoqXG4gICAqIEBwYXJhbSB7VmVydGV4T2JqZWN0fSBbb3B0aW9ucy52b05ld10gLSAqdmVydGV4IG9iamVjdCogKipwcm90b3R5cGUqKlxuICAgKiBAcGFyYW0ge1ZlcnRleE9iamVjdH0gW29wdGlvbnMubWF4QWxsb2NWT1NpemVdIC0gbmV2ZXIgYWxsb2NhdGUgbW9yZSB0aGFuICptYXhBbGxvY1ZPU2l6ZSogdmVydGV4IG9iamVjdHMgYXQgb25jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudXNhZ2U9Vk9Qb29sLlVTQUdFLkRZTkFNSUNdIC0gdmVydGV4IGRhdGEgdXNhZ2UgaGludFxuICAgKi9cblxuICBjb25zdHJ1Y3RvciAoZGVzY3JpcHRvciwgb3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSBnZW5lcmF0ZVVVSUQoKVxuXG4gICAgdGhpcy5kZXNjcmlwdG9yID0gZGVzY3JpcHRvclxuICAgIHRoaXMuY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCB0aGlzLmRlc2NyaXB0b3IubWF4SW5kZXhlZFZPUG9vbFNpemVcbiAgICB0aGlzLm1heEFsbG9jVk9TaXplID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5tYXhBbGxvY1ZPU2l6ZSkgfHwgMFxuXG4gICAgdGhpcy51c2FnZSA9IChvcHRpb25zICYmIG9wdGlvbnMudXNhZ2UpIHx8IFZPUG9vbC5VU0FHRS5EWU5BTUlDXG5cbiAgICBsZXQgdm9BcnJheSA9IG9wdGlvbnMgJiYgb3B0aW9ucy52b0FycmF5XG4gICAgaWYgKHZvQXJyYXkpIHtcbiAgICAgIGlmICh2b0FycmF5LnVzYWdlICE9PSB0aGlzLnVzYWdlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVk9Qb29sIHVzYWdlKD0ke3RoaXMudXNhZ2V9KSBtaXNtYXRjaCB3aXRoIGdpdmVuIHZvQXJyYXkodXNhZ2U9JHt2b0FycmF5LnVzYWdlfSlgKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2b0FycmF5ID0gZGVzY3JpcHRvci5jcmVhdGVWT0FycmF5KHRoaXMuY2FwYWNpdHksIHRoaXMudXNhZ2UpXG4gICAgfVxuICAgIHRoaXMudm9BcnJheSA9IHZvQXJyYXlcblxuICAgIHRoaXMudm9aZXJvID0gKG9wdGlvbnMgJiYgb3B0aW9ucy52b1plcm8pIHx8IGRlc2NyaXB0b3IuY3JlYXRlVk8oKVxuICAgIHRoaXMudm9OZXcgPSAob3B0aW9ucyAmJiBvcHRpb25zLnZvTmV3KSB8fCBkZXNjcmlwdG9yLmNyZWF0ZVZPKClcblxuICAgIHRoaXMuYXZhaWxhYmxlVk9zID0gW11cbiAgICB0aGlzLnVzZWRWT3MgPSBbXVxuXG4gICAgY3JlYXRlVmVydGV4T2JqZWN0cyh0aGlzLCB0aGlzLm1heEFsbG9jVk9TaXplKVxuICB9XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBpbiB1c2UgKnZlcnRleCBvYmplY3RzKi5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cbiAgZ2V0IHVzZWRDb3VudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlZFZPcy5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgZnJlZSBhbmQgdW51c2VkICp2ZXJ0ZXggb2JqZWN0cyouXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuXG4gIGdldCBhdmFpbGFibGVDb3VudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FwYWNpdHkgLSB0aGlzLnVzZWRWT3MubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogTnVtYmVyIG9mICoqYWxsb2NhdGVkKiogKnZlcnRleCBvYmplY3RzKi5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG5cbiAgZ2V0IGFsbG9jYXRlZENvdW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5hdmFpbGFibGVWT3MubGVuZ3RoICsgdGhpcy51c2VkVk9zLmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiAqKnNpemUqKiAqdmVydGV4IG9iamVjdHMqXG4gICAqIEByZXR1cm4ge1ZlcnRleE9iamVjdHxWZXJ0ZXhPYmplY3RbXX1cbiAgICovXG5cbiAgYWxsb2MgKHNpemUgPSAxKSB7XG4gICAgaWYgKHNpemUgPiAxKSB7XG4gICAgICBjb25zdCBhcnIgPSBbXVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgICAgY29uc3Qgdm8gPSB0aGlzLmFsbG9jKDEpXG4gICAgICAgIGlmICh2byAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYXJyLnB1c2godm8pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFyclxuICAgIH1cblxuICAgIGNvbnN0IHZvID0gdGhpcy5hdmFpbGFibGVWT3Muc2hpZnQoKVxuXG4gICAgaWYgKHZvID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICgodGhpcy5jYXBhY2l0eSAtIHRoaXMuYWxsb2NhdGVkQ291bnQpID4gMCkge1xuICAgICAgICBjcmVhdGVWZXJ0ZXhPYmplY3RzKHRoaXMsIHRoaXMubWF4QWxsb2NWT1NpemUpXG4gICAgICAgIHJldHVybiB0aGlzLmFsbG9jKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXNlZFZPcy5wdXNoKHZvKVxuXG4gICAgdm8udm9BcnJheS5jb3B5KHRoaXMudm9OZXcudm9BcnJheSlcblxuICAgIHJldHVybiB2b1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VmVydGV4T2JqZWN0fFZlcnRleE9iamVjdFtdfSB2byAtIHZlcnRleCBvYmplY3QocylcbiAgICovXG5cbiAgZnJlZSAodm8pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bykpIHtcbiAgICAgIHZvLmZvckVhY2goX3ZvID0+IF92by5mcmVlKCkpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBpZHggPSB0aGlzLnVzZWRWT3MuaW5kZXhPZih2bylcblxuICAgIGlmIChpZHggPT09IC0xKSByZXR1cm5cblxuICAgIGNvbnN0IGxhc3RJZHggPSB0aGlzLnVzZWRWT3MubGVuZ3RoIC0gMVxuXG4gICAgaWYgKGlkeCAhPT0gbGFzdElkeCkge1xuICAgICAgY29uc3QgbGFzdCA9IHRoaXMudXNlZFZPc1sgbGFzdElkeCBdXG4gICAgICB2by52b0FycmF5LmNvcHkobGFzdC52b0FycmF5KVxuXG4gICAgICBjb25zdCB0bXAgPSBsYXN0LnZvQXJyYXlcbiAgICAgIGxhc3Qudm9BcnJheSA9IHZvLnZvQXJyYXlcbiAgICAgIHZvLnZvQXJyYXkgPSB0bXBcblxuICAgICAgdGhpcy51c2VkVk9zLnNwbGljZShpZHgsIDEsIGxhc3QpXG4gICAgfVxuXG4gICAgdGhpcy51c2VkVk9zLnBvcCgpXG4gICAgdGhpcy5hdmFpbGFibGVWT3MudW5zaGlmdCh2bylcblxuICAgIHZvLnZvQXJyYXkuY29weSh0aGlzLnZvWmVyby52b0FycmF5KVxuICB9XG59XG5cblZPUG9vbC5VU0FHRSA9IFZPQXJyYXkuVVNBR0VcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3Zfb19wb29sL2luZGV4LmpzIiwiY29uc3QgcG9zTnVtID0gbnVtID0+IG51bSA8IDAgPyAwIDogbnVtXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIDJkIGF4aXMgYWxpZ25lZCBib3VuZGFyeSBib3guXG4gKlxuICogQGNsYXNzIEFBQkIyXG4gKiBAcGFyYW0ge251bWJlcn0gW3gwPTBdIC0geDBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbeDE9MF0gLSB4MVxuICogQHBhcmFtIHtudW1iZXJ9IFt5MD0wXSAtIHkwXG4gKiBAcGFyYW0ge251bWJlcn0gW3kxPTBdIC0geTFcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBQUJCMiB7XG4gIGNvbnN0cnVjdG9yICh4MCA9IDAsIHgxID0gMCwgeTAgPSAwLCB5MSA9IDApIHtcbiAgICBpZiAoeDAgPCB4MSkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICB0aGlzLm1pblggPSB4MFxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICB0aGlzLm1heFggPSB4MVxuICAgIH0gZWxzZSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIHRoaXMubWluWCA9IHgxXG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIHRoaXMubWF4WCA9IHgwXG4gICAgfVxuXG4gICAgaWYgKHkwIDwgeTEpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5taW5ZID0geTBcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5tYXhZID0geTFcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICB0aGlzLm1pblkgPSB5MVxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICB0aGlzLm1heFkgPSB5MFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdpZHRoICgpIHtcbiAgICByZXR1cm4gcG9zTnVtKHRoaXMubWF4WCAtIHRoaXMubWluWCArIDEpXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBoZWlnaHQgKCkge1xuICAgIHJldHVybiBwb3NOdW0odGhpcy5tYXhZIC0gdGhpcy5taW5ZICsgMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGNlbnRlclggKCkge1xuICAgIHJldHVybiBwb3NOdW0oKHRoaXMubWF4WCAtIHRoaXMubWluWCkgLyAyKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgY2VudGVyWSAoKSB7XG4gICAgcmV0dXJuIHBvc051bSgodGhpcy5tYXhZIC0gdGhpcy5taW5ZKSAvIDIpXG4gIH1cblxuICAvKipcbiAgICogRXh0ZW5kIHRoZSBib3VuZGFyeSBib3guXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHlcbiAgICovXG4gIGFkZFBvaW50ICh4LCB5KSB7XG4gICAgaWYgKHggPCB0aGlzLm1pblgpIHtcbiAgICAgIHRoaXMubWluWCA9IHhcbiAgICB9IGVsc2UgaWYgKHggPiB0aGlzLm1heFgpIHtcbiAgICAgIHRoaXMubWF4WCA9IHhcbiAgICB9XG5cbiAgICBpZiAoeSA8IHRoaXMubWluWSkge1xuICAgICAgdGhpcy5taW5ZID0geVxuICAgIH0gZWxzZSBpZiAoeSA+IHRoaXMubWF4WSkge1xuICAgICAgdGhpcy5tYXhZID0geVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmF0ZXMgd2V0aGVyIG9yIHRoZSAyZCBwb2ludCBpcyBpbnNpZGUgdGhpcyBBQUJCLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSB5XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHJldHVybiB0cnVlIHdoZW4gcG9pbnQgaXMgaW5zaWRlIHRoZSBhYWJiXG4gICAqL1xuICBpc0luc2lkZSAoeCwgeSkge1xuICAgIHJldHVybiB4ID49IHRoaXMubWluWCAmJiB4IDw9IHRoaXMubWF4WCAmJiB5ID49IHRoaXMubWluWSAmJiB5IDw9IHRoaXMubWF4WVxuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluYXRlcyB3ZXRoZXIgb3Igbm90IHRoaXMgQUFCQiBpbnRlcnNlY3RzICphYWJiKi5cbiAgICpcbiAgICogQHBhcmFtIHtBQUJCMn0gYWFiYiAtIGFhYmJcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gcmV0dXJuIHRydWUgd2hlbiB0aGVyZSBpcyBzb21lIGludGVyc2VjdGlvbiBiZXR3ZWVuIGJvdGhcbiAgICovXG4gIGlzSW50ZXJzZWN0aW9uIChhYWJiKSB7XG4gICAgcmV0dXJuICEoXG4gICAgICBhYWJiLm1heFggPCB0aGlzLm1pblggfHxcbiAgICAgIGFhYmIubWluWCA+IHRoaXMubWF4WCB8fFxuICAgICAgYWFiYi5tYXhZIDwgdGhpcy5taW5ZIHx8XG4gICAgICBhYWJiLm1pblkgPiB0aGlzLm1heFlcbiAgICApXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL2FhYmIyLmpzIiwiaW1wb3J0IFJlc291cmNlUmVmIGZyb20gJy4uL3V0aWxzL3Jlc291cmNlX3JlZidcbmltcG9ydCBXZWJHbEJ1ZmZlciBmcm9tICcuLi9yZW5kZXIvd2ViX2dsX2J1ZmZlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxlbWVudEluZGV4QXJyYXkge1xuICBjb25zdHJ1Y3RvciAob2JqZWN0Q291bnQsIGl0ZW1Db3VudCA9IDEpIHtcbiAgICB0aGlzLnJlc291cmNlUmVmID0gbmV3IFJlc291cmNlUmVmKHRoaXMsIHtcbiAgICAgIHRhcmdldDogV2ViR2xCdWZmZXIuRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICB1c2FnZTogJ3N0YXRpYydcbiAgICB9KVxuXG4gICAgdGhpcy5vYmplY3RDb3VudCA9IG9iamVjdENvdW50XG4gICAgdGhpcy5pdGVtQ291bnQgPSBpdGVtQ291bnRcbiAgICB0aGlzLmxlbmd0aCA9IG9iamVjdENvdW50ICogaXRlbUNvdW50XG5cbiAgICB0aGlzLmFycmF5ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMubGVuZ3RoKVxuXG4gICAgLy8gbmVlZGVkIGJ5IFdlYkdsUmVuZGVyZXIjc3luY0J1ZmZlclxuICAgIHRoaXMucmVzb3VyY2VSZWYuaGludHMudHlwZWRBcnJheSA9IHRoaXMuYXJyYXlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqZWN0Q291bnRcbiAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kaWNlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0cmlkZT00XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29iamVjdE9mZnNldD0wXVxuICAgKiBAcmV0dXJuIHtFbGVtZW50SW5kZXhBcnJheX1cbiAgICogQGV4YW1wbGVcbiAgICogLy8gQ3JlYXRlIGEgRWxlbWVudEluZGV4QXJyYXkgZm9yIDEwIHF1YWRzIHdoZXJlIGVhY2ggcXVhZCBtYWRlIHVwIG9mIDJ4IHRyaWFuZ2xlcyAoNHggdmVydGljZXMgYW5kIDZ4IGluZGljZXMpXG4gICAqIGNvbnN0IHF1YWRJbmRpY2VzID0gRWxlbWVudEluZGV4QXJyYXkuR2VuZXJhdGUoMTAsIFswLCAxLCAyLCAwLCAyLCAzXSwgNClcbiAgICogcXVhZEluZGljZXMubGVuZ3RoICAgICAgICAvLyA9PiA2MFxuICAgKiBxdWFkSW5kaWNlcy5pdGVtQ291bnQgICAgIC8vID0+IDZcbiAgICovXG4gIHN0YXRpYyBHZW5lcmF0ZSAob2JqZWN0Q291bnQsIGluZGljZXMsIHN0cmlkZSA9IDQsIG9iamVjdE9mZnNldCA9IDApIHtcbiAgICBjb25zdCBhcnIgPSBuZXcgRWxlbWVudEluZGV4QXJyYXkob2JqZWN0Q291bnQsIGluZGljZXMubGVuZ3RoKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmplY3RDb3VudDsgKytpKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGluZGljZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgYXJyLmFycmF5WyhpICogYXJyLml0ZW1Db3VudCkgKyBqXSA9IGluZGljZXNbal0gKyAoKGkgKyBvYmplY3RPZmZzZXQpICogc3RyaWRlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhcnJcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvZWxlbWVudF9pbmRleF9hcnJheS5qcyIsIlxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICogQHBhcmFtIHtudW1iZXJ9IGJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuY29uc3QgbWF4T2YgPSAoYSwgYikgPT4gYSA+IGIgPyBhIDogYlxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGZpbmROZXh0UG93ZXJPZjIgKHgpIHtcbiAgbGV0IHAgPSAxXG4gIHdoaWxlICh4ID4gcCkgcCA8PD0gMVxuICByZXR1cm4gcFxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5jb25zdCBpc1Bvd2VyT2YyID0gbiA9PiBuICE9PSAwICYmIChuICYgKG4gLSAxKSkgPT09IDBcblxuZXhwb3J0IHtcbiAgbWF4T2YsXG4gIGZpbmROZXh0UG93ZXJPZjIsXG4gIGlzUG93ZXJPZjJcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay91dGlscy9tYXRoX2hlbHBlcnMuanMiLCJjb25zdCB7IG1hdDQgfSA9IHJlcXVpcmUoJ2dsLW1hdHJpeCcpXG5cbmNvbnN0IERFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLjBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0NCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm1hdDQgPSBtYXQ0LmNyZWF0ZSgpXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKVxuICB9XG5cbiAgaWRlbnRpdHkgKCkge1xuICAgIG1hdDQuaWRlbnRpdHkodGhpcy5tYXQ0KVxuICB9XG5cbiAgb3J0aG8gKHdpZHRoLCBoZWlnaHQsIHpSYW5nZSA9IE1hdGgucG93KDIsIDE2KSkge1xuICAgIGNvbnN0IGh3ID0gd2lkdGggPj4gMVxuICAgIGNvbnN0IGhoID0gaGVpZ2h0ID4+IDFcbiAgICBjb25zdCBoeiA9IHpSYW5nZSA+PiAxXG4gICAgbWF0NC5vcnRobyh0aGlzLm1hdDQsIC1odywgaHcsIC1oaCwgaGgsIC1oeiwgaHopXG4gIH1cblxuICBwZXJzcGVjdGl2ZSAod2lkdGgsIGhlaWdodCwgZGlzdGFuY2UgPSAxMDApIHtcbiAgICAvLyBodHRwczovL3dlYmdsZnVuZGFtZW50YWxzLm9yZy93ZWJnbC9sZXNzb25zL3dlYmdsLTNkLXBlcnNwZWN0aXZlLmh0bWxcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NjUzMDgwL2luLW9wZW5nbC1ob3ctY2FuLWktZGV0ZXJtaW5lLXRoZS1ib3VuZHMtb2YtdGhlLXZpZXctYXQtYS1naXZlbi1kZXB0aFxuICAgIC8vIGh0dHA6Ly9nbG1hdHJpeC5uZXQvZG9jcy9tb2R1bGUtbWF0NC5odG1sXG4gICAgY29uc3QgYXNwZWN0ID0gd2lkdGggLyBoZWlnaHRcbiAgICBjb25zdCBuZWFyID0gMFxuICAgIGNvbnN0IGZhciA9IDIwMDBcbiAgICBjb25zdCBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMi4wXG4gICAgY29uc3QgZm92eSA9IDIgKiBNYXRoLmF0YW4oaGFsZkhlaWdodCAvIGRpc3RhbmNlKVxuICAgIG1hdDQucGVyc3BlY3RpdmUodGhpcy5tYXQ0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcilcbiAgICAvLyBUT0RPIGNhbWVyYSBmZWF0dXJlXG4gICAgbWF0NC50cmFuc2xhdGUodGhpcy5tYXQ0LCB0aGlzLm1hdDQsIFswLCAwLCAtZGlzdGFuY2VdKVxuICB9XG5cbiAgdHJhbnNsYXRlICh4LCB5LCB6ID0gMCkge1xuICAgIG1hdDQudHJhbnNsYXRlKHRoaXMubWF0NCwgdGhpcy5tYXQ0LCBbeCwgeSwgel0pXG4gIH1cblxuICBzY2FsZSAoeCwgeSwgeiA9IDEpIHtcbiAgICBtYXQ0LnNjYWxlKHRoaXMubWF0NCwgdGhpcy5tYXQ0LCBbeCwgeSwgel0pXG4gIH1cblxuICByb3RhdGVYIChkZWcpIHtcbiAgICBtYXQ0LnJvdGF0ZVgodGhpcy5tYXQ0LCB0aGlzLm1hdDQsIGRlZyAqIERFRzJSQUQpXG4gIH1cblxuICByb3RhdGVZIChkZWcpIHtcbiAgICBtYXQ0LnJvdGF0ZVkodGhpcy5tYXQ0LCB0aGlzLm1hdDQsIGRlZyAqIERFRzJSQUQpXG4gIH1cblxuICByb3RhdGVaIChkZWcpIHtcbiAgICBtYXQ0LnJvdGF0ZVoodGhpcy5tYXQ0LCB0aGlzLm1hdDQsIGRlZyAqIERFRzJSQUQpXG4gIH1cblxuICBtdWx0aXBseSAoYSwgYikge1xuICAgIG1hdDQubXVsdGlwbHkodGhpcy5tYXQ0LCBhLm1hdDQsIGIubWF0NClcbiAgfVxuXG4gIGNvcHkgKHNyYykge1xuICAgIG1hdDQuY29weSh0aGlzLm1hdDQsIHNyYy5tYXQ0KVxuICB9XG5cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IGRvbGx5ID0gbmV3IE1hdDQoKVxuICAgIGRvbGx5LmNvcHkodGhpcylcbiAgICByZXR1cm4gZG9sbHlcbiAgfVxuXG4gIGdldCB4ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXQ0WzEyXVxuICB9XG5cbiAgc2V0IHggKHZhbCkge1xuICAgIHRoaXMubWF0NFsxMl0gPSB2YWxcbiAgfVxuXG4gIGdldCB5ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXQ0WzEzXVxuICB9XG5cbiAgc2V0IHkgKHZhbCkge1xuICAgIHRoaXMubWF0NFsxM10gPSB2YWxcbiAgfVxuXG4gIGdldCB6ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXQ0WzE0XVxuICB9XG5cbiAgc2V0IHogKHZhbCkge1xuICAgIHRoaXMubWF0NFsxNF0gPSB2YWxcbiAgfVxuXG4gIGdldCBzeCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0NFswXVxuICB9XG5cbiAgc2V0IHN4ICh2YWwpIHtcbiAgICB0aGlzLm1hdDRbMF0gPSB2YWxcbiAgfVxuXG4gIGdldCBzeSAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0NFs1XVxuICB9XG5cbiAgc2V0IHN5ICh2YWwpIHtcbiAgICB0aGlzLm1hdDRbNV0gPSB2YWxcbiAgfVxuXG4gIGdldCBzeiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0NFsxMF1cbiAgfVxuXG4gIHNldCBzeiAodmFsKSB7XG4gICAgdGhpcy5tYXQ0WzEwXSA9IHZhbFxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvdXRpbHMvbWF0NC5qcyIsIi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG5cbmltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vblwiO1xuXG4vKipcbiAqIDN4MyBNYXRyaXhcbiAqIEBtb2R1bGUgbWF0M1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQzXG4gKlxuICogQHJldHVybnMge21hdDN9IGEgbmV3IDN4MyBtYXRyaXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDkpO1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAxO1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdXBwZXItbGVmdCAzeDMgdmFsdWVzIGludG8gdGhlIGdpdmVuIG1hdDMuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyAzeDMgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgICB0aGUgc291cmNlIDR4NCBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQ0KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzRdO1xuICBvdXRbNF0gPSBhWzVdO1xuICBvdXRbNV0gPSBhWzZdO1xuICBvdXRbNl0gPSBhWzhdO1xuICBvdXRbN10gPSBhWzldO1xuICBvdXRbOF0gPSBhWzEwXTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDMgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDN9IGEgbWF0cml4IHRvIGNsb25lXG4gKiBAcmV0dXJucyB7bWF0M30gYSBuZXcgM3gzIG1hdHJpeFxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICBsZXQgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG1hdDMgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHJldHVybnMge21hdDN9IEEgbmV3IG1hdDNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICBsZXQgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0xMDtcbiAgb3V0WzRdID0gbTExO1xuICBvdXRbNV0gPSBtMTI7XG4gIG91dFs2XSA9IG0yMDtcbiAgb3V0WzddID0gbTIxO1xuICBvdXRbOF0gPSBtMjI7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MyB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggOClcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0wMjtcbiAgb3V0WzNdID0gbTEwO1xuICBvdXRbNF0gPSBtMTE7XG4gIG91dFs1XSA9IG0xMjtcbiAgb3V0WzZdID0gbTIwO1xuICBvdXRbN10gPSBtMjE7XG4gIG91dFs4XSA9IG0yMjtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgYSBtYXQzIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDE7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gIGlmIChvdXQgPT09IGEpIHtcbiAgICBsZXQgYTAxID0gYVsxXSwgYTAyID0gYVsyXSwgYTEyID0gYVs1XTtcbiAgICBvdXRbMV0gPSBhWzNdO1xuICAgIG91dFsyXSA9IGFbNl07XG4gICAgb3V0WzNdID0gYTAxO1xuICAgIG91dFs1XSA9IGFbN107XG4gICAgb3V0WzZdID0gYTAyO1xuICAgIG91dFs3XSA9IGExMjtcbiAgfSBlbHNlIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbM107XG4gICAgb3V0WzJdID0gYVs2XTtcbiAgICBvdXRbM10gPSBhWzFdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs3XTtcbiAgICBvdXRbNl0gPSBhWzJdO1xuICAgIG91dFs3XSA9IGFbNV07XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gIGxldCBhMDAgPSBhWzBdLCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdO1xuICBsZXQgYTEwID0gYVszXSwgYTExID0gYVs0XSwgYTEyID0gYVs1XTtcbiAgbGV0IGEyMCA9IGFbNl0sIGEyMSA9IGFbN10sIGEyMiA9IGFbOF07XG5cbiAgbGV0IGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMTtcbiAgbGV0IGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjA7XG4gIGxldCBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjA7XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICBsZXQgZGV0ID0gYTAwICogYjAxICsgYTAxICogYjExICsgYTAyICogYjIxO1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gIG91dFswXSA9IGIwMSAqIGRldDtcbiAgb3V0WzFdID0gKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0O1xuICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcbiAgb3V0WzNdID0gYjExICogZGV0O1xuICBvdXRbNF0gPSAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldDtcbiAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xuICBvdXRbNl0gPSBiMjEgKiBkZXQ7XG4gIG91dFs3XSA9ICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldDtcbiAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcbiAgbGV0IGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl07XG4gIGxldCBhMTAgPSBhWzNdLCBhMTEgPSBhWzRdLCBhMTIgPSBhWzVdO1xuICBsZXQgYTIwID0gYVs2XSwgYTIxID0gYVs3XSwgYTIyID0gYVs4XTtcblxuICBvdXRbMF0gPSAoYTExICogYTIyIC0gYTEyICogYTIxKTtcbiAgb3V0WzFdID0gKGEwMiAqIGEyMSAtIGEwMSAqIGEyMik7XG4gIG91dFsyXSA9IChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpO1xuICBvdXRbM10gPSAoYTEyICogYTIwIC0gYTEwICogYTIyKTtcbiAgb3V0WzRdID0gKGEwMCAqIGEyMiAtIGEwMiAqIGEyMCk7XG4gIG91dFs1XSA9IChhMDIgKiBhMTAgLSBhMDAgKiBhMTIpO1xuICBvdXRbNl0gPSAoYTEwICogYTIxIC0gYTExICogYTIwKTtcbiAgb3V0WzddID0gKGEwMSAqIGEyMCAtIGEwMCAqIGEyMSk7XG4gIG91dFs4XSA9IChhMDAgKiBhMTEgLSBhMDEgKiBhMTApO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICBsZXQgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXTtcbiAgbGV0IGExMCA9IGFbM10sIGExMSA9IGFbNF0sIGExMiA9IGFbNV07XG4gIGxldCBhMjAgPSBhWzZdLCBhMjEgPSBhWzddLCBhMjIgPSBhWzhdO1xuXG4gIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDMnc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBsZXQgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXTtcbiAgbGV0IGExMCA9IGFbM10sIGExMSA9IGFbNF0sIGExMiA9IGFbNV07XG4gIGxldCBhMjAgPSBhWzZdLCBhMjEgPSBhWzddLCBhMjIgPSBhWzhdO1xuXG4gIGxldCBiMDAgPSBiWzBdLCBiMDEgPSBiWzFdLCBiMDIgPSBiWzJdO1xuICBsZXQgYjEwID0gYlszXSwgYjExID0gYls0XSwgYjEyID0gYls1XTtcbiAgbGV0IGIyMCA9IGJbNl0sIGIyMSA9IGJbN10sIGIyMiA9IGJbOF07XG5cbiAgb3V0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICBvdXRbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gIG91dFsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcblxuICBvdXRbM10gPSBiMTAgKiBhMDAgKyBiMTEgKiBhMTAgKyBiMTIgKiBhMjA7XG4gIG91dFs0XSA9IGIxMCAqIGEwMSArIGIxMSAqIGExMSArIGIxMiAqIGEyMTtcbiAgb3V0WzVdID0gYjEwICogYTAyICsgYjExICogYTEyICsgYjEyICogYTIyO1xuXG4gIG91dFs2XSA9IGIyMCAqIGEwMCArIGIyMSAqIGExMCArIGIyMiAqIGEyMDtcbiAgb3V0WzddID0gYjIwICogYTAxICsgYjIxICogYTExICsgYjIyICogYTIxO1xuICBvdXRbOF0gPSBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjI7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0MyBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHt2ZWMyfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgbGV0IGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sXG4gICAgYTEwID0gYVszXSwgYTExID0gYVs0XSwgYTEyID0gYVs1XSxcbiAgICBhMjAgPSBhWzZdLCBhMjEgPSBhWzddLCBhMjIgPSBhWzhdLFxuICAgIHggPSB2WzBdLCB5ID0gdlsxXTtcblxuICBvdXRbMF0gPSBhMDA7XG4gIG91dFsxXSA9IGEwMTtcbiAgb3V0WzJdID0gYTAyO1xuXG4gIG91dFszXSA9IGExMDtcbiAgb3V0WzRdID0gYTExO1xuICBvdXRbNV0gPSBhMTI7XG5cbiAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XG4gIG91dFs3XSA9IHggKiBhMDEgKyB5ICogYTExICsgYTIxO1xuICBvdXRbOF0gPSB4ICogYTAyICsgeSAqIGExMiArIGEyMjtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MyBieSB0aGUgZ2l2ZW4gYW5nbGVcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XG4gIGxldCBhMDAgPSBhWzBdLCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdLFxuICAgIGExMCA9IGFbM10sIGExMSA9IGFbNF0sIGExMiA9IGFbNV0sXG4gICAgYTIwID0gYVs2XSwgYTIxID0gYVs3XSwgYTIyID0gYVs4XSxcblxuICAgIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gIG91dFswXSA9IGMgKiBhMDAgKyBzICogYTEwO1xuICBvdXRbMV0gPSBjICogYTAxICsgcyAqIGExMTtcbiAgb3V0WzJdID0gYyAqIGEwMiArIHMgKiBhMTI7XG5cbiAgb3V0WzNdID0gYyAqIGExMCAtIHMgKiBhMDA7XG4gIG91dFs0XSA9IGMgKiBhMTEgLSBzICogYTAxO1xuICBvdXRbNV0gPSBjICogYTEyIC0gcyAqIGEwMjtcblxuICBvdXRbNl0gPSBhMjA7XG4gIG91dFs3XSA9IGEyMTtcbiAgb3V0WzhdID0gYTIyO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDMgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICBsZXQgeCA9IHZbMF0sIHkgPSB2WzFdO1xuXG4gIG91dFswXSA9IHggKiBhWzBdO1xuICBvdXRbMV0gPSB4ICogYVsxXTtcbiAgb3V0WzJdID0geCAqIGFbMl07XG5cbiAgb3V0WzNdID0geSAqIGFbM107XG4gIG91dFs0XSA9IHkgKiBhWzRdO1xuICBvdXRbNV0gPSB5ICogYVs1XTtcblxuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDMuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0My50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3ZlYzJ9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDE7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IHZbMF07XG4gIG91dFs3XSA9IHZbMV07XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDMucm90YXRlKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCkge1xuICBsZXQgcyA9IE1hdGguc2luKHJhZCksIGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IHM7XG4gIG91dFsyXSA9IDA7XG5cbiAgb3V0WzNdID0gLXM7XG4gIG91dFs0XSA9IGM7XG4gIG91dFs1XSA9IDA7XG5cbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDMuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0My5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7dmVjMn0gdiBTY2FsaW5nIHZlY3RvclxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG5cbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gdlsxXTtcbiAgb3V0WzVdID0gMDtcblxuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIGZyb20gYSBtYXQyZCBpbnRvIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gY29weVxuICogQHJldHVybnMge21hdDN9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQyZChvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gMDtcblxuICBvdXRbM10gPSBhWzJdO1xuICBvdXRbNF0gPSBhWzNdO1xuICBvdXRbNV0gPSAwO1xuXG4gIG91dFs2XSA9IGFbNF07XG4gIG91dFs3XSA9IGFbNV07XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuKiBDYWxjdWxhdGVzIGEgM3gzIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4qXG4qIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiogQHBhcmFtIHtxdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4qXG4qIEByZXR1cm5zIHttYXQzfSBvdXRcbiovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XG4gIGxldCB4ID0gcVswXSwgeSA9IHFbMV0sIHogPSBxWzJdLCB3ID0gcVszXTtcbiAgbGV0IHgyID0geCArIHg7XG4gIGxldCB5MiA9IHkgKyB5O1xuICBsZXQgejIgPSB6ICsgejtcblxuICBsZXQgeHggPSB4ICogeDI7XG4gIGxldCB5eCA9IHkgKiB4MjtcbiAgbGV0IHl5ID0geSAqIHkyO1xuICBsZXQgenggPSB6ICogeDI7XG4gIGxldCB6eSA9IHogKiB5MjtcbiAgbGV0IHp6ID0geiAqIHoyO1xuICBsZXQgd3ggPSB3ICogeDI7XG4gIGxldCB3eSA9IHcgKiB5MjtcbiAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gIG91dFswXSA9IDEgLSB5eSAtIHp6O1xuICBvdXRbM10gPSB5eCAtIHd6O1xuICBvdXRbNl0gPSB6eCArIHd5O1xuXG4gIG91dFsxXSA9IHl4ICsgd3o7XG4gIG91dFs0XSA9IDEgLSB4eCAtIHp6O1xuICBvdXRbN10gPSB6eSAtIHd4O1xuXG4gIG91dFsyXSA9IHp4IC0gd3k7XG4gIG91dFs1XSA9IHp5ICsgd3g7XG4gIG91dFs4XSA9IDEgLSB4eCAtIHl5O1xuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuKiBDYWxjdWxhdGVzIGEgM3gzIG5vcm1hbCBtYXRyaXggKHRyYW5zcG9zZSBpbnZlcnNlKSBmcm9tIHRoZSA0eDQgbWF0cml4XG4qXG4qIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiogQHBhcmFtIHttYXQ0fSBhIE1hdDQgdG8gZGVyaXZlIHRoZSBub3JtYWwgbWF0cml4IGZyb21cbipcbiogQHJldHVybnMge21hdDN9IG91dFxuKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxGcm9tTWF0NChvdXQsIGEpIHtcbiAgbGV0IGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sIGEwMyA9IGFbM107XG4gIGxldCBhMTAgPSBhWzRdLCBhMTEgPSBhWzVdLCBhMTIgPSBhWzZdLCBhMTMgPSBhWzddO1xuICBsZXQgYTIwID0gYVs4XSwgYTIxID0gYVs5XSwgYTIyID0gYVsxMF0sIGEyMyA9IGFbMTFdO1xuICBsZXQgYTMwID0gYVsxMl0sIGEzMSA9IGFbMTNdLCBhMzIgPSBhWzE0XSwgYTMzID0gYVsxNV07XG5cbiAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgbGV0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgbGV0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgbGV0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgbGV0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgbGV0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgbGV0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgbGV0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgbGV0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICBvdXRbMl0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcblxuICBvdXRbM10gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgb3V0WzRdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuXG4gIG91dFs2XSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xuICBvdXRbN10gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcbiAgb3V0WzhdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSAyRCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggV2lkdGggb2YgeW91ciBnbCBjb250ZXh0XG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IEhlaWdodCBvZiBnbCBjb250ZXh0XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uKG91dCwgd2lkdGgsIGhlaWdodCkge1xuICAgIG91dFswXSA9IDIgLyB3aWR0aDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAtMiAvIGhlaWdodDtcbiAgICBvdXRbNV0gPSAwO1xuICAgIG91dFs2XSA9IC0xO1xuICAgIG91dFs3XSA9IDE7XG4gICAgb3V0WzhdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gJ21hdDMoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArXG4gICAgICAgICAgYVszXSArICcsICcgKyBhWzRdICsgJywgJyArIGFbNV0gKyAnLCAnICtcbiAgICAgICAgICBhWzZdICsgJywgJyArIGFbN10gKyAnLCAnICsgYVs4XSArICcpJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4oTWF0aC5zcXJ0KE1hdGgucG93KGFbMF0sIDIpICsgTWF0aC5wb3coYVsxXSwgMikgKyBNYXRoLnBvdyhhWzJdLCAyKSArIE1hdGgucG93KGFbM10sIDIpICsgTWF0aC5wb3coYVs0XSwgMikgKyBNYXRoLnBvdyhhWzVdLCAyKSArIE1hdGgucG93KGFbNl0sIDIpICsgTWF0aC5wb3coYVs3XSwgMikgKyBNYXRoLnBvdyhhWzhdLCAyKSkpXG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XTtcbiAgb3V0WzddID0gYVs3XSArIGJbN107XG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgb3V0WzVdID0gYVs1XSAtIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gLSBiWzZdO1xuICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgb3V0WzhdID0gYVs4XSAtIGJbOF07XG4gIHJldHVybiBvdXQ7XG59XG5cblxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICBvdXRbNF0gPSBhWzRdICogYjtcbiAgb3V0WzVdID0gYVs1XSAqIGI7XG4gIG91dFs2XSA9IGFbNl0gKiBiO1xuICBvdXRbN10gPSBhWzddICogYjtcbiAgb3V0WzhdID0gYVs4XSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MydzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIChiWzBdICogc2NhbGUpO1xuICBvdXRbMV0gPSBhWzFdICsgKGJbMV0gKiBzY2FsZSk7XG4gIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgb3V0WzNdID0gYVszXSArIChiWzNdICogc2NhbGUpO1xuICBvdXRbNF0gPSBhWzRdICsgKGJbNF0gKiBzY2FsZSk7XG4gIG91dFs1XSA9IGFbNV0gKyAoYls1XSAqIHNjYWxlKTtcbiAgb3V0WzZdID0gYVs2XSArIChiWzZdICogc2NhbGUpO1xuICBvdXRbN10gPSBhWzddICsgKGJbN10gKiBzY2FsZSk7XG4gIG91dFs4XSA9IGFbOF0gKyAoYls4XSAqIHNjYWxlKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHttYXQzfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge21hdDN9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJlxuICAgICAgICAgYVszXSA9PT0gYlszXSAmJiBhWzRdID09PSBiWzRdICYmIGFbNV0gPT09IGJbNV0gJiZcbiAgICAgICAgIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XSAmJiBhWzhdID09PSBiWzhdO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7bWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIGxldCBhMCA9IGFbMF0sIGExID0gYVsxXSwgYTIgPSBhWzJdLCBhMyA9IGFbM10sIGE0ID0gYVs0XSwgYTUgPSBhWzVdLCBhNiA9IGFbNl0sIGE3ID0gYVs3XSwgYTggPSBhWzhdO1xuICBsZXQgYjAgPSBiWzBdLCBiMSA9IGJbMV0sIGIyID0gYlsyXSwgYjMgPSBiWzNdLCBiNCA9IGJbNF0sIGI1ID0gYls1XSwgYjYgPSBiWzZdLCBiNyA9IGJbN10sIGI4ID0gYls4XTtcbiAgcmV0dXJuIChNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSkpO1xufVxuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0My5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgbXVsID0gbXVsdGlwbHk7XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzdWIgPSBzdWJ0cmFjdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4L21hdDMuanNcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG5cbmltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vblwiO1xuXG4vKipcbiAqIDMgRGltZW5zaW9uYWwgVmVjdG9yXG4gKiBAbW9kdWxlIHZlYzNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzNcbiAqXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIGxldCBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgb3V0WzBdID0gMDtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzMgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNsb25lXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgbGV0IHggPSBhWzBdO1xuICBsZXQgeSA9IGFbMV07XG4gIGxldCB6ID0gYVsyXTtcbiAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKHgsIHksIHopIHtcbiAgbGV0IG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMzIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBzb3VyY2UgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogRGl2aWRlcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAvIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE1hdGguY2VpbCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjZWlsXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjZWlsKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5jZWlsKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE1hdGguZmxvb3IgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gZmxvb3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1pbihhWzJdLCBiWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5tYXgoYVsyXSwgYlsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byByb3VuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjMyBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIChiWzBdICogc2NhbGUpO1xuICBvdXRbMV0gPSBhWzFdICsgKGJbMV0gKiBzY2FsZSk7XG4gIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgbGV0IHggPSBiWzBdIC0gYVswXTtcbiAgbGV0IHkgPSBiWzFdIC0gYVsxXTtcbiAgbGV0IHogPSBiWzJdIC0gYVsyXTtcbiAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XG4gIGxldCB4ID0gYlswXSAtIGFbMF07XG4gIGxldCB5ID0gYlsxXSAtIGFbMV07XG4gIGxldCB6ID0gYlsyXSAtIGFbMl07XG4gIHJldHVybiB4KnggKyB5KnkgKyB6Kno7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICBsZXQgeCA9IGFbMF07XG4gIGxldCB5ID0gYVsxXTtcbiAgbGV0IHogPSBhWzJdO1xuICByZXR1cm4geCp4ICsgeSp5ICsgeip6O1xufVxuXG4vKipcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gbmVnYXRlXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2Uob3V0LCBhKSB7XG4gIG91dFswXSA9IDEuMCAvIGFbMF07XG4gIG91dFsxXSA9IDEuMCAvIGFbMV07XG4gIG91dFsyXSA9IDEuMCAvIGFbMl07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICBsZXQgeCA9IGFbMF07XG4gIGxldCB5ID0gYVsxXTtcbiAgbGV0IHogPSBhWzJdO1xuICBsZXQgbGVuID0geCp4ICsgeSp5ICsgeip6O1xuICBpZiAobGVuID4gMCkge1xuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIG91dFswXSA9IGFbMF0gKiBsZW47XG4gICAgb3V0WzFdID0gYVsxXSAqIGxlbjtcbiAgICBvdXRbMl0gPSBhWzJdICogbGVuO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gIGxldCBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdO1xuICBsZXQgYnggPSBiWzBdLCBieSA9IGJbMV0sIGJ6ID0gYlsyXTtcblxuICBvdXRbMF0gPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XG4gIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgbGV0IGF4ID0gYVswXTtcbiAgbGV0IGF5ID0gYVsxXTtcbiAgbGV0IGF6ID0gYVsyXTtcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIGhlcm1pdGUgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYyB0aGUgdGhpcmQgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGVybWl0ZShvdXQsIGEsIGIsIGMsIGQsIHQpIHtcbiAgbGV0IGZhY3RvclRpbWVzMiA9IHQgKiB0O1xuICBsZXQgZmFjdG9yMSA9IGZhY3RvclRpbWVzMiAqICgyICogdCAtIDMpICsgMTtcbiAgbGV0IGZhY3RvcjIgPSBmYWN0b3JUaW1lczIgKiAodCAtIDIpICsgdDtcbiAgbGV0IGZhY3RvcjMgPSBmYWN0b3JUaW1lczIgKiAodCAtIDEpO1xuICBsZXQgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqICgzIC0gMiAqIHQpO1xuXG4gIG91dFswXSA9IGFbMF0gKiBmYWN0b3IxICsgYlswXSAqIGZhY3RvcjIgKyBjWzBdICogZmFjdG9yMyArIGRbMF0gKiBmYWN0b3I0O1xuICBvdXRbMV0gPSBhWzFdICogZmFjdG9yMSArIGJbMV0gKiBmYWN0b3IyICsgY1sxXSAqIGZhY3RvcjMgKyBkWzFdICogZmFjdG9yNDtcbiAgb3V0WzJdID0gYVsyXSAqIGZhY3RvcjEgKyBiWzJdICogZmFjdG9yMiArIGNbMl0gKiBmYWN0b3IzICsgZFsyXSAqIGZhY3RvcjQ7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIGJlemllciBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGQgdGhlIGZvdXJ0aCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiZXppZXIob3V0LCBhLCBiLCBjLCBkLCB0KSB7XG4gIGxldCBpbnZlcnNlRmFjdG9yID0gMSAtIHQ7XG4gIGxldCBpbnZlcnNlRmFjdG9yVGltZXNUd28gPSBpbnZlcnNlRmFjdG9yICogaW52ZXJzZUZhY3RvcjtcbiAgbGV0IGZhY3RvclRpbWVzMiA9IHQgKiB0O1xuICBsZXQgZmFjdG9yMSA9IGludmVyc2VGYWN0b3JUaW1lc1R3byAqIGludmVyc2VGYWN0b3I7XG4gIGxldCBmYWN0b3IyID0gMyAqIHQgKiBpbnZlcnNlRmFjdG9yVGltZXNUd287XG4gIGxldCBmYWN0b3IzID0gMyAqIGZhY3RvclRpbWVzMiAqIGludmVyc2VGYWN0b3I7XG4gIGxldCBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogdDtcblxuICBvdXRbMF0gPSBhWzBdICogZmFjdG9yMSArIGJbMF0gKiBmYWN0b3IyICsgY1swXSAqIGZhY3RvcjMgKyBkWzBdICogZmFjdG9yNDtcbiAgb3V0WzFdID0gYVsxXSAqIGZhY3RvcjEgKyBiWzFdICogZmFjdG9yMiArIGNbMV0gKiBmYWN0b3IzICsgZFsxXSAqIGZhY3RvcjQ7XG4gIG91dFsyXSA9IGFbMl0gKiBmYWN0b3IxICsgYlsyXSAqIGZhY3RvcjIgKyBjWzJdICogZmFjdG9yMyArIGRbMl0gKiBmYWN0b3I0O1xuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xuXG4gIGxldCByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICBsZXQgeiA9IChnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCkgLSAxLjA7XG4gIGxldCB6U2NhbGUgPSBNYXRoLnNxcnQoMS4wLXoqeikgKiBzY2FsZTtcblxuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHpTY2FsZTtcbiAgb3V0WzFdID0gTWF0aC5zaW4ocikgKiB6U2NhbGU7XG4gIG91dFsyXSA9IHogKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQ0LlxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICBsZXQgeCA9IGFbMF0sIHkgPSBhWzFdLCB6ID0gYVsyXTtcbiAgbGV0IHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gIHcgPSB3IHx8IDEuMDtcbiAgb3V0WzBdID0gKG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdKSAvIHc7XG4gIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xuICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgbWF0My5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDN9IG0gdGhlIDN4MyBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XG4gIGxldCB4ID0gYVswXSwgeSA9IGFbMV0sIHogPSBhWzJdO1xuICBvdXRbMF0gPSB4ICogbVswXSArIHkgKiBtWzNdICsgeiAqIG1bNl07XG4gIG91dFsxXSA9IHggKiBtWzFdICsgeSAqIG1bNF0gKyB6ICogbVs3XTtcbiAgb3V0WzJdID0geCAqIG1bMl0gKyB5ICogbVs1XSArIHogKiBtWzhdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgLy8gYmVuY2htYXJrczogaHR0cDovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tdmVjMy1pbXBsZW1lbnRhdGlvbnNcblxuICBsZXQgeCA9IGFbMF0sIHkgPSBhWzFdLCB6ID0gYVsyXTtcbiAgbGV0IHF4ID0gcVswXSwgcXkgPSBxWzFdLCBxeiA9IHFbMl0sIHF3ID0gcVszXTtcblxuICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xuICBsZXQgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XG4gIGxldCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgbGV0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuICBsZXQgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG4gIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcbiAgb3V0WzBdID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcbiAgb3V0WzFdID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgb3V0WzJdID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB4LWF4aXNcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gYyBUaGUgYW5nbGUgb2Ygcm90YXRpb25cbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCBiLCBjKXtcbiAgbGV0IHAgPSBbXSwgcj1bXTtcbiAgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuICBwWzBdID0gYVswXSAtIGJbMF07XG4gIHBbMV0gPSBhWzFdIC0gYlsxXTtcbiAgcFsyXSA9IGFbMl0gLSBiWzJdO1xuXG4gIC8vcGVyZm9ybSByb3RhdGlvblxuICByWzBdID0gcFswXTtcbiAgclsxXSA9IHBbMV0qTWF0aC5jb3MoYykgLSBwWzJdKk1hdGguc2luKGMpO1xuICByWzJdID0gcFsxXSpNYXRoLnNpbihjKSArIHBbMl0qTWF0aC5jb3MoYyk7XG5cbiAgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgeS1heGlzXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGMgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgYiwgYyl7XG4gIGxldCBwID0gW10sIHI9W107XG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xuICBwWzFdID0gYVsxXSAtIGJbMV07XG4gIHBbMl0gPSBhWzJdIC0gYlsyXTtcblxuICAvL3BlcmZvcm0gcm90YXRpb25cbiAgclswXSA9IHBbMl0qTWF0aC5zaW4oYykgKyBwWzBdKk1hdGguY29zKGMpO1xuICByWzFdID0gcFsxXTtcbiAgclsyXSA9IHBbMl0qTWF0aC5jb3MoYykgLSBwWzBdKk1hdGguc2luKGMpO1xuXG4gIC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cbiAgb3V0WzBdID0gclswXSArIGJbMF07XG4gIG91dFsxXSA9IHJbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSByWzJdICsgYlsyXTtcblxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHotYXhpc1xuICogQHBhcmFtIHt2ZWMzfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMzXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIGIsIGMpe1xuICBsZXQgcCA9IFtdLCByPVtdO1xuICAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBwWzJdID0gYVsyXSAtIGJbMl07XG5cbiAgLy9wZXJmb3JtIHJvdGF0aW9uXG4gIHJbMF0gPSBwWzBdKk1hdGguY29zKGMpIC0gcFsxXSpNYXRoLnNpbihjKTtcbiAgclsxXSA9IHBbMF0qTWF0aC5zaW4oYykgKyBwWzFdKk1hdGguY29zKGMpO1xuICByWzJdID0gcFsyXTtcblxuICAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIDNEIHZlY3RvcnNcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFuZ2xlKGEsIGIpIHtcbiAgbGV0IHRlbXBBID0gZnJvbVZhbHVlcyhhWzBdLCBhWzFdLCBhWzJdKTtcbiAgbGV0IHRlbXBCID0gZnJvbVZhbHVlcyhiWzBdLCBiWzFdLCBiWzJdKTtcblxuICBub3JtYWxpemUodGVtcEEsIHRlbXBBKTtcbiAgbm9ybWFsaXplKHRlbXBCLCB0ZW1wQik7XG5cbiAgbGV0IGNvc2luZSA9IGRvdCh0ZW1wQSwgdGVtcEIpO1xuXG4gIGlmKGNvc2luZSA+IDEuMCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGVsc2UgaWYoY29zaW5lIDwgLTEuMCkge1xuICAgIHJldHVybiBNYXRoLlBJO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBNYXRoLmFjb3MoY29zaW5lKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiAndmVjMygnICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnKSc7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICBsZXQgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXTtcbiAgbGV0IGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl07XG4gIHJldHVybiAoTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpKTtcbn1cblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHN1YiA9IHN1YnRyYWN0O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgbXVsID0gbXVsdGlwbHk7XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpdmlkZX1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZGl2ID0gZGl2aWRlO1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZGlzdCA9IGRpc3RhbmNlO1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zcXVhcmVkRGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2U7XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmxlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgbGVuID0gbGVuZ3RoO1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zcXVhcmVkTGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzcXJMZW4gPSBzcXVhcmVkTGVuZ3RoO1xuXG4vKipcbiAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWMzcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWMzLiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjM3MgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cbiAqIEByZXR1cm5zIHtBcnJheX0gYVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JFYWNoID0gKGZ1bmN0aW9uKCkge1xuICBsZXQgdmVjID0gY3JlYXRlKCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIHN0cmlkZSwgb2Zmc2V0LCBjb3VudCwgZm4sIGFyZykge1xuICAgIGxldCBpLCBsO1xuICAgIGlmKCFzdHJpZGUpIHtcbiAgICAgIHN0cmlkZSA9IDM7XG4gICAgfVxuXG4gICAgaWYoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBpZihjb3VudCkge1xuICAgICAgbCA9IE1hdGgubWluKChjb3VudCAqIHN0cmlkZSkgKyBvZmZzZXQsIGEubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbCA9IGEubGVuZ3RoO1xuICAgIH1cblxuICAgIGZvcihpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgIHZlY1swXSA9IGFbaV07IHZlY1sxXSA9IGFbaSsxXTsgdmVjWzJdID0gYVtpKzJdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdOyBhW2krMV0gPSB2ZWNbMV07IGFbaSsyXSA9IHZlY1syXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcbn0pKCk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC92ZWMzLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEJyYW5kb24gSm9uZXMsIENvbGluIE1hY0tlbnppZSBJVi5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLiAqL1xuXG5pbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb25cIjtcblxuLyoqXG4gKiA0IERpbWVuc2lvbmFsIFZlY3RvclxuICogQG1vZHVsZSB2ZWM0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWM0XG4gKlxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IDA7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWM0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBjbG9uZVxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICBsZXQgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWM0IGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKHgsIHksIHosIHcpIHtcbiAgbGV0IG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSB3O1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWM0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBzb3VyY2UgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSB3O1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gIG91dFszXSA9IGFbM10gKiBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAvIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNlaWxcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmNlaWwoYVsyXSk7XG4gIG91dFszXSA9IE1hdGguY2VpbChhWzNdKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGZsb29yXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbG9vcihvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5mbG9vcihhWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5mbG9vcihhWzNdKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XG4gIG91dFszXSA9IE1hdGgubWluKGFbM10sIGJbM10pO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5tYXgoYVszXSwgYlszXSk7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byByb3VuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gIG91dFszXSA9IE1hdGgucm91bmQoYVszXSk7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjNCBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gdmVjNCdzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyAoYlswXSAqIHNjYWxlKTtcbiAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICBvdXRbMl0gPSBhWzJdICsgKGJbMl0gKiBzY2FsZSk7XG4gIG91dFszXSA9IGFbM10gKyAoYlszXSAqIHNjYWxlKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgbGV0IHggPSBiWzBdIC0gYVswXTtcbiAgbGV0IHkgPSBiWzFdIC0gYVsxXTtcbiAgbGV0IHogPSBiWzJdIC0gYVsyXTtcbiAgbGV0IHcgPSBiWzNdIC0gYVszXTtcbiAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnogKyB3KncpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XG4gIGxldCB4ID0gYlswXSAtIGFbMF07XG4gIGxldCB5ID0gYlsxXSAtIGFbMV07XG4gIGxldCB6ID0gYlsyXSAtIGFbMl07XG4gIGxldCB3ID0gYlszXSAtIGFbM107XG4gIHJldHVybiB4KnggKyB5KnkgKyB6KnogKyB3Knc7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gIGxldCB4ID0gYVswXTtcbiAgbGV0IHkgPSBhWzFdO1xuICBsZXQgeiA9IGFbMl07XG4gIGxldCB3ID0gYVszXTtcbiAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnogKyB3KncpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcbiAgbGV0IHggPSBhWzBdO1xuICBsZXQgeSA9IGFbMV07XG4gIGxldCB6ID0gYVsyXTtcbiAgbGV0IHcgPSBhWzNdO1xuICByZXR1cm4geCp4ICsgeSp5ICsgeip6ICsgdyp3O1xufVxuXG4vKipcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gbmVnYXRlXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIG91dFszXSA9IC1hWzNdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gaW52ZXJ0XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICBvdXRbM10gPSAxLjAgLyBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgbGV0IHggPSBhWzBdO1xuICBsZXQgeSA9IGFbMV07XG4gIGxldCB6ID0gYVsyXTtcbiAgbGV0IHcgPSBhWzNdO1xuICBsZXQgbGVuID0geCp4ICsgeSp5ICsgeip6ICsgdyp3O1xuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICBvdXRbMF0gPSB4ICogbGVuO1xuICAgIG91dFsxXSA9IHkgKiBsZW47XG4gICAgb3V0WzJdID0geiAqIGxlbjtcbiAgICBvdXRbM10gPSB3ICogbGVuO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgbGV0IGF4ID0gYVswXTtcbiAgbGV0IGF5ID0gYVsxXTtcbiAgbGV0IGF6ID0gYVsyXTtcbiAgbGV0IGF3ID0gYVszXTtcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHZlY3RvclNjYWxlKSB7XG4gIHZlY3RvclNjYWxlID0gdmVjdG9yU2NhbGUgfHwgMS4wO1xuXG4gIC8vVE9ETzogVGhpcyBpcyBhIHByZXR0eSBhd2Z1bCB3YXkgb2YgZG9pbmcgdGhpcy4gRmluZCBzb21ldGhpbmcgYmV0dGVyLlxuICBvdXRbMF0gPSBnbE1hdHJpeC5SQU5ET00oKTtcbiAgb3V0WzFdID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gIG91dFsyXSA9IGdsTWF0cml4LlJBTkRPTSgpO1xuICBvdXRbM10gPSBnbE1hdHJpeC5SQU5ET00oKTtcbiAgbm9ybWFsaXplKG91dCwgb3V0KTtcbiAgc2NhbGUob3V0LCBvdXQsIHZlY3RvclNjYWxlKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWM0IHdpdGggYSBtYXQ0LlxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIGxldCB4ID0gYVswXSwgeSA9IGFbMV0sIHogPSBhWzJdLCB3ID0gYVszXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6ICsgbVsxMl0gKiB3O1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSAqIHc7XG4gIG91dFsyXSA9IG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSAqIHc7XG4gIG91dFszXSA9IG1bM10gKiB4ICsgbVs3XSAqIHkgKyBtWzExXSAqIHogKyBtWzE1XSAqIHc7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjNCB3aXRoIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7cXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xuICBsZXQgeCA9IGFbMF0sIHkgPSBhWzFdLCB6ID0gYVsyXTtcbiAgbGV0IHF4ID0gcVswXSwgcXkgPSBxWzFdLCBxeiA9IHFbMl0sIHF3ID0gcVszXTtcblxuICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xuICBsZXQgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XG4gIGxldCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgbGV0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuICBsZXQgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG4gIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcbiAgb3V0WzBdID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcbiAgb3V0WzFdID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgb3V0WzJdID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcbiAgb3V0WzNdID0gYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gJ3ZlYzQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnKSc7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM107XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIGxldCBhMCA9IGFbMF0sIGExID0gYVsxXSwgYTIgPSBhWzJdLCBhMyA9IGFbM107XG4gIGxldCBiMCA9IGJbMF0sIGIxID0gYlsxXSwgYjIgPSBiWzJdLCBiMyA9IGJbM107XG4gIHJldHVybiAoTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSk7XG59XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzdWIgPSBzdWJ0cmFjdDtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IG11bCA9IG11bHRpcGx5O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5kaXZpZGV9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGRpdiA9IGRpdmlkZTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuZGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGRpc3QgPSBkaXN0YW5jZTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZERpc3RhbmNlfVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzcXJEaXN0ID0gc3F1YXJlZERpc3RhbmNlO1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5sZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGxlbiA9IGxlbmd0aDtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcblxuLyoqXG4gKiBQZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG92ZXIgYW4gYXJyYXkgb2YgdmVjNHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYSB0aGUgYXJyYXkgb2YgdmVjdG9ycyB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpZGUgTnVtYmVyIG9mIGVsZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIGVhY2ggdmVjNC4gSWYgMCBhc3N1bWVzIHRpZ2h0bHkgcGFja2VkXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gY291bnQgTnVtYmVyIG9mIHZlYzRzIHRvIGl0ZXJhdGUgb3Zlci4gSWYgMCBpdGVyYXRlcyBvdmVyIGVudGlyZSBhcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCB2ZWN0b3IgaW4gdGhlIGFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXG4gKiBAcmV0dXJucyB7QXJyYXl9IGFcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZm9yRWFjaCA9IChmdW5jdGlvbigpIHtcbiAgbGV0IHZlYyA9IGNyZWF0ZSgpO1xuXG4gIHJldHVybiBmdW5jdGlvbihhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICBsZXQgaSwgbDtcbiAgICBpZighc3RyaWRlKSB7XG4gICAgICBzdHJpZGUgPSA0O1xuICAgIH1cblxuICAgIGlmKCFvZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuXG4gICAgaWYoY291bnQpIHtcbiAgICAgIGwgPSBNYXRoLm1pbigoY291bnQgKiBzdHJpZGUpICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICB2ZWNbMF0gPSBhW2ldOyB2ZWNbMV0gPSBhW2krMV07IHZlY1syXSA9IGFbaSsyXTsgdmVjWzNdID0gYVtpKzNdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdOyBhW2krMV0gPSB2ZWNbMV07IGFbaSsyXSA9IHZlY1syXTsgYVtpKzNdID0gdmVjWzNdO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xufSkoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4L3ZlYzQuanNcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTaGFkZXJWYXJpYWJsZSBmcm9tICcuL3NoYWRlcl92YXJpYWJsZSdcblxuLyoqXG4gKiBTaGFkZXIgdW5pZm9ybSB2YXJpYWJsZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhZGVyVW5pZm9ybVZhcmlhYmxlIGV4dGVuZHMgU2hhZGVyVmFyaWFibGUge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSB2YWx1ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKG5hbWUsIHZhbHVlKSB7XG4gICAgc3VwZXIobmFtZSwgU2hhZGVyVmFyaWFibGUuVFlQRS5VTklGT1JNLCB2YWx1ZSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3VuaWZvcm1fdmFyaWFibGUuanMiLCJpbXBvcnQgVk9EZXNjcmlwdG9yIGZyb20gJy4vdl9vX2Rlc2NyaXB0b3InXG5pbXBvcnQgU2hhZGVyU291cmNlIGZyb20gJy4vc2hhZGVyX3NvdXJjZSdcblxuaW1wb3J0IGRlc3Ryb3kgZnJvbSAnLi4vdXRpbHMvZGVzdHJveSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzb3VyY2VMaWJyYXJ5IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuZGVzY3JpcHRvcnMgPSBuZXcgTWFwKClcbiAgICB0aGlzLnZlcnRleFNoYWRlcnMgPSBuZXcgTWFwKClcbiAgICB0aGlzLmZyYWdtZW50U2hhZGVycyA9IG5ldyBNYXAoKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kZXNjcmlwdG9ycy5jbGVhcigpXG4gICAgdGhpcy52ZXJ0ZXhTaGFkZXJzLmNsZWFyKClcbiAgICB0aGlzLmZyYWdtZW50U2hhZGVycy5jbGVhcigpXG4gICAgZGVzdHJveSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXNjcmlwdGlvbiAtIHNlZSBgVk9EZXNjcmlwdG9yYCBmb3IgbW9yZSBkZXRhaWxzXG4gICAqL1xuICBhZGREZXNjcmlwdG9yIChuYW1lLCBkZXNjcmlwdGlvbikge1xuICAgIHRoaXMuZGVzY3JpcHRvcnMuc2V0KG5hbWUsIG5ldyBWT0Rlc2NyaXB0b3IoZGVzY3JpcHRpb24pKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb258c3RyaW5nW119IHNvdXJjZSAtIHNlZSBgU2hhZGVyU291cmNlYCBmb3IgbW9yZSBkZXRhaWxzXG4gICAqL1xuICBhZGRWZXJ0ZXhTaGFkZXIgKG5hbWUsIHNvdXJjZSkge1xuICAgIHRoaXMudmVydGV4U2hhZGVycy5zZXQobmFtZSwgbmV3IFNoYWRlclNvdXJjZShTaGFkZXJTb3VyY2UuVkVSVEVYX1NIQURFUiwgc291cmNlKSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufHN0cmluZ1tdfSBzb3VyY2UgLSBzZWUgYFNoYWRlclNvdXJjZWAgZm9yIG1vcmUgZGV0YWlsc1xuICAgKi9cbiAgYWRkRnJhZ21lbnRTaGFkZXIgKG5hbWUsIHNvdXJjZSkge1xuICAgIHRoaXMuZnJhZ21lbnRTaGFkZXJzLnNldChuYW1lLCBuZXcgU2hhZGVyU291cmNlKFNoYWRlclNvdXJjZS5GUkFHTUVOVF9TSEFERVIsIHNvdXJjZSkpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJucyB7Vk9EZXNjcmlwdG9yfVxuICAgKi9cbiAgZmluZERlc2NyaXB0b3IgKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5kZXNjcmlwdG9ycy5nZXQobmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJucyB7U2hhZGVyU291cmNlfVxuICAgKi9cbiAgZmluZFZlcnRleFNoYWRlciAobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnZlcnRleFNoYWRlcnMuZ2V0KG5hbWUpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybnMge1NoYWRlclNvdXJjZX1cbiAgICovXG4gIGZpbmRGcmFnbWVudFNoYWRlciAobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmZyYWdtZW50U2hhZGVycy5nZXQobmFtZSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvcmVzb3VyY2VfbGlicmFyeS5qcyIsImltcG9ydCBWT0FycmF5IGZyb20gJy4vdl9vX2FycmF5J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJBdHRyaWJWYWx1ZSB7XG4gIGNvbnN0cnVjdG9yIChuYW1lLCBkZXNjcmlwdG9yLCBidWZmZXJTb3VyY2UpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy5kZXNjcmlwdG9yID0gZGVzY3JpcHRvclxuICAgIHRoaXMuYnVmZmVyU291cmNlID0gYnVmZmVyU291cmNlXG4gIH1cblxuICBnZXQgYXR0ckRlc2NyaXB0b3IgKCkge1xuICAgIHJldHVybiB0aGlzLmRlc2NyaXB0b3IuYXR0clt0aGlzLm5hbWVdXG4gIH1cblxuICBnZXQgcmVzb3VyY2VSZWYgKCkge1xuICAgIGNvbnN0IHsgYnVmZmVyU291cmNlIH0gPSB0aGlzXG4gICAgcmV0dXJuIChidWZmZXJTb3VyY2UgaW5zdGFuY2VvZiBWT0FycmF5XG4gICAgICA/IGJ1ZmZlclNvdXJjZS5yZXNvdXJjZVJlZlxuICAgICAgOiBidWZmZXJTb3VyY2Uudm9BcnJheS5yZXNvdXJjZVJlZilcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX2F0dHJpYl92YWx1ZS5qcyIsImltcG9ydCBTaGFkZXJWYXJpYWJsZSBmcm9tICcuL3NoYWRlcl92YXJpYWJsZSdcblxuLyoqXG4gKiBTaGFkZXIgYXR0cmlidXRlIHZhcmlhYmxlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJBdHRyaWJWYXJpYWJsZSBleHRlbmRzIFNoYWRlclZhcmlhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gdmFsdWVcbiAgICovXG4gIGNvbnN0cnVjdG9yIChuYW1lLCB2YWx1ZSkge1xuICAgIHN1cGVyKG5hbWUsIFNoYWRlclZhcmlhYmxlLlRZUEUuQVRUUklCLCB2YWx1ZSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX2F0dHJpYl92YXJpYWJsZS5qcyIsImltcG9ydCBnZW5lcmF0ZVVVSUQgZnJvbSAnLi4vdXRpbHMvZ2VuZXJhdGVfdXVpZCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhZGVyUHJvZ3JhbSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1NoYWRlclNvdXJjZX0gdmVydGV4U2hhZGVyXG4gICAqIEBwYXJhbSB7U2hhZGVyU291cmNlfSBmcmFnbWVudFNoYWRlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBnZW5lcmF0ZVVVSUQoKVxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1NoYWRlclNvdXJjZX1cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRleFNoYWRlciA9IHZlcnRleFNoYWRlclxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1NoYWRlclNvdXJjZX1cbiAgICAgKi9cbiAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gZnJhZ21lbnRTaGFkZXJcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3Byb2dyYW0uanMiLCJpbXBvcnQgU2hhZGVyVmFyaWFibGVHcm91cCBmcm9tICcuL3NoYWRlcl92YXJpYWJsZV9ncm91cCdcbmltcG9ydCBTaGFkZXJUZXh0dXJlMmRWYXJpYWJsZSBmcm9tICcuL3NoYWRlcl90ZXh0dXJlXzJkX3ZhcmlhYmxlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZXJUZXh0dXJlR3JvdXAge1xuICBjb25zdHJ1Y3RvciAoc2hhZGVyTGlicmFyeSwgc2hhZGVyVGV4dHVyZU1hcCkge1xuICAgIHRoaXMuc2hhZGVyTGlicmFyeSA9IHNoYWRlckxpYnJhcnlcbiAgICB0aGlzLndhaXRGb3IgPSBPYmplY3Qua2V5cyhzaGFkZXJUZXh0dXJlTWFwKS5tYXAoc2hhZGVyVmFyS2V5ID0+ICh7XG4gICAgICBzaGFkZXJWYXJLZXksXG4gICAgICB0ZXh0dXJlSWQ6IHNoYWRlclRleHR1cmVNYXBbc2hhZGVyVmFyS2V5XSxcbiAgICAgIGlzTG9hZGVkOiBmYWxzZVxuICAgIH0pKVxuICAgIHRoaXMuc2hhZGVyVmFyR3JvdXAgPSBuZXcgU2hhZGVyVmFyaWFibGVHcm91cChbXSlcbiAgICB0aGlzLnNoYWRlclZhclN0b3JlID0gbmV3IE1hcCgpXG4gIH1cblxuICBnZXQgaXNMb2FkZWQgKCkge1xuICAgIHJldHVybiB0aGlzLndhaXRGb3IubGVuZ3RoID09PSAwICYmIHRoaXMuc2hhZGVyVmFyR3JvdXAuc2hhZGVyVmFycy5sZW5ndGggPiAwXG4gIH1cblxuICB3aGVuTG9hZGVkIChvbkxvYWRlZCkge1xuICAgIGlmICghdGhpcy5pc0xvYWRlZCkge1xuICAgICAgdGhpcy53YWl0Rm9yLmZvckVhY2god2FpdEZvciA9PiB7XG4gICAgICAgIGlmICghd2FpdEZvci5pc0xvYWRlZCkge1xuICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zaGFkZXJMaWJyYXJ5LnN0YXRlcy5nZXQod2FpdEZvci50ZXh0dXJlSWQpXG4gICAgICAgICAgaWYgKHN0YXRlID09PSB1bmRlZmluZWQgfHwgIXN0YXRlLmlzUmVhZHkpIHJldHVyblxuXG4gICAgICAgICAgY29uc3Qgc2hhZGVyVmFyID0gbmV3IFNoYWRlclRleHR1cmUyZFZhcmlhYmxlKHdhaXRGb3Iuc2hhZGVyVmFyS2V5KVxuICAgICAgICAgIHNoYWRlclZhci50ZXh0dXJlID0gc3RhdGUudGV4dHVyZVxuICAgICAgICAgIHRoaXMuc2hhZGVyVmFyR3JvdXAuc2hhZGVyVmFycy5wdXNoKHNoYWRlclZhcilcblxuICAgICAgICAgIHdhaXRGb3IuaXNMb2FkZWQgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLndhaXRGb3IgPSB0aGlzLndhaXRGb3IuZmlsdGVyKHdhaXRGb3IgPT4gd2FpdEZvci5pc0xvYWRlZCA9PT0gZmFsc2UpXG4gICAgICBpZiAodGhpcy5pc0xvYWRlZCkge1xuICAgICAgICBvbkxvYWRlZCh0aGlzLnNoYWRlclZhckdyb3VwKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvbkxvYWRlZCh0aGlzLnNoYWRlclZhckdyb3VwKVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX3RleHR1cmVfZ3JvdXAuanMiLCIvKipcbiAqIFNoYWRlciBhdHRyaWJ1dGUgdmFyaWFibGUgKmFsaWFzKi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhZGVyVmFyaWFibGVBbGlhcyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IHZhbHVlXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobmFtZSwgc2hhZGVyVmFyKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMuc2hhZGVyVmFyID0gc2hhZGVyVmFyXG4gIH1cblxuICBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZGVyVmFyLnR5cGVcbiAgfVxuXG4gIGdldCB2YWx1ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZGVyVmFyLnZhbHVlXG4gIH1cblxuICBnZXQgc2VyaWFsICgpIHtcbiAgICByZXR1cm4gdGhpcy5zaGFkZXJWYXIuc2VyaWFsXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3NoYWRlcl92YXJpYWJsZV9hbGlhcy5qcyIsImltcG9ydCBTaGFkZXJWYXJpYWJsZUdyb3VwIGZyb20gJy4vc2hhZGVyX3ZhcmlhYmxlX2dyb3VwJ1xuaW1wb3J0IFNoYWRlckF0dHJpYlZhcmlhYmxlIGZyb20gJy4vc2hhZGVyX2F0dHJpYl92YXJpYWJsZSdcbmltcG9ydCBTaGFkZXJBdHRyaWJWYWx1ZSBmcm9tICcuL3NoYWRlcl9hdHRyaWJfdmFsdWUnXG5pbXBvcnQgU2hhZGVyVmFyaWFibGVBbGlhcyBmcm9tICcuL3NoYWRlcl92YXJpYWJsZV9hbGlhcydcblxuLyoqXG4gKiBHcm91cCBvZiBzaGFkZXIgdmFyaWFibGVzIHdoaWNoIGFyZSByZWZlcmVuY2luZyBvbmUgc2luZ2xlIGJ1ZmZlci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhZGVyVmFyaWFibGVCdWZmZXJHcm91cCBleHRlbmRzIFNoYWRlclZhcmlhYmxlR3JvdXAge1xuICAvKipcbiAgICogQHBhcmFtIHtWT1Bvb2x9IGJ1ZmZlclNvdXJjZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGJ1ZmZlclNvdXJjZSkge1xuICAgIHN1cGVyKFtdKVxuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBidWZmZXJTb3VyY2UuZGVzY3JpcHRvclxuICAgIGxldCBmaXJzdFZhclxuICAgIE9iamVjdC5rZXlzKGRlc2NyaXB0b3IuYXR0cikuZm9yRWFjaChhdHRyTmFtZSA9PiB7XG4gICAgICBpZiAoIWZpcnN0VmFyKSB7XG4gICAgICAgIGZpcnN0VmFyID0gbmV3IFNoYWRlckF0dHJpYlZhcmlhYmxlKFxuICAgICAgICAgIGF0dHJOYW1lLFxuICAgICAgICAgIG5ldyBTaGFkZXJBdHRyaWJWYWx1ZShcbiAgICAgICAgICAgIGF0dHJOYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRvcixcbiAgICAgICAgICAgIGJ1ZmZlclNvdXJjZVxuICAgICAgICAgICkpXG4gICAgICAgIHRoaXMuc2hhZGVyVmFycy5wdXNoKGZpcnN0VmFyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaGFkZXJWYXJzLnB1c2gobmV3IFNoYWRlclZhcmlhYmxlQWxpYXMoYXR0ck5hbWUsIGZpcnN0VmFyKSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0IGJ1ZmZlclNvdXJjZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZGVyVmFyc1swXS52YWx1ZS5idWZmZXJTb3VyY2VcbiAgfVxuXG4gIGdldCBzZXJpYWwgKCkge1xuICAgIHJldHVybiB0aGlzLnNoYWRlclZhcnNbMF0uc2VyaWFsXG4gIH1cblxuICB0b3VjaCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hhZGVyVmFyc1swXS50b3VjaCgpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3NoYWRlcl92YXJpYWJsZV9idWZmZXJfZ3JvdXAuanMiLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qc1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVmaW5lUHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJ1xuaW1wb3J0IFRleHR1cmVBdGxhcyBmcm9tICcuL3RleHR1cmVfYXRsYXMnXG5pbXBvcnQgUG93ZXJPZjJJbWFnZSBmcm9tICcuL3Bvd2VyX29mXzJfaW1hZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHR1cmVBdGxhc1NwZWMge1xuICBjb25zdHJ1Y3RvciAoanNvbkRlZikge1xuICAgIHRoaXMuanNvbkRlZiA9IGpzb25EZWZcbiAgICB0aGlzLmZyYW1lTmFtZXMgPSBPYmplY3Qua2V5cyhqc29uRGVmLmZyYW1lcylcbiAgfVxuXG4gIGdldCBmcmFtZXMgKCkge1xuICAgIHJldHVybiB0aGlzLmpzb25EZWYuZnJhbWVzXG4gIH1cblxuICBnZXQgbWV0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuanNvbkRlZi5tZXRhXG4gIH1cblxuICBnZXQgaW1hZ2VVcmwgKCkge1xuICAgIHJldHVybiB0aGlzLm1ldGEuaW1hZ2VcbiAgfVxuXG4gIGNyZWF0ZVRleHR1cmVBdGxhcyAoaW1hZ2UgPSBudWxsLCB0ZXh0dXJlSGludHMgPSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgUHJvbWlzZS5yZXNvbHZlKGltYWdlKVxuICAgICAgLnRoZW4oaW1hZ2UgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGltYWdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpbWFnZSh0aGlzKSkudGhlbihpbWcgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHJldHVybiAobmV3IFBvd2VyT2YySW1hZ2UoaW1nKSkuY29tcGxldGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbWdcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gKG5ldyBQb3dlck9mMkltYWdlKGltYWdlKSkuY29tcGxldGVcbiAgICAgICAgfSBlbHNlIGlmIChpbWFnZSkge1xuICAgICAgICAgIHJldHVybiBpbWFnZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGV4dHVyZUF0bGFzU3BlYy5jcmVhdGVUZXh0dXJlQXRsYXMoKTogbm8gaW1hZ2UgZm91bmQhJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKGltYWdlID0+IHtcbiAgICAgICAgY29uc3Qgcm9vdFRleHR1cmUgPSBuZXcgVGV4dHVyZShpbWFnZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIDAsIDAsIHRleHR1cmVIaW50cylcbiAgICAgICAgY29uc3QgYXRsYXMgPSBuZXcgVGV4dHVyZUF0bGFzKHJvb3RUZXh0dXJlLCB0aGlzKVxuICAgICAgICBmb3IgKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMuZnJhbWVzKSkge1xuICAgICAgICAgIGNvbnN0IHsgZnJhbWUgfSA9IHRoaXMuZnJhbWVzW25hbWVdXG4gICAgICAgICAgYXRsYXMuYWRkRnJhbWUobmFtZSwgZnJhbWUudywgZnJhbWUuaCwgZnJhbWUueCwgZnJhbWUueSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXRsYXNcbiAgICAgIH0pXG4gICAgKVxuICB9XG5cbiAgc3RhdGljIGxvYWQgKHVybCwgb3B0aW9ucykge1xuICAgIHJldHVybiB3aW5kb3cuZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSkudGhlbihqc29uID0+IG5ldyBUZXh0dXJlQXRsYXNTcGVjKGpzb24pKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS90ZXh0dXJlX2F0bGFzX3NwZWMuanMiLCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhbXBsZSAoYXJyKSB7XG4gIHJldHVybiBhcnJbKE1hdGgucmFuZG9tKCkgKiBhcnIubGVuZ3RoKSB8IDBdXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvdXRpbHMvc2FtcGxlLmpzIiwiaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJ1xuaW1wb3J0IFRleHR1cmVTdGF0ZSBmcm9tICcuL3RleHR1cmVfc3RhdGUnXG5pbXBvcnQgVGV4dHVyZUF0bGFzIGZyb20gJy4vdGV4dHVyZV9hdGxhcydcbmltcG9ydCBTaGFkZXJUZXh0dXJlMmRWYXJpYWJsZSBmcm9tICcuL3NoYWRlcl90ZXh0dXJlXzJkX3ZhcmlhYmxlJ1xuaW1wb3J0IGRlc3Ryb3kgZnJvbSAnLi4vdXRpbHMvZGVzdHJveSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZUxpYnJhcnkge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5zdGF0ZXMgPSBuZXcgTWFwKClcbiAgICB0aGlzLnNoYWRlclZhcnMgPSBuZXcgTWFwKClcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuc3RhdGVzLmNsZWFyKClcbiAgICB0aGlzLnNoYWRlclZhcnMuY2xlYXIoKVxuICAgIGRlc3Ryb3kodGhpcylcbiAgfVxuXG4gIGxvYWRUZXh0dXJlIChpZCwgdXJsID0gaWQsIHRleHR1cmVIaW50cyA9IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHN0YXRlID0gbmV3IFRleHR1cmVTdGF0ZShUZXh0dXJlLmxvYWQodXJsLCB0ZXh0dXJlSGludHMpKVxuICAgIHRoaXMuc3RhdGVzLnNldChpZCwgc3RhdGUpXG4gICAgcmV0dXJuIHN0YXRlLnByb21pc2VcbiAgfVxuXG4gIGxvYWRUZXh0dXJlQXRsYXMgKGlkLCB1cmwgPSBpZCwgdGV4dHVyZUhpbnRzID0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgYXRsYXMgPSBUZXh0dXJlQXRsYXMubG9hZCh1cmwsIG51bGwsIG51bGwsIHRleHR1cmVIaW50cylcbiAgICBjb25zdCBzdGF0ZSA9IG5ldyBUZXh0dXJlU3RhdGUoYXRsYXMudGhlbigoYXRsYXMpID0+IHtcbiAgICAgIHN0YXRlLmF0bGFzID0gYXRsYXNcbiAgICAgIHJldHVybiBhdGxhcy5yb290VGV4dHVyZVxuICAgIH0pKVxuICAgIHRoaXMuc3RhdGVzLnNldChpZCwgc3RhdGUpXG4gICAgcmV0dXJuIGF0bGFzXG4gIH1cblxuICBnZXRUZXh0dXJlQXRsYXMgKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVzLmdldChpZCkuYXRsYXNcbiAgfVxuXG4gIHdoZW5Mb2FkZWQgKHRleHR1cmVJZCwgc2hhZGVyVmFyS2V5LCBvbkxvYWRlZCkge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZXMuZ2V0KHRleHR1cmVJZClcbiAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCB8fCAhc3RhdGUuaXNSZWFkeSkgcmV0dXJuXG5cbiAgICBsZXQgc2hhZGVyVmFyID0gdGhpcy5zaGFkZXJWYXJzLmdldChzaGFkZXJWYXJLZXkpXG4gICAgaWYgKHNoYWRlclZhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzaGFkZXJWYXIgPSBuZXcgU2hhZGVyVGV4dHVyZTJkVmFyaWFibGUoc2hhZGVyVmFyS2V5KVxuICAgICAgdGhpcy5zaGFkZXJWYXJzLnNldChzaGFkZXJWYXJLZXksIHNoYWRlclZhcilcbiAgICB9XG5cbiAgICBzaGFkZXJWYXIudGV4dHVyZSA9IHN0YXRlLnRleHR1cmVcbiAgICBvbkxvYWRlZChzaGFkZXJWYXIpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3RleHR1cmVfbGlicmFyeS5qcyIsIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZVN0YXRlIHtcbiAgY29uc3RydWN0b3IgKHRleHR1cmUsIGF0bGFzKSB7XG4gICAgdGhpcy50ZXh0dXJlID0gbnVsbFxuICAgIHRoaXMuYXRsYXMgPSBudWxsXG4gICAgdGhpcy5wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHRleHR1cmUpXG4gICAgICAudGhlbih0ZXggPT4ge1xuICAgICAgICB0aGlzLnRleHR1cmUgPSB0ZXhcbiAgICAgICAgcmV0dXJuIHRleFxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdUZXh0dXJlU3RhdGUgZXJyb3I6JywgZXJyKVxuICAgICAgfSlcbiAgICBQcm9taXNlLnJlc29sdmUoYXRsYXMpLnRoZW4oKGF0bGFzKSA9PiB7XG4gICAgICB0aGlzLmF0bGFzID0gYXRsYXNcbiAgICB9KVxuICB9XG5cbiAgZ2V0IGlzUmVhZHkgKCkge1xuICAgIHJldHVybiB0aGlzLnRleHR1cmUgIT0gbnVsbFxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS90ZXh0dXJlX3N0YXRlLmpzIiwiXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRSZWdpc3RyeSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gbmV3IE1hcCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBjb21wb25lbnQgbmFtZVxuICAgKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50RmFjdG9yeSAtIHRoZSBjb21wb25lbnQgZmFjdG9yeSBpbnRlcmZhY2VcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcG9uZW50RmFjdG9yeS5jcmVhdGUgLSBjcmVhdGUgYSBuZXcgY29tcG9uZW50IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBvbmVudEZhY3RvcnkudXBkYXRlIC0gdXBkYXRlIGEgY29tcG9uZW50XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBvbmVudEZhY3RvcnkuZGVzdHJveSAtIHJlbW92ZSBhIGNvbXBvbmVudFxuICAgKi9cbiAgcmVnaXN0ZXJDb21wb25lbnQgKG5hbWUsIGNvbXBvbmVudEZhY3RvcnkpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5LnNldChuYW1lLCBjb21wb25lbnRGYWN0b3J5KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBjcmVhdGVDb21wb25lbnQgKGVudGl0eSwgbmFtZSwgZGF0YSkge1xuICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlZ2lzdHJ5LmdldChuYW1lKVxuICAgIGlmICghZmFjdG9yeSkgcmV0dXJuIHRoaXNcbiAgICBjb25zdCBjb21wb25lbnQgPSBmYWN0b3J5LmNyZWF0ZShlbnRpdHksIGRhdGEpXG4gICAgZW50aXR5LnNldENvbXBvbmVudChuYW1lLCBjb21wb25lbnQsIHRoaXMpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHVwZGF0ZUNvbXBvbmVudCAoZW50aXR5LCBuYW1lLCBkYXRhKSB7XG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMucmVnaXN0cnkuZ2V0KG5hbWUpXG4gICAgaWYgKCFmYWN0b3J5KSByZXR1cm4gdGhpc1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGVudGl0eVtuYW1lXVxuICAgIGZhY3RvcnkudXBkYXRlKGNvbXBvbmVudCwgZGF0YSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgY3JlYXRlT3JVcGRhdGVDb21wb25lbnQgKGVudGl0eSwgbmFtZSwgZGF0YSkge1xuICAgIGlmIChlbnRpdHkuZ2V0Q29tcG9uZW50UmVnaXN0cnkobmFtZSkgPT09IHRoaXMpIHtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KGVudGl0eSwgbmFtZSwgZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoZW50aXR5LCBuYW1lLCBkYXRhKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZGVzdHJveUNvbXBvbmVudCAoZW50aXR5LCBuYW1lKSB7XG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMucmVnaXN0cnkuZ2V0KG5hbWUpXG4gICAgaWYgKCFmYWN0b3J5KSByZXR1cm4gdGhpc1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGVudGl0eVtuYW1lXVxuICAgIGZhY3RvcnkuZGVzdHJveShjb21wb25lbnQpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2Vjcy9jb21wb25lbnRfcmVnaXN0cnkuanMiLCJpbXBvcnQgQ29tcG9uZW50RmFjdG9yeSBmcm9tICcuLi9lY3MvY29tcG9uZW50X2ZhY3RvcnknXG5cbmltcG9ydCBDbGVhckNvbG9yQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9DbGVhckNvbG9yQ29tcG9uZW50J1xuaW1wb3J0IENsZWFyQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9DbGVhckNvbXBvbmVudCdcbi8vIGltcG9ydCBQcm9qZWN0aW9uQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9Qcm9qZWN0aW9uQ29tcG9uZW50J1xuLy8gaW1wb3J0IENoaWxkcmVuQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50cy9DaGlsZHJlbkNvbXBvbmVudCdcbi8vIGltcG9ydCBCbGVuZE1vZGVDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL0JsZW5kTW9kZUNvbXBvbmVudCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHJlZ2lzdHJ5KSB7XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyQ29tcG9uZW50KCdjbGVhci1jb2xvcicsXG4gICAgQ29tcG9uZW50RmFjdG9yeS5jcmVhdGVDb21wb25lbnQoQ2xlYXJDb2xvckNvbXBvbmVudCkpXG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyQ29tcG9uZW50KCdjbGVhcicsXG4gICAgQ29tcG9uZW50RmFjdG9yeS5jcmVhdGVDc3NTdHlsZWRQcm9wc0NvbXBvbmVudChDbGVhckNvbXBvbmVudCkpXG4gIC8vIHJlZ2lzdHJ5LnJlZ2lzdGVyQ29tcG9uZW50KCdwcm9qZWN0aW9uJywgY3JlYXRlRmFjdG9yeShQcm9qZWN0aW9uQ29tcG9uZW50KSlcbiAgLy8gcmVnaXN0cnkucmVnaXN0ZXJDb21wb25lbnQoJ2NoaWxkcmVuJywgY3JlYXRlRmFjdG9yeShDaGlsZHJlbkNvbXBvbmVudCkpXG4gIC8vIHJlZ2lzdHJ5LnJlZ2lzdGVyQ29tcG9uZW50KCdibGVuZC1tb2RlJywgY3JlYXRlRmFjdG9yeShCbGVuZE1vZGVDb21wb25lbnQpKVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2RvbS9yZWdpc3RlckNvcmVDb21wb25lbnRzLmpzIiwiaW1wb3J0IHsgcGFyc2VDc3NTdHlsZWRQcm9wZXJ0aWVzIH0gZnJvbSAnYmxpdHB1bmsvdXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudEZhY3Rvcnkge1xuICBzdGF0aWMgY3JlYXRlQ3NzU3R5bGVkUHJvcHNDb21wb25lbnQgKENvbXBvbmVudENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZSAoZW50aXR5LCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcG9uZW50Q29uc3RydWN0b3IoZW50aXR5LCBwYXJzZUNzc1N0eWxlZFByb3BlcnRpZXMoZGF0YSkpXG4gICAgICB9LFxuICAgICAgdXBkYXRlIChjb21wb25lbnQsIGRhdGEpIHtcbiAgICAgICAgY29tcG9uZW50LnVwZGF0ZShwYXJzZUNzc1N0eWxlZFByb3BlcnRpZXMoZGF0YSkpXG4gICAgICB9LFxuICAgICAgZGVzdHJveSAoLyogY29tcG9uZW50ICovKSB7IC8qIG5vdGhpbmcgdG8gZG8gaGVyZSAqLyB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUNvbXBvbmVudCAoQ29tcG9uZW50Q29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlIChlbnRpdHksIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRDb25zdHJ1Y3RvcihlbnRpdHksIGRhdGEpXG4gICAgICB9LFxuICAgICAgdXBkYXRlIChjb21wb25lbnQsIGRhdGEpIHtcbiAgICAgICAgY29tcG9uZW50LnVwZGF0ZShkYXRhKVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3kgKC8qIGNvbXBvbmVudCAqLykgeyAvKiBub3RoaW5nIHRvIGRvIGhlcmUgKi8gfVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2Vjcy9jb21wb25lbnRfZmFjdG9yeS5qcyIsIlxuZXhwb3J0IGRlZmF1bHQgKGFyciwgaXRlbSkgPT4ge1xuICBjb25zdCBpZHggPSBhcnIuaW5kZXhPZihpdGVtKVxuICBpZiAoaWR4ID4gLTEpIHtcbiAgICBhcnIuc3BsaWNlKGlkeCwgMSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3V0aWxzL3JlbW92ZUl0ZW0uanMiLCJpbXBvcnQgRW50aXR5IGZyb20gJy4vZW50aXR5J1xuaW1wb3J0IGRlc3Ryb3kgZnJvbSAnYmxpdHB1bmsvdXRpbHMvZGVzdHJveSdcblxuLyoqXG4gKiBUaGUgZW50aXR5IG1hbmFnZXIgaG9sZHMgcmVmZXJlbmNlcyB0byBhbGwgZW50aXRpZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudGl0eU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5lbnRpdGllcyA9IG5ldyBNYXAoKVxuICB9XG5cbiAgY3JlYXRlRW50aXR5ICgpIHtcbiAgICBjb25zdCBlbnRpdHkgPSBuZXcgRW50aXR5KClcbiAgICB0aGlzLmVudGl0aWVzLnNldChlbnRpdHkuaWQsIGVudGl0eSlcbiAgICByZXR1cm4gZW50aXR5XG4gIH1cblxuICBnZXRFbnRpdHkgKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50aXRpZXMuZ2V0KGlkKVxuICB9XG5cbiAgZGVzdHJveUVudGl0eSAoaWQpIHtcbiAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmVudGl0aWVzLmdldChpZClcbiAgICBpZiAoZW50aXR5KSB7XG4gICAgICBlbnRpdHkuZGVzdHJveSgpXG4gICAgICB0aGlzLmVudGl0aWVzLmRlbGV0ZShpZClcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZGVzdHJveUFsbEVudGl0aWVzICgpIHtcbiAgICBmb3IgKGNvbnN0IGlkIG9mIHRoaXMuZW50aXRpZXMua2V5cygpKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lFbnRpdHkoaWQpXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5kZXN0cm95QWxsRW50aXRpZXMoKVxuICAgIHRoaXMuZW50aXRpZXMuY2xlYXIoKVxuICAgIGRlc3Ryb3kodGhpcylcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2Vjcy9lbnRpdHlfbWFuYWdlci5qcyIsImltcG9ydCBnZW5lcmF0ZVVVSUQgZnJvbSAnLi4vdXRpbHMvZ2VuZXJhdGVfdXVpZCdcblxuY29uc3QgZXZlbnRpemUgPSByZXF1aXJlKCdAc3BlYXJ3b2xmL2V2ZW50aXplJylcblxuY29uc3QgZGVzdHJveUFsbENvbXBvbmVudHMgPSAoZW50aXR5KSA9PiB7XG4gIGZvciAoY29uc3QgbmFtZSBvZiBlbnRpdHkucmVnaXN0cmllcy5rZXlzKCkpIHtcbiAgICBlbnRpdHkuZGVzdHJveUNvbXBvbmVudChuYW1lKVxuICB9XG59XG5cbi8qKlxuICogQW4gRW50aXR5LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRpdHkge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5yZWdpc3RyaWVzID0gbmV3IE1hcCgpXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBnZW5lcmF0ZVVVSUQoKVxuXG4gICAgZXZlbnRpemUodGhpcylcbiAgfVxuXG4gIGhhc0NvbXBvbmVudCAobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJpZXMuaGFzKG5hbWUpXG4gIH1cblxuICBnZXRDb21wb25lbnRSZWdpc3RyeSAobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJpZXMuZ2V0KG5hbWUpXG4gIH1cblxuICBzZXRDb21wb25lbnQgKG5hbWUsIGNvbXBvbmVudCwgcmVnaXN0cnkpIHtcbiAgICBpZiAodGhpc1tuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgbmFtZSBcIiR7bmFtZX1cIiBpcyBhbHJlYWR5IGFzc2lnbmVkIWApXG4gICAgfVxuICAgIHRoaXMucmVnaXN0cmllcy5zZXQobmFtZSwgcmVnaXN0cnkpXG4gICAgdGhpc1tuYW1lXSA9IGNvbXBvbmVudFxuICAgIGlmIChjb21wb25lbnQuY29ubmVjdGVkRW50aXR5KSB7XG4gICAgICBjb21wb25lbnQuY29ubmVjdGVkRW50aXR5KHRoaXMpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBxdWVyeUNvbXBvbmVudCAobmFtZSwgZmlsdGVyQ2FsbGJhY2spIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzW25hbWVdXG4gICAgaWYgKGNvbXBvbmVudCAmJiBmaWx0ZXJDYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZpbHRlckNhbGxiYWNrKGNvbXBvbmVudClcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudFxuICB9XG5cbiAgZGVzdHJveUNvbXBvbmVudCAobmFtZSkge1xuICAgIGlmICh0aGlzLnJlZ2lzdHJpZXMuaGFzKG5hbWUpKSB7XG4gICAgICBjb25zdCByZWdpc3RyeSA9IHRoaXMucmVnaXN0cmllcy5nZXQobmFtZSlcbiAgICAgIHRoaXMucmVnaXN0cmllcy5kZWxldGUobmFtZSlcblxuICAgICAgaWYgKHJlZ2lzdHJ5KSB7XG4gICAgICAgIHJlZ2lzdHJ5LmRlc3Ryb3lDb21wb25lbnQodGhpcywgbmFtZSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpc1tuYW1lXVxuICAgICAgZGVsZXRlIHRoaXNbbmFtZV1cbiAgICAgIGlmIChjb21wb25lbnQuZGlzY29ubmVjdGVkRW50aXR5KSB7XG4gICAgICAgIGNvbXBvbmVudC5kaXNjb25uZWN0ZWRFbnRpdHkodGhpcylcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuZW1pdCgnZGVzdHJveScsIHRoaXMpXG4gICAgZGVzdHJveUFsbENvbXBvbmVudHModGhpcylcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2Vjcy9lbnRpdHkuanMiLCJpbXBvcnQgUmVzb3VyY2VMaWJyYXJ5IGZyb20gJy4vY29yZS9yZXNvdXJjZV9saWJyYXJ5J1xuaW1wb3J0IGFkZENvcmVSZXNvdXJjZXMgZnJvbSAnLi9jb3JlL3Jlc291cmNlcydcblxuY29uc3QgcmVzb3VyY2VMaWJyYXJ5ID0gbmV3IFJlc291cmNlTGlicmFyeSgpXG5hZGRDb3JlUmVzb3VyY2VzKHJlc291cmNlTGlicmFyeSlcblxuZXhwb3J0IGRlZmF1bHQgcmVzb3VyY2VMaWJyYXJ5XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvcmVzb3VyY2VMaWJyYXJ5LmpzIiwiaW1wb3J0IFRleHR1cmVMaWJyYXJ5IGZyb20gJy4vY29yZS90ZXh0dXJlX2xpYnJhcnknXG5cbmNvbnN0IHRleHR1cmVMaWJyYXJ5ID0gbmV3IFRleHR1cmVMaWJyYXJ5KClcblxuZXhwb3J0IGRlZmF1bHQgdGV4dHVyZUxpYnJhcnlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay90ZXh0dXJlTGlicmFyeS5qcyIsIi8qIGdsb2JhbCBIVE1MRWxlbWVudCAqL1xuaW1wb3J0IGNvbXBvbmVudFJlZ2lzdHJ5IGZyb20gJ2JsaXRwdW5rL2NvbXBvbmVudFJlZ2lzdHJ5J1xuaW1wb3J0IGVudGl0eU1hbmFnZXIgZnJvbSAnYmxpdHB1bmsvZW50aXR5TWFuYWdlcidcbmltcG9ydCByZW1vdmVJdGVtIGZyb20gJ2JsaXRwdW5rL3V0aWxzL3JlbW92ZUl0ZW0nXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudGl0eUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIC8qKiBAaWdub3JlICovXG4gIGNvbnN0cnVjdG9yIChfKSB7XG4gICAgY29uc3Qgc2VsZiA9IHN1cGVyKF8pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzZWxmLCB7XG4gICAgICBhdHRyaWJ1dGVWYWx1ZXNDYWNoZTogeyB2YWx1ZTogbmV3IE1hcCgpIH0sXG4gICAgICBhdHRyaWJ1dGVOYW1lc0NhY2hlOiB7IHZhbHVlOiBbXSB9LFxuICAgICAgX2NvbXBvbmVudFJlZ2lzdHJ5OiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgX2VudGl0eU1hbmFnZXI6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBfZW50aXR5OiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9XG4gICAgfSlcblxuICAgIGNvbnNvbGUubG9nKCdbRW50aXR5RWxlbWVudF0gY29uc3RydWN0b3IsIHNlbGY9Jywgc2VsZilcblxuICAgIHJldHVybiBzZWxmXG4gIH1cblxuICBnZXQgY29tcG9uZW50UmVnaXN0cnkgKCkge1xuICAgIHJldHVybiB0aGlzLl9jb21wb25lbnRSZWdpc3RyeSB8fCBjb21wb25lbnRSZWdpc3RyeVxuICB9XG5cbiAgc2V0IGNvbXBvbmVudFJlZ2lzdHJ5IChyZWdpc3RyeSkge1xuICAgIHRoaXMuX2NvbXBvbmVudFJlZ2lzdHJ5ID0gcmVnaXN0cnlcbiAgfVxuXG4gIGdldCBlbnRpdHlNYW5hZ2VyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZW50aXR5TWFuYWdlciB8fCBlbnRpdHlNYW5hZ2VyXG4gIH1cblxuICBzZXQgZW50aXR5TWFuYWdlciAobWFuYWdlcikge1xuICAgIHRoaXMuX2VudGl0eU1hbmFnZXIgPSBtYW5hZ2VyXG4gIH1cblxuICBnZXQgZW50aXR5ICgpIHtcbiAgICBjb25zdCBlbnRpdHkgPSB0aGlzLl9lbnRpdHlcbiAgICBpZiAoZW50aXR5KSB7XG4gICAgICByZXR1cm4gZW50aXR5XG4gICAgfVxuICAgIHRoaXMuX2VudGl0eSA9IHRoaXMuZW50aXR5TWFuYWdlci5jcmVhdGVFbnRpdHkoKVxuICAgIHJldHVybiB0aGlzLl9lbnRpdHlcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICB1cGRhdGVFbnRpdHkgKCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWVzID0gdGhpcy5nZXRBdHRyaWJ1dGVOYW1lcygpXG4gICAgY29uc3QgcHJldkF0dHJOYW1lcyA9IHRoaXMuYXR0cmlidXRlTmFtZXNDYWNoZS5zbGljZSgwKVxuICAgIHRoaXMuYXR0cmlidXRlTmFtZXNDYWNoZS5sZW5ndGggPSAwXG4gICAgYXR0cmlidXRlTmFtZXMuZm9yRWFjaChhdHRyTmFtZSA9PiB7XG4gICAgICByZW1vdmVJdGVtKHByZXZBdHRyTmFtZXMsIGF0dHJOYW1lKVxuICAgICAgdGhpcy5hdHRyaWJ1dGVOYW1lc0NhY2hlLnB1c2goYXR0ck5hbWUpXG4gICAgICBjb25zdCB7IGF0dHJpYnV0ZVZhbHVlc0NhY2hlIH0gPSB0aGlzXG4gICAgICBjb25zdCBvbGRWYWx1ZSA9IGF0dHJpYnV0ZVZhbHVlc0NhY2hlLmdldChhdHRyTmFtZSlcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpXG4gICAgICBpZiAob2xkVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIGF0dHJpYnV0ZVZhbHVlc0NhY2hlLnNldChhdHRyTmFtZSwgdmFsdWUpXG4gICAgICAgIGNvbnNvbGUubG9nKCdbRW50aXR5RWxlbWVudF0gYXR0cmlidXRlVmFsdWVDaGFuZ2VkOicsIGF0dHJOYW1lLCAndmFsdWU9JywgdmFsdWUsICdvbGRWYWx1ZT0nLCBvbGRWYWx1ZSlcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWdpc3RyeS5jcmVhdGVPclVwZGF0ZUNvbXBvbmVudCh0aGlzLmVudGl0eSwgYXR0ck5hbWUsIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gICAgcHJldkF0dHJOYW1lcy5mb3JFYWNoKGF0dHJOYW1lID0+IHtcbiAgICAgIHRoaXMuZW50aXR5LmRlc3Ryb3lDb21wb25lbnQoYXR0ck5hbWUpXG4gICAgICB0aGlzLmF0dHJpYnV0ZVZhbHVlc0NhY2hlLmRlbGV0ZShhdHRyTmFtZSlcbiAgICAgIGNvbnNvbGUubG9nKCdbRW50aXR5RWxlbWVudF0gYXR0cmlidXRlUmVtb3ZlZDonLCBhdHRyTmFtZSlcbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyRnJhbWUgKGNhbnZhc0VsLCB3ZWJHbFJlbmRlcmVyLCBwYXJlbnRFbCkge1xuICAgIHRoaXMudXBkYXRlRW50aXR5KClcblxuICAgIHRoaXMuZW50aXR5LmVtaXQoJ3JlbmRlckZyYW1lJywgd2ViR2xSZW5kZXJlcilcblxuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGlsZEVsID0gY2hpbGRyZW5baV1cbiAgICAgIGlmIChjaGlsZEVsLnJlbmRlckZyYW1lKSB7XG4gICAgICAgIGNoaWxkRWwucmVuZGVyRnJhbWUoY2FudmFzRWwsIHdlYkdsUmVuZGVyZXIsIHRoaXMpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGNvbm5lY3RlZENhbGxiYWNrICgpIHtcbiAgICBjb25zb2xlLmxvZygnW0VudGl0eUVsZW1lbnRdIGNvbm5lY3RlZENhbGxiYWNrKCknKVxuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrICgpIHtcbiAgICBjb25zb2xlLmxvZygnW0VudGl0eUVsZW1lbnRdIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCknKVxuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIC8vIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzICgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnW0VudGl0eUVsZW1lbnRdIG9ic2VydmVkQXR0cmlidXRlcygpIGdldHRlciBjYWxsZWQnKVxuICAgIC8vIHJldHVybiBbIF1cbiAgLy8gfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICAvLyBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgKGF0dHIsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdbRW50aXR5RWxlbWVudF0gYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKCcsIGF0dHIsICcsJywgb2xkVmFsdWUsICcsJywgbmV3VmFsdWUsICcpJylcbiAgLy8gfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2RvbS9lbGVtZW50cy9FbnRpdHlFbGVtZW50LmpzIiwiaW1wb3J0IGluaXRpYWxpemUgZnJvbSAnLi9pbml0aWFsaXplJ1xuXG5leHBvcnQgZGVmYXVsdCBpbml0aWFsaXplXG5leHBvcnQgKiBmcm9tICcuL2FwaSdcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9pbmRleC5qcyIsImltcG9ydCBXZWJHbENvbnRleHQgZnJvbSAnLi4vcmVuZGVyL3dlYl9nbF9jb250ZXh0J1xuaW1wb3J0IFdlYkdsUmVuZGVyZXIgZnJvbSAnLi4vcmVuZGVyL3dlYl9nbF9yZW5kZXJlcidcblxuaW1wb3J0IGNvbXBvbmVudFJlZ2lzdHJ5IGZyb20gJy4uL2NvbXBvbmVudFJlZ2lzdHJ5J1xuaW1wb3J0IGVudGl0eU1hbmFnZXIgZnJvbSAnLi4vZW50aXR5TWFuYWdlcidcbmltcG9ydCByZXNvdXJjZUxpYnJhcnkgZnJvbSAnLi4vcmVzb3VyY2VMaWJyYXJ5J1xuaW1wb3J0IHRleHR1cmVMaWJyYXJ5IGZyb20gJy4uL3RleHR1cmVMaWJyYXJ5J1xuXG5pbXBvcnQgcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyBmcm9tICcuLi9kb20vcmVnaXN0ZXJDb3JlQ29tcG9uZW50cydcbmltcG9ydCBkZXN0cm95IGZyb20gJy4uL3V0aWxzL2Rlc3Ryb3knXG5pbXBvcnQgeyBlcnJvciB9IGZyb20gJy4uLy4uL2NvbW1vbi9sb2cnXG5cbmNvbnN0IGV2ZW50aXplID0gcmVxdWlyZSgnQHNwZWFyd29sZi9ldmVudGl6ZScpXG5jb25zdCB0aW55Y29sb3IgPSByZXF1aXJlKCd0aW55Y29sb3IyJylcblxuY29uc3Qgbm93ID0gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIC8gMTAwMFxuXG5jb25zdCBkZWZhdWx0T3B0aW9uID0gKG9wdGlvbnMsIGtleSwgZGVmYXVsdFZhbHVlRm4pID0+IHtcbiAgaWYgKG9wdGlvbnMgJiYga2V5IGluIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9uc1trZXldXG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBkZWZhdWx0VmFsdWVGbiA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRWYWx1ZUZuKCkgOiBkZWZhdWx0VmFsdWVGblxufVxuXG5jbGFzcyBBcHAge1xuICBjb25zdHJ1Y3RvciAob3B0aW9ucykge1xuICAgIGV2ZW50aXplKHRoaXMpXG5cbiAgICBjb25zdCBnZXRPcHRpb24gPSBkZWZhdWx0T3B0aW9uLmJpbmQobnVsbCwgb3B0aW9ucylcblxuICAgIHRoaXMuY29tcG9uZW50UmVnaXN0cnkgPSBjb21wb25lbnRSZWdpc3RyeVxuICAgIHRoaXMuZW50aXR5TWFuYWdlciA9IGVudGl0eU1hbmFnZXJcbiAgICB0aGlzLnJlc291cmNlTGlicmFyeSA9IHJlc291cmNlTGlicmFyeVxuICAgIHRoaXMudGV4dHVyZUxpYnJhcnkgPSB0ZXh0dXJlTGlicmFyeVxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge0NhbnZhc0hUTUxFbGVtZW50fVxuICAgICAqL1xuICAgIHRoaXMuY2FudmFzID0gZ2V0T3B0aW9uKCdjYW52YXMnLCAoKSA9PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSlcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbml0aWFsIGF0dHJpYnV0ZXMgdXNlZCB0byBjcmVhdGUgdGhlIHdlYmdsIGNvbnRleHRcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL0hUTUxDYW52YXNFbGVtZW50L2dldENvbnRleHRcbiAgICAgKi9cbiAgICB0aGlzLmNvbnRleHRBdHRyaWJ1dGVzID0ge1xuICAgICAgYWxwaGE6IGdldE9wdGlvbignYWxwaGEnLCBmYWxzZSksXG4gICAgICBkZXB0aDogZ2V0T3B0aW9uKCdkZXB0aCcsIGZhbHNlKSxcbiAgICAgIHN0ZW5jaWw6IGdldE9wdGlvbignc3RlbmNpbCcsIGZhbHNlKSxcbiAgICAgIGFudGlhbGlhczogZ2V0T3B0aW9uKCdhbnRpYWxpYXMnLCBmYWxzZSksXG4gICAgICBwcmVtdWx0aXBsaWVkQWxwaGE6IGdldE9wdGlvbigncHJlbXVsdGlwbGllZEFscGhhJywgZmFsc2UpLFxuICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBnZXRPcHRpb24oJ3ByZXNlcnZlRHJhd2luZ0J1ZmZlcicsIGZhbHNlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlY29uZHMgc2luY2UgQXBwIHN0YXJ0dXBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudGltZSA9IGdldE9wdGlvbigndGltZScsIDApXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSAwXG5cbiAgICAvKipcbiAgICAgKiBTZWNvbmRzIHNpbmNlIGxhc3QgZnJhbWVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudGltZUZyYW1lT2Zmc2V0ID0gMFxuXG4gICAgLyoqXG4gICAgICogRnJhbWUgY291bnRlciBzaW5jZSBhcHBsaWNhdGlvbiBzdGFydHVwXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmZyYW1lTm8gPSBnZXRPcHRpb24oJ2ZyYW1lTm8nLCAwKVxuXG4gICAgdGhpcy5jbGVhckNvbG9yID0gZ2V0T3B0aW9uKCdjbGVhckNvbG9yJylcblxuICAgIHRoaXMuY3JlYXRlR2xDb250ZXh0ID0gZ2V0T3B0aW9uKCdjcmVhdGVHbENvbnRleHQnLCAoKSA9PiAoKSA9PiBjcmVhdGVHbENvbnRleHQodGhpcy5jYW52YXMsIHRoaXMuY29udGV4dEF0dHJpYnV0ZXMpKVxuXG4gICAgLy8gVE9ETyBhZGQgZ2xvYmFsIGNvbXBvbmVudFJlZ2lzdHJ5ID9cbiAgICByZWdpc3RlckNvcmVDb21wb25lbnRzKHRoaXMuY29tcG9uZW50UmVnaXN0cnkpXG5cbiAgICB0aGlzLmVudGl0eSA9IHRoaXMuZW50aXR5TWFuYWdlci5jcmVhdGVFbnRpdHkoKVxuICAgIHRoaXMuZW50aXR5LnNldENvbXBvbmVudCgnYmxpdHB1bmsnLCB0aGlzKSAgLy8gd2h5P1xuICAgIHRoaXMuZW50aXR5LnNldENvbXBvbmVudCgncmVzb3VyY2VMaWJyYXJ5JywgdGhpcy5yZXNvdXJjZUxpYnJhcnkpICAvLyB3aHk/XG4gICAgdGhpcy5lbnRpdHkuc2V0Q29tcG9uZW50KCd0ZXh0dXJlTGlicmFyeScsIHRoaXMudGV4dHVyZUxpYnJhcnkpIC8vIHdoeT9cbiAgICB0aGlzLmNvbXBvbmVudFJlZ2lzdHJ5LmNyZWF0ZUNvbXBvbmVudCh0aGlzLmVudGl0eSwgJ2NoaWxkcmVuJykgLy8gd2h5P1xuXG4gICAgdGhpcy5lbCA9IG51bGxcblxuICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlXG4gICAgdGhpcy5zdG9wcGVkID0gZmFsc2VcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlXG4gIH1cblxuICBnZXQgY2xlYXJDb2xvciAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXIgPyB0aGlzLnJlbmRlcmVyLmNsZWFyQ29sb3IgOiB0aGlzLl9jbGVhckNvbG9yXG4gIH1cblxuICBzZXQgY2xlYXJDb2xvciAoY29sb3IpIHtcbiAgICB0aGlzLl9jbGVhckNvbG9yID0gY29sb3IgPT0gbnVsbCA/IGNvbG9yIDogdGlueWNvbG9yKGNvbG9yKVxuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldENsZWFyQ29sb3IodGhpcy5fY2xlYXJDb2xvcilcbiAgICB9XG4gIH1cblxuICBnZXQgY2FuU3RhcnQgKCkge1xuICAgIHJldHVybiAoIXRoaXMuc3RhcnRlZCB8fCAodGhpcy5zdGFydGVkICYmIHRoaXMuc3RvcHBlZCkpICYmICF0aGlzLmRlc3Ryb3llZFxuICB9XG5cbiAgc3RhcnQgKGVsID0gdGhpcykge1xuICAgIGlmICghdGhpcy5jYW5TdGFydCkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5zdG9wcGVkKSB7XG4gICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZVxuICAgICAgdGhpcy5yZXNpemUoKVxuICAgICAgdGhpcy5yZXF1ZXN0QW5pbWF0ZSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaXJzdC10aW1lIGluaXRpYWxpemF0aW9uIGZvbGxvd3Mgbm93IC4uXG5cbiAgICB0aGlzLmVsID0gZWxcbiAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7V2ViR2xDb250ZXh0fVxuICAgICAqL1xuICAgIHRoaXMuZ2x4ID0gbmV3IFdlYkdsQ29udGV4dCh0aGlzLmNyZWF0ZUdsQ29udGV4dCgpKVxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1dlYkdsUmVuZGVyZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBXZWJHbFJlbmRlcmVyKHRoaXMuZ2x4KVxuXG4gICAgaWYgKHRoaXMuX2NsZWFyQ29sb3IpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvcih0aGlzLl9jbGVhckNvbG9yKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0dXAgdGltZSBpbiBzZWNvbmRzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zdGFydFRpbWUgPSBub3coKVxuXG4gICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcylcbiAgICB0aGlzLnJlc2l6ZSgpXG4gICAgdGhpcy5yZXF1ZXN0QW5pbWF0ZSgpXG4gIH1cblxuICByZXF1ZXN0QW5pbWF0ZSAoKSB7XG4gICAgdGhpcy5yYWZTdWJzY3JpcHRpb24gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYW5pbWF0ZSgpKVxuICB9XG5cbiAgY2FuY2VsQW5pbWF0ZSAoKSB7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmFmU3Vic2NyaXB0aW9uKVxuICB9XG5cbiAgZ2V0IGNhblN0b3AgKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0ZWQgJiYgIXRoaXMuc3RvcHBlZCAmJiAhdGhpcy5kZXN0cm95ZWRcbiAgfVxuXG4gIHN0b3AgKCkge1xuICAgIGlmICghdGhpcy5jYW5TdG9wKSByZXR1cm5cbiAgICB0aGlzLnN0b3BwZWQgPSB0cnVlXG4gICAgdGhpcy5jYW5jZWxBbmltYXRlKClcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuXG4gICAgdGhpcy5jYW5jZWxBbmltYXRlKClcbiAgICB0cnkge1xuICAgICAgdGhpcy5nbHguZGVzdHJveSgpXG4gICAgfSBjYXRjaCAoZXJyMCkge1xuICAgICAgZXJyb3IoJ2JsaXRwdW5rLT5kZXN0cm95KFdlYkdsQ29udGV4dCkgcGFuaWMhJywgZXJyMClcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucmVuZGVyZXIuZGVzdHJveSgpXG4gICAgfSBjYXRjaCAoZXJyMSkge1xuICAgICAgZXJyb3IoJ2JsaXRwdW5rLT5kZXN0cm95KFdlYkdsUmVuZGVyZXIpIHBhbmljIScsIGVycjEpXG4gICAgfVxuICAgIC8vIHRyeSB7XG4gICAgICAvLyB0aGlzLnRleHR1cmVMaWJyYXJ5LmRlc3Ryb3koKVxuICAgIC8vIH0gY2F0Y2ggKGVycjIpIHtcbiAgICAgIC8vIGVycm9yKCdibGl0cHVuay0+ZGVzdHJveShUZXh0dXJlTGlicmFyeSkgcGFuaWMhJywgZXJyMilcbiAgICAvLyB9XG4gICAgLy8gdHJ5IHtcbiAgICAgIC8vIHRoaXMucmVzb3VyY2VMaWJyYXJ5LmRlc3Ryb3koKVxuICAgIC8vIH0gY2F0Y2ggKGVycjMpIHtcbiAgICAgIC8vIGVycm9yKCdibGl0cHVuay0+ZGVzdHJveShSZXNvdXJjZUxpYnJhcnkpIHBhbmljIScsIGVycjMpXG4gICAgLy8gfVxuICAgIC8vIHRyeSB7XG4gICAgICAvLyB0aGlzLmVudGl0eU1hbmFnZXIuZGVzdHJveSgpXG4gICAgLy8gfSBjYXRjaCAoZXJyNCkge1xuICAgICAgLy8gZXJyb3IoJ2JsaXRwdW5rLT5kZXN0cm95KEVudGl0eU1hbmFnZXIpIHBhbmljIScsIGVycjQpXG4gICAgLy8gfVxuICAgIC8vIHRoaXMuY29tcG9uZW50UmVnaXN0cnkgKENvbXBvbmVudFJlZ2lzdHJ5KVxuICAgIHRoaXMuZWwucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpXG4gICAgZGVzdHJveSh0aGlzKVxuICB9XG5cbiAgZ2V0IGNhbkFuaW1hdGUgKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0ZWQgJiYgIXRoaXMuc3RvcHBlZCAmJiAhdGhpcy5kZXN0cm95ZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCB0aGUgbWFpbiBhbmltYXRpb24gbG9vcC5cbiAgICovXG4gIGFuaW1hdGUgKCkge1xuICAgIGlmICghdGhpcy5jYW5BbmltYXRlKSByZXR1cm5cbiAgICB0aGlzLnJlbmRlckZyYW1lKClcbiAgICB0aGlzLnJlcXVlc3RBbmltYXRlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIGZyYW1lLlxuICAgKi9cbiAgcmVuZGVyRnJhbWUgKCkge1xuICAgICsrdGhpcy5mcmFtZU5vXG4gICAgdGhpcy50aW1lID0gbm93KCkgLSB0aGlzLnN0YXJ0VGltZVxuICAgIGlmICh0aGlzLmxhc3RGcmFtZVRpbWUpIHtcbiAgICAgIHRoaXMudGltZUZyYW1lT2Zmc2V0ID0gdGhpcy50aW1lIC0gdGhpcy5sYXN0RnJhbWVUaW1lXG4gICAgfVxuICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IHRoaXMudGltZVxuICAgIHRoaXMucmVzaXplKClcbiAgICB0aGlzLnJlbmRlcmVyLnJlbmRlckZyYW1lKHRoaXMuZW50aXR5LCB0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSB0aGUgY2FudmFzIGRvbSBlbGVtZW50IHRvIHRoZSBzYW1lIHNpemUgYXMgdGhlIGA8YmxpdHB1bmstY2FudmFzPi5wYXJlbnROb2RlYFxuICAgKi9cbiAgcmVzaXplICgpIHtcbiAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWwsIG51bGwpXG4gICAgY29uc3QgZWwgPSBzdHlsZS5kaXNwbGF5ID09PSAnaW5saW5lJyA/IHRoaXMuZWwucGFyZW50Tm9kZSA6IHRoaXMuZWxcblxuICAgIGNvbnN0IHsgY2FudmFzIH0gPSB0aGlzXG4gICAgY29uc3QgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMVxuXG4gICAgbGV0IHdQeCA9IGVsLmNsaWVudFdpZHRoXG4gICAgbGV0IGhQeCA9IGVsLmNsaWVudEhlaWdodFxuXG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gd1B4ICsgJ3B4J1xuICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoUHggKyAncHgnXG5cbiAgICBjb25zdCB3ID0gTWF0aC5yb3VuZCh3UHggKiBkcHIpXG4gICAgY29uc3QgaCA9IE1hdGgucm91bmQoaFB4ICogZHByKVxuXG4gICAgaWYgKHcgIT09IGNhbnZhcy53aWR0aCB8fCBoICE9PSBjYW52YXMuaGVpZ2h0KSB7XG4gICAgICBjYW52YXMud2lkdGggPSB3XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gaFxuICAgIH1cblxuICAgIGlmICh3ICE9PSB0aGlzLndpZHRoIHx8IGggIT09IHRoaXMuaGVpZ2h0KSB7XG4gICAgICAvKipcbiAgICAgICAqIENhbnZhcyBzaXplIGluIF9kZXZpY2VfIHBpeGVscy5cbiAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIHRoaXMud2lkdGggPSB3XG4gICAgICAvKipcbiAgICAgICAqIENhbnZhcyBzaXplIGluIF9kZXZpY2VfIHBpeGVscy5cbiAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgKi9cbiAgICAgIHRoaXMuaGVpZ2h0ID0gaFxuXG4gICAgICB0aGlzLmdseC5nbC52aWV3cG9ydCgwLCAwLCB3LCBoKSAgLy8gVE9ETyBtb3ZlIHRoaXMgaW50byBXZWJHbFJlbmRlcmVyXG4gICAgfVxuICB9XG59XG5cbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gY3JlYXRlR2xDb250ZXh0IChjYW52YXMsIGN0eEF0dHJzKSB7XG4gIGxldCBnbFxuXG4gIHRyeSB7XG4gICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBjdHhBdHRycylcbiAgfSBjYXRjaCAoZXJyMCkge1xuICAgIGVycm9yKGVycjApXG4gIH1cblxuICBpZiAoIWdsKSB7XG4gICAgdHJ5IHtcbiAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGN0eEF0dHJzKVxuICAgIH0gY2F0Y2ggKGVycjEpIHtcbiAgICAgIGVycm9yKGVycjEpXG4gICAgfVxuICB9XG5cbiAgaWYgKCFnbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGNyZWF0ZSB3ZWJnbDEgY29udGV4dCcpXG4gIH1cblxuICByZXR1cm4gZ2xcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvYXBwL2luZGV4LmpzIiwiaW1wb3J0IFJlc291cmNlUmVmIGZyb20gJy4uL3V0aWxzL3Jlc291cmNlX3JlZidcbmltcG9ydCBXZWJHbFNoYWRlciBmcm9tICcuL3dlYl9nbF9zaGFkZXInXG5pbXBvcnQgV2ViR2xQcm9ncmFtIGZyb20gJy4vd2ViX2dsX3Byb2dyYW0nXG5pbXBvcnQgV2ViR2xCdWZmZXIgZnJvbSAnLi93ZWJfZ2xfYnVmZmVyJ1xuaW1wb3J0IFdlYkdsVGV4dHVyZSBmcm9tICcuL3dlYl9nbF90ZXh0dXJlJ1xuXG5pbXBvcnQgZGVzdHJveSBmcm9tICcuLi91dGlscy9kZXN0cm95J1xuXG5jb25zdCBXRUJfR0xfQlVGRkVSX1VTQUdFID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHN0YXRpYzogV2ViR2xCdWZmZXIuU1RBVElDX0RSQVcsXG4gIGR5bmFtaWM6IFdlYkdsQnVmZmVyLkRZTkFNSUNfRFJBV1xufSlcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2ViR2xSZXNvdXJjZUxpYnJhcnkge1xuICBjb25zdHJ1Y3RvciAoZ2x4KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdnbHgnLCB7IHZhbHVlOiBnbHggfSlcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMudmVydGV4U2hhZGVyID0gbmV3IE1hcCgpXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5mcmFnbWVudFNoYWRlciA9IG5ldyBNYXAoKVxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuc2hhZGVyUHJvZ3JhbSA9IG5ldyBNYXAoKVxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuYnVmZmVyID0gbmV3IE1hcCgpXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy50ZXh0dXJlID0gbmV3IE1hcCgpXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnRleHR1cmUuY2xlYXIoKVxuICAgIHRoaXMuYnVmZmVyLmNsZWFyKClcbiAgICB0aGlzLnNoYWRlclByb2dyYW0uY2xlYXIoKVxuICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIuY2xlYXIoKVxuICAgIHRoaXMudmVydGV4U2hhZGVyLmNsZWFyKClcbiAgICBkZXN0cm95KHRoaXMpXG4gIH1cblxuICBsb2FkVmVydGV4U2hhZGVyIChzaGFkZXJTb3VyY2UpIHtcbiAgICBsZXQgZ2xTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlci5nZXQoc2hhZGVyU291cmNlLmlkKVxuICAgIGlmICghZ2xTaGFkZXIpIHtcbiAgICAgIGdsU2hhZGVyID0gbmV3IFdlYkdsU2hhZGVyKHRoaXMuZ2x4LCBzaGFkZXJTb3VyY2UpXG4gICAgICB0aGlzLnZlcnRleFNoYWRlci5zZXQoc2hhZGVyU291cmNlLmlkLCBnbFNoYWRlcilcbiAgICB9XG4gICAgcmV0dXJuIGdsU2hhZGVyXG4gIH1cblxuICBsb2FkRnJhZ2VtZW50U2hhZGVyIChzaGFkZXJTb3VyY2UpIHtcbiAgICBsZXQgZ2xTaGFkZXIgPSB0aGlzLmZyYWdtZW50U2hhZGVyLmdldChzaGFkZXJTb3VyY2UuaWQpXG4gICAgaWYgKCFnbFNoYWRlcikge1xuICAgICAgZ2xTaGFkZXIgPSBuZXcgV2ViR2xTaGFkZXIodGhpcy5nbHgsIHNoYWRlclNvdXJjZSlcbiAgICAgIHRoaXMudmVydGV4U2hhZGVyLnNldChzaGFkZXJTb3VyY2UuaWQsIGdsU2hhZGVyKVxuICAgIH1cbiAgICByZXR1cm4gZ2xTaGFkZXJcbiAgfVxuXG4gIGxvYWRQcm9ncmFtIChzaGFkZXJQcm9ncmFtKSB7XG4gICAgbGV0IHByb2dyYW0gPSB0aGlzLnNoYWRlclByb2dyYW0uZ2V0KHNoYWRlclByb2dyYW0uaWQpXG4gICAgaWYgKCFwcm9ncmFtKSB7XG4gICAgICBwcm9ncmFtID0gbmV3IFdlYkdsUHJvZ3JhbSh0aGlzLmdseCwgc2hhZGVyUHJvZ3JhbSlcbiAgICAgIHRoaXMuc2hhZGVyUHJvZ3JhbS5zZXQoc2hhZGVyUHJvZ3JhbS5pZCwgcHJvZ3JhbSlcbiAgICB9XG4gICAgcmV0dXJuIHByb2dyYW1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jlc291cmNlUmVmfSByZWYgLSByZXNvdXJjZSByZWZlcmVuY2UgdG8gVk9BcnJheSBvciBgRWxlbWVudEluZGV4QXJyYXlgXG4gICAqIEByZXR1cm5zIHtSZXNvdXJjZVJlZn0gcmVzb3VyY2UgcmVmZXJlbmNlIHRvIGBXZWJHbEJ1ZmZlcmBcbiAgICovXG4gIGxvYWRCdWZmZXIgKHJlZikge1xuICAgIGxldCBidWZmZXJSZWYgPSB0aGlzLmJ1ZmZlci5nZXQocmVmLmlkKVxuICAgIGlmICghYnVmZmVyUmVmKSB7XG4gICAgICAvLyBjcmVhdGUgV2ViR2xCdWZmZXJcbiAgICAgIGNvbnN0IHRhcmdldCA9IHJlZi5oaW50cy50YXJnZXQgfHwgV2ViR2xCdWZmZXIuQVJSQVlfQlVGRkVSXG4gICAgICBjb25zdCBnbEJ1ZmZlciA9IG5ldyBXZWJHbEJ1ZmZlcih0aGlzLmdseCwgdGFyZ2V0LCBXRUJfR0xfQlVGRkVSX1VTQUdFW3JlZi5oaW50cy51c2FnZV0pXG4gICAgICAvLyBjcmVhdGUgUmVzb3VyY2VSZWZcbiAgICAgIGJ1ZmZlclJlZiA9IG5ldyBSZXNvdXJjZVJlZihnbEJ1ZmZlciwgeyBpZDogcmVmLmlkLCBzZXJpYWw6IDAgfSlcbiAgICAgIHRoaXMuYnVmZmVyLnNldChyZWYuaWQsIGJ1ZmZlclJlZilcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlclJlZlxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVzb3VyY2VSZWZ9IHJlc291cmNlUmVmXG4gICAqIEByZXR1cm5zIHtSZXNvdXJjZVJlZn0gcmVzb3VyY2UgcmVmZXJlbmNlIHRvIFdlYkdsQnVmZmVyXG4gICAqL1xuICBmaW5kQnVmZmVyIChyZXNvdXJjZVJlZikge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci5nZXQocmVzb3VyY2VSZWYuaWQpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtSZXNvdXJjZVJlZn0gdGV4UmVmIC0gcmVzb3VyY2UgcmVmZXJlbmNlIHRvIHRleHR1cmVcbiAgICogQHJldHVybnMge1Jlc291cmNlUmVmfSByZXNvdXJjZSByZWZlcmVuY2UgdG8gV2ViR2xUZXh0dXJlXG4gICAqL1xuICBsb2FkVGV4dHVyZSAodGV4UmVmKSB7XG4gICAgbGV0IGdsVGV4dHVyZVJlZiA9IHRoaXMudGV4dHVyZS5nZXQodGV4UmVmLmlkKVxuICAgIGlmICghZ2xUZXh0dXJlUmVmKSB7XG4gICAgICAvLyBjcmVhdGUgV2ViR2xUZXh0dXJlXG4gICAgICBjb25zdCBnbFRleCA9IG5ldyBXZWJHbFRleHR1cmUoXG4gICAgICAgIHRoaXMuZ2x4LFxuICAgICAgICB0ZXhSZWYucmVzb3VyY2UuaW1nRWwsXG4gICAgICAgIHRleFJlZi5oaW50cy5mbGlwWSxcbiAgICAgICAgdGV4UmVmLmhpbnRzLnJlcGVhdGFibGUsXG4gICAgICAgIHRleFJlZi5oaW50cy5wcmVtdWx0aXBseUFscGhhLFxuICAgICAgICB0ZXhSZWYuaGludHMubmVhcmVzdFxuICAgICAgKVxuICAgICAgLy8gY3JlYXRlIFJlc291cmNlUmVmXG4gICAgICBnbFRleHR1cmVSZWYgPSBuZXcgUmVzb3VyY2VSZWYoZ2xUZXgsIHsgaWQ6IHRleFJlZi5pZCwgc2VyaWFsOiAwIH0pXG4gICAgICB0aGlzLnRleHR1cmUuc2V0KHRleFJlZi5pZCwgZ2xUZXh0dXJlUmVmKVxuICAgIH1cbiAgICByZXR1cm4gZ2xUZXh0dXJlUmVmXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9yZW5kZXIvd2ViX2dsX3Jlc291cmNlX2xpYnJhcnkuanMiLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcblxuICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy91dWlkL3Y0LmpzXG4vLyBtb2R1bGUgaWQgPSA3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxudmFyIHJuZztcblxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvOyAvLyBmb3IgSUUgMTFcbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAvLyBXSEFUV0cgY3J5cHRvIFJORyAtIGh0dHA6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9DcnlwdG9cbiAgdmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gIHJuZyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbiAgICByZXR1cm4gcm5kczg7XG4gIH07XG59XG5cbmlmICghcm5nKSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuICBybmcgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBybmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmctYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIHJldHVybiBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnl0ZXNUb1V1aWQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ieXRlc1RvVXVpZC5qc1xuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJpYWwge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtpbml0aWFsVmFsdWU9MV1cbiAgICovXG4gIGNvbnN0cnVjdG9yIChpbml0aWFsVmFsdWUgPSAxKSB7XG4gICAgdGhpcy52YWx1ZSA9IGluaXRpYWxWYWx1ZVxuICB9XG5cbiAgdG91Y2ggKCkge1xuICAgICsrdGhpcy52YWx1ZVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvdXRpbHMvc2VyaWFsLmpzIiwiaW1wb3J0IFNoYWRlclNvdXJjZSBmcm9tICcuLi9jb3JlL3NoYWRlcl9zb3VyY2UnXG5pbXBvcnQgc291cmNlVG9TdHIgZnJvbSAnLi4vdXRpbHMvc2hhZGVyX2hlbHBlcnMvc291cmNlX3RvX3N0cidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2ViR2xTaGFkZXIge1xuICBjb25zdHJ1Y3RvciAoZ2x4LCBzb3VyY2UpIHtcbiAgICB0aGlzLmdseCA9IGdseFxuXG4gICAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgU2hhZGVyU291cmNlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJHbFNoYWRlciBwYW5pYyEgc291cmNlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgU2hhZGVyU291cmNlIScpXG4gICAgfVxuICAgIHRoaXMuc291cmNlID0gc291cmNlXG5cbiAgICBjb25zdCB7IGdsIH0gPSBnbHhcbiAgICB0aGlzLnNoYWRlclR5cGUgPSBnbFtzb3VyY2UudHlwZV1cblxuICAgIHRoaXMuZ2xTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodGhpcy5zaGFkZXJUeXBlKVxuICAgIGNvbXBpbGVTaGFkZXIodGhpcylcblxuICAgIE9iamVjdC5mcmVlemUodGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21waWxlU2hhZGVyIChzaGFkZXIpIHtcbiAgY29uc3QgeyBnbCB9ID0gc2hhZGVyLmdseFxuICBjb25zdCB7IGdsU2hhZGVyLCBzb3VyY2UgfSA9IHNoYWRlclxuXG4gIGNvbnN0IHNyYyA9IHNvdXJjZVRvU3RyKHsgZ2x4OiBzaGFkZXIuZ2x4IH0sIHNvdXJjZS5zb3VyY2UpXG5cbiAgZ2wuc2hhZGVyU291cmNlKGdsU2hhZGVyLCBzcmMpXG4gIGdsLmNvbXBpbGVTaGFkZXIoZ2xTaGFkZXIpXG5cbiAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZ2xTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgIGNvbnN0IHNoYWRlckluZm9Mb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKGdsU2hhZGVyKVxuXG4gICAgY29uc29sZS5lcnJvcihzaGFkZXJJbmZvTG9nKVxuICAgIGNvbnNvbGUuZ3JvdXAoJ3NoYWRlci1pbmZvJylcbiAgICBjb25zb2xlLmRlYnVnKCdzaGFkZXJTb3VyY2UnLCBzaGFkZXIpXG4gICAgY29uc29sZS5sb2coc291cmNlKVxuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKVxuXG4gICAgY29uc3QgZXJyID0gbmV3IEVycm9yKCdXZWJHbFNoYWRlciBjb21waWxlIHBhbmljIScpXG4gICAgZXJyLndlYkdsU2hhZGVyID0gc2hhZGVyXG4gICAgZXJyLnNoYWRlckluZm9Mb2cgPSBzaGFkZXJJbmZvTG9nXG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9yZW5kZXIvd2ViX2dsX3NoYWRlci5qcyIsIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc291cmNlVG9TdHIgKGN0eCwgc291cmNlKSB7XG4gIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzb3VyY2VcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHNvdXJjZVRvU3RyKGN0eCwgc291cmNlKGN0eCkpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgcmV0dXJuIHNvdXJjZS5tYXAoc291cmNlVG9TdHIuYmluZChudWxsLCBjdHgpKS5qb2luKCdcXG4nKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzb3VyY2UgKyAnJ1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvdXRpbHMvc2hhZGVyX2hlbHBlcnMvc291cmNlX3RvX3N0ci5qcyIsImltcG9ydCBXZWJHbFVuaWZvcm0gZnJvbSAnLi93ZWJfZ2xfdW5pZm9ybSdcbmltcG9ydCBXZWJHbEF0dHJpYnV0ZSBmcm9tICcuL3dlYl9nbF9hdHRyaWJ1dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdsUHJvZ3JhbSB7XG4gIGNvbnN0cnVjdG9yIChnbHgsIHNoYWRlclByb2dyYW0pIHtcbiAgICB0aGlzLmdseCA9IGdseFxuXG4gICAgdGhpcy52ZXJ0ZXhTaGFkZXIgPSBnbHgucmVzb3VyY2VMaWJyYXJ5LmxvYWRWZXJ0ZXhTaGFkZXIoc2hhZGVyUHJvZ3JhbS52ZXJ0ZXhTaGFkZXIpXG4gICAgdGhpcy5mcmFnbWVudFNoYWRlciA9IGdseC5yZXNvdXJjZUxpYnJhcnkubG9hZEZyYWdlbWVudFNoYWRlcihzaGFkZXJQcm9ncmFtLmZyYWdtZW50U2hhZGVyKVxuXG4gICAgY29uc3QgeyBnbCB9ID0gZ2x4XG4gICAgdGhpcy5nbFByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKClcblxuICAgIGxpbmtQcm9ncmFtKHRoaXMsIHRoaXMudmVydGV4U2hhZGVyLmdsU2hhZGVyLCB0aGlzLmZyYWdtZW50U2hhZGVyLmdsU2hhZGVyKVxuICAgIC8vIFRPRE8gZ2wuZGVsZXRlU2hhZGVyP1xuXG4gICAgY3JlYXRlVW5pZm9ybXModGhpcylcbiAgICBjcmVhdGVBdHRyaWJ1dGVzKHRoaXMpXG5cbiAgICBPYmplY3QuZnJlZXplKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHVzZSAoKSB7XG4gICAgY29uc3QgeyBnbHggfSA9IHRoaXNcbiAgICBpZiAoZ2x4LnVzZVByb2dyYW0odGhpcy5nbFByb2dyYW0pKSB7XG4gICAgICBnbHguZW5hYmxlVmVydGV4QXR0cmliQXJyYXlzKHRoaXMuYXR0cmlidXRlTG9jYXRpb25zKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTaGFkZXJDb250ZXh0fSBzaGFkZXJDb250ZXh0XG4gICAqIEBwYXJhbSB7V2ViR2xSZW5kZXJlcn0gcmVuZGVyZXJcbiAgICovXG4gIGxvYWRVbmlmb3JtcyAoc2hhZGVyQ29udGV4dCwgcmVuZGVyZXIpIHtcbiAgICB0aGlzLnVuaWZvcm1OYW1lcy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgbGV0IHNoYWRlclZhciA9IHNoYWRlckNvbnRleHQuY3VyVW5pZm9ybShuYW1lKVxuICAgICAgaWYgKHNoYWRlclZhciA9PSBudWxsKSB7XG4gICAgICAgIHNoYWRlclZhciA9IHNoYWRlckNvbnRleHQuY3VyVGV4MmQobmFtZSlcbiAgICAgICAgaWYgKHNoYWRlclZhciA9PSBudWxsKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW1dlYkdsUHJvZ3JhbV0gY291bGQgbm90IGxvYWQgdW5pZm9ybTonLCBuYW1lKVxuICAgICAgICB9XG4gICAgICAgIHNoYWRlclZhci5zeW5jVGV4dHVyZUFuZFZhbHVlKHJlbmRlcmVyKVxuICAgICAgfVxuICAgICAgdGhpcy51bmlmb3Jtc1tuYW1lXS5zZXRWYWx1ZShzaGFkZXJWYXIudmFsdWUpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBzeW5jIGJ1ZmZlciBiZWZvcmUgbG9hZFxuICAgKlxuICAgKiBAcGFyYW0ge1NoYWRlckNvbnRleHR9IHNoYWRlckNvbnRleHRcbiAgICogQHBhcmFtIHtXZWJHbFJlbmRlcmVyfSByZW5kZXJlclxuICAgKi9cbiAgbG9hZEF0dHJpYnV0ZXMgKHNoYWRlckNvbnRleHQsIHJlbmRlcmVyKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVOYW1lcy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgY29uc3QgYXR0cmliVmFsdWUgPSBzaGFkZXJDb250ZXh0LmN1ckF0dHJpYihuYW1lKS52YWx1ZVxuICAgICAgcmVuZGVyZXIuc3luY0J1ZmZlcihhdHRyaWJWYWx1ZSkuYmluZEJ1ZmZlcigpXG4gICAgICB0aGlzLmF0dHJpYnV0ZXNbbmFtZV0udmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJWYWx1ZS5kZXNjcmlwdG9yKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqIEBwcml2YXRlICovXG5mdW5jdGlvbiBjcmVhdGVBdHRyaWJ1dGVzIChwcm9ncmFtKSB7XG4gIGNvbnN0IHsgZ2wgfSA9IHByb2dyYW0uZ2x4XG4gIGNvbnN0IGxlbiA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbS5nbFByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTKVxuXG4gIHByb2dyYW0uYXR0cmlidXRlcyA9IHt9XG4gIHByb2dyYW0uYXR0cmlidXRlTmFtZXMgPSBbXVxuICBwcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGNvbnN0IGF0dHJpYiA9IG5ldyBXZWJHbEF0dHJpYnV0ZShwcm9ncmFtLCBpKVxuICAgIHByb2dyYW0uYXR0cmlidXRlc1thdHRyaWIubmFtZV0gPSBhdHRyaWJcbiAgICBwcm9ncmFtLmF0dHJpYnV0ZU5hbWVzLnB1c2goYXR0cmliLm5hbWUpXG4gICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMucHVzaChhdHRyaWIubG9jYXRpb24pXG4gIH1cblxuICBPYmplY3QuZnJlZXplKHByb2dyYW0uYXR0cmlidXRlcylcbn1cblxuLyoqIEBwcml2YXRlICovXG5mdW5jdGlvbiBjcmVhdGVVbmlmb3JtcyAocHJvZ3JhbSkge1xuICBjb25zdCB7IGdsIH0gPSBwcm9ncmFtLmdseFxuICBjb25zdCBsZW4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0uZ2xQcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpXG5cbiAgcHJvZ3JhbS51bmlmb3JtcyA9IHt9XG4gIHByb2dyYW0udW5pZm9ybU5hbWVzID0gW11cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgY29uc3QgdW5pZm9ybSA9IG5ldyBXZWJHbFVuaWZvcm0ocHJvZ3JhbSwgaSlcbiAgICBwcm9ncmFtLnVuaWZvcm1zW3VuaWZvcm0ubmFtZV0gPSB1bmlmb3JtXG4gICAgcHJvZ3JhbS51bmlmb3JtTmFtZXMucHVzaCh1bmlmb3JtLm5hbWUpXG4gIH1cblxuICBPYmplY3QuZnJlZXplKHByb2dyYW0udW5pZm9ybXMpXG59XG5cbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gbGlua1Byb2dyYW0gKHByb2dyYW0sIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpIHtcbiAgY29uc3QgeyBnbCB9ID0gcHJvZ3JhbS5nbHhcbiAgY29uc3QgeyBnbFByb2dyYW0gfSA9IHByb2dyYW1cblxuICBnbC5hdHRhY2hTaGFkZXIoZ2xQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpXG4gIGdsLmF0dGFjaFNoYWRlcihnbFByb2dyYW0sIGZyYWdtZW50U2hhZGVyKVxuXG4gIGdsLmxpbmtQcm9ncmFtKGdsUHJvZ3JhbSlcblxuICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIoZ2xQcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoJ1dlYkdsUHJvZ3JhbSBsaW5rIHBhbmljIScpXG4gICAgZXJyLndlYkdsUHJvZ3JhbSA9IHByb2dyYW1cbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfcHJvZ3JhbS5qcyIsIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2ViR2xVbmlmb3JtIHtcbiAgY29uc3RydWN0b3IgKHByb2dyYW0sIGluZGV4KSB7XG4gICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbVxuICAgIHRoaXMuZ2x4ID0gcHJvZ3JhbS5nbHhcblxuICAgIGNvbnN0IHsgZ2wgfSA9IHByb2dyYW0uZ2x4XG4gICAgY29uc3QgeyBnbFByb2dyYW0gfSA9IHByb2dyYW1cblxuICAgIGNvbnN0IHsgbmFtZSwgc2l6ZSwgdHlwZSB9ID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybShnbFByb2dyYW0sIGluZGV4KVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB0aGlzLnNpemUgPSBzaXplXG4gICAgdGhpcy50eXBlID0gdHlwZVxuXG4gICAgdGhpcy5sb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihnbFByb2dyYW0sIG5hbWUpXG5cbiAgICB0aGlzLnNldFZhbHVlID0gdW5pZm9ybVNldHRlcih0aGlzKVxuXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIHVuaWZvcm1TZXR0ZXIgKHVuaWZvcm0pIHtcbiAgY29uc3QgeyB0eXBlLCBsb2NhdGlvbiB9ID0gdW5pZm9ybVxuICBjb25zdCB7IGdsIH0gPSB1bmlmb3JtLmdseFxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgZ2wuRkxPQVQ6XG4gICAgICByZXR1cm4gKHZhbHVlKSA9PiBnbC51bmlmb3JtMWYobG9jYXRpb24sIHZhbHVlKVxuXG4gICAgY2FzZSBnbC5GTE9BVF9WRUMyOlxuICAgICAgcmV0dXJuICh2YWx1ZSkgPT4gZ2wudW5pZm9ybTJmKGxvY2F0aW9uLCB2YWx1ZVswXSwgdmFsdWVbMV0pXG5cbiAgICBjYXNlIGdsLkZMT0FUX1ZFQzM6XG4gICAgICByZXR1cm4gKHZhbHVlKSA9PiBnbC51bmlmb3JtM2YobG9jYXRpb24sIHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0pXG5cbiAgICBjYXNlIGdsLkZMT0FUX1ZFQzQ6XG4gICAgICByZXR1cm4gKHZhbHVlKSA9PiBnbC51bmlmb3JtNGYobG9jYXRpb24sIHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0sIHZhbHVlWzNdKVxuXG4gICAgY2FzZSBnbC5GTE9BVF9NQVQ0OlxuICAgICAgcmV0dXJuICh2YWx1ZSkgPT4gZ2wudW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZ2wuRkFMU0UsIHZhbHVlLm1hdDQpXG5cbiAgICBjYXNlIGdsLlNBTVBMRVJfMkQ6XG4gICAgICByZXR1cm4gKHZhbHVlKSA9PiBnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKVxuICB9XG5cbiAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBXZWJHbFVuaWZvcm0gdW5rbm93biB1bmlmb3JtIHR5cGU6JHt0eXBlfWApXG4gIGVyci53ZWJHbFVuaWZvcm0gPSB1bmlmb3JtXG4gIHRocm93IGVyclxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfdW5pZm9ybS5qcyIsImltcG9ydCB7IEdMX0lURU1fVFlQRVMgfSBmcm9tICcuLi91dGlscy90eXBlZF9hcnJheV9oZWxwZXJzJ1xuXG5jb25zdCBnbFR5cGUgPSAoZ2wsIHR5cGUpID0+IGdsW0dMX0lURU1fVFlQRVNbdHlwZV1dXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdsQXR0cmlidXRlIHtcbiAgY29uc3RydWN0b3IgKHByb2dyYW0sIGluZGV4KSB7XG4gICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbVxuICAgIHRoaXMuZ2x4ID0gcHJvZ3JhbS5nbHhcblxuICAgIGNvbnN0IHsgZ2wgfSA9IHByb2dyYW0uZ2x4XG4gICAgY29uc3QgeyBnbFByb2dyYW0gfSA9IHByb2dyYW1cblxuICAgIGNvbnN0IHsgbmFtZSwgc2l6ZSwgdHlwZSB9ID0gZ2wuZ2V0QWN0aXZlQXR0cmliKGdsUHJvZ3JhbSwgaW5kZXgpXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMuc2l6ZSA9IHNpemVcbiAgICB0aGlzLnR5cGUgPSB0eXBlXG5cbiAgICB0aGlzLmxvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oZ2xQcm9ncmFtLCBuYW1lKVxuXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Vk9EZXNjcmlwdG9yfSBkZXNjcmlwdG9yXG4gICAqL1xuICB2ZXJ0ZXhBdHRyaWJQb2ludGVyIChkZXNjcmlwdG9yKSB7XG4gICAgY29uc3QgeyBnbCB9ID0gdGhpcy5nbHhcbiAgICBjb25zdCBhdHRyID0gZGVzY3JpcHRvci5hdHRyW3RoaXMubmFtZV1cbiAgICBjb25zdCB0eXBlID0gZ2xUeXBlKGdsLCBhdHRyLnR5cGUpXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmxvY2F0aW9uLCBhdHRyLnNpemUsIHR5cGUsIGZhbHNlLCBkZXNjcmlwdG9yLmJ5dGVzUGVyVmVydGV4LCBhdHRyLmJ5dGVPZmZzZXQpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9yZW5kZXIvd2ViX2dsX2F0dHJpYnV0ZS5qcyIsIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2ViR2xUZXh0dXJlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR2xDb250ZXh0fSBnbHhcbiAgICogQHBhcmFtIHtIVE1MSW1hZ2VFbGVtZW50fSBpbWdFbFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbGlwWT1mYWxzZV1cbiAgICogQHBhcmFtIHtib29sZWFufSBbcmVwZWF0YWJsZT1mYWxzZV1cbiAgICogQHBhcmFtIHtib29sZWFufSBbcHJlbXVsdGlwbHlBbHBoYT1mYWxzZV1cbiAgICogQHBhcmFtIHtib29sZWFufSBbbmVhcmVzdD1mYWxzZV1cbiAgICovXG4gIGNvbnN0cnVjdG9yIChnbHgsIGltZ0VsLCBmbGlwWSA9IGZhbHNlLCByZXBlYXRhYmxlID0gZmFsc2UsIHByZW11bHRpcGx5QWxwaGEgPSBmYWxzZSwgbmVhcmVzdCA9IGZhbHNlKSB7XG4gICAgdGhpcy5nbHggPSBnbHhcbiAgICB0aGlzLmltZ0VsID0gaW1nRWxcblxuICAgIHRoaXMuZmxpcFkgPSBmbGlwWVxuICAgIHRoaXMucmVwZWF0YWJsZSA9IHJlcGVhdGFibGVcbiAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBwcmVtdWx0aXBseUFscGhhXG4gICAgdGhpcy5uZWFyZXN0ID0gbmVhcmVzdFxuXG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gZmFsc2VcbiAgICB0aGlzLmdsVGV4T2JqID0gZ2x4LmdsLmNyZWF0ZVRleHR1cmUoKVxuICAgIHRoaXMudGV4VW5pdCA9IC0xXG4gIH1cblxuICBiaW5kICgpIHtcbiAgICByZXR1cm4gdGhpcy5nbHgudGV4dHVyZU1hbmFnZXIuYmluZFdlYkdsVGV4dHVyZSh0aGlzKVxuICB9XG5cbiAgdXBsb2FkSW1hZ2VEYXRhICgpIHtcbiAgICBpZiAodGhpcy5pbWdFbCA9PSBudWxsKSByZXR1cm5cbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCkge1xuICAgICAgaW5pdGlhbGl6ZSh0aGlzKVxuICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZVxuICAgIH1cblxuICAgIHRoaXMuYmluZCgpXG5cbiAgICBjb25zdCB7IGdsIH0gPSB0aGlzLmdseFxuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgdGhpcy5pbWdFbClcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplICh0ZXgpIHtcbiAgdGV4LmJpbmQoKVxuXG4gIGNvbnN0IHsgZ2wgfSA9IHRleC5nbHhcblxuICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0ZXguZmxpcFkpXG4gIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGV4LnByZW11bHRpcGx5QWxwaGEpXG5cbiAgY29uc3Qgd3JhcCA9IHRleC5yZXBlYXRhYmxlID8gZ2wuUkVQRUFUIDogZ2wuQ0xBTVBfVE9fRURHRVxuICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCB3cmFwKVxuICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCB3cmFwKVxuXG4gIGNvbnN0IGZpbHRlciA9IHRleC5uZWFyZXN0ID8gZ2wuTkVBUkVTVCA6IGdsLkxJTkVBUlxuICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZmlsdGVyKVxuICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZmlsdGVyKVxuXG4gIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgdGV4LmltZ0VsLndpZHRoLCB0ZXguaW1nRWwuaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfdGV4dHVyZS5qcyIsImltcG9ydCBkZXN0cm95IGZyb20gJy4uL3V0aWxzL2Rlc3Ryb3knXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYkdsVGV4dHVyZU1hbmFnZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtXZWJHbENvbnRleHR9IGdseFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGdseCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZ2x4JywgeyB2YWx1ZTogZ2x4IH0pXG5cbiAgICAvKipcbiAgICAgKiB0ZXhVbml0IC0+IFdlYkdsVGV4dHVyZVxuICAgICAqIEB0eXBlIHtBcnJheTxudW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMuYm91bmRUZXh0dXJlcyA9IG5ldyBBcnJheShnbHguTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYm91bmRUZXh0dXJlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdGhpcy5ib3VuZFRleHR1cmVzW2ldID0gbnVsbFxuICAgIH1cblxuICAgIHRoaXMubGFzdEJvdW5kVGV4VW5pdCA9IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuYm91bmRUZXh0dXJlcy5sZW5ndGggPSAwXG4gICAgZGVzdHJveSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgYSAqdGV4dHVyZSogdG8gYSAqdGV4dHVyZSB1bml0Ki5cbiAgICogQHBhcmFtIHtXZWJHbFRleHR1cmV9IGdsVGV4dHVyZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRleHR1cmUgdW5pdFxuICAgKi9cbiAgYmluZFdlYkdsVGV4dHVyZSAoZ2xUZXh0dXJlKSB7XG4gICAgbGV0IHRleFVuaXQgPSB0aGlzLmJvdW5kVGV4dHVyZXMuaW5kZXhPZihnbFRleHR1cmUpXG5cbiAgICBpZiAodGV4VW5pdCA8IDApIHtcbiAgICAgIC8vIHRleHR1cmUgaXMgdW5ib3VuZFxuICAgICAgLy8gZmluZCBhIGZyZWUgdGV4dHVyZSB1bml0IC4uXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYm91bmRUZXh0dXJlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoIXRoaXMuYm91bmRUZXh0dXJlc1tpXSkge1xuICAgICAgICAgIHRleFVuaXQgPSBpXG4gICAgICAgICAgdGhpcy5ib3VuZFRleHR1cmVzW2ldID0gZ2xUZXh0dXJlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGV4VW5pdCA8IDApIHtcbiAgICAgICAgLy8gbm8gZnJlZSB0ZXh0dXJlIGZvdW5kXG4gICAgICAgIC8vIHNvIHdlIGNob29zZSB0aGUgbHJ1IHRleHR1cmUgdW5pdFxuXG4gICAgICAgIHRleFVuaXQgPSB0aGlzLmxhc3RCb3VuZFRleFVuaXRcblxuICAgICAgICBsZXQgcHJldkdsVGV4ID0gdGhpcy5ib3VuZFRleHR1cmVzW3RleFVuaXRdXG4gICAgICAgIGlmIChwcmV2R2xUZXgpIHByZXZHbFRleC50ZXhVbml0ID0gLTFcblxuICAgICAgICB0aGlzLmxhc3RCb3VuZFRleFVuaXQgPSAodGhpcy5sYXN0Qm91bmRUZXhVbml0ICsgMSkgJSB0aGlzLmdseC5NQVhfVEVYVFVSRV9JTUFHRV9VTklUU1xuICAgICAgfVxuXG4gICAgICB0aGlzLmdseC5hY3RpdmVUZXh0dXJlKHRleFVuaXQpXG4gICAgICB0aGlzLmdseC5iaW5kVGV4dHVyZTJkKGdsVGV4dHVyZS5nbFRleE9iailcblxuICAgICAgZ2xUZXh0dXJlLnRleFVuaXQgPSB0ZXhVbml0XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleFVuaXRcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfdGV4dHVyZV9tYW5hZ2VyLmpzIiwiXG4vKiogQHByaXZhdGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWTyAob2JqLCBkZXNjcmlwdG9yLCB2b0FycmF5KSB7XG4gIC8vIHNldCBWT0Rlc2NyaXB0b3JcbiAgLy9cbiAgb2JqLmRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yIHx8ICh2b0FycmF5ID8gdm9BcnJheS5kZXNjcmlwdG9yIDogbnVsbClcblxuICBpZiAoIW9iai5kZXNjcmlwdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgZGV0ZWN0IFZPRGVzY3JpcHRvciEnKVxuICB9XG5cbiAgLy8gc2V0IFZPQXJyYXlcbiAgLy9cbiAgb2JqLnZvQXJyYXkgPSB2b0FycmF5IHx8IG9iai5kZXNjcmlwdG9yLmNyZWF0ZVZPQXJyYXkoKVxuXG4gIGlmIChvYmouZGVzY3JpcHRvciAhPT0gb2JqLnZvQXJyYXkuZGVzY3JpcHRvciAmJlxuICAgIChvYmouZGVzY3JpcHRvci52ZXJ0ZXhDb3VudCAhPT0gb2JqLnZvQXJyYXkuZGVzY3JpcHRvci52ZXJ0ZXhDb3VudCB8fFxuICAgICAgb2JqLmRlc2NyaXB0b3IudmVydGV4QXR0ckNvdW50ICE9PSBvYmoudm9BcnJheS5kZXNjcmlwdG9yLnZlcnRleEF0dHJDb3VudCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29tcGF0aWJsZSB2ZXJ0ZXggb2JqZWN0IGRlc2NyaXB0b3JzIScpXG4gIH1cblxuICByZXR1cm4gb2JqXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS92X29faGVscGVyLmpzIiwiaW1wb3J0IFZPQXR0ckRlc2NyaXB0b3IgZnJvbSAnLi4vdl9vX2F0dHJfZGVzY3JpcHRvcidcblxuLyoqIEBwcml2YXRlICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZGVzY3JpcHRvciwgcHJvdG8pIHtcbiAgY29uc3QgcHJvcGVydGllc09iamVjdCA9IHtcblxuICAgIHRvQXJyYXk6IHtcblxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIChhdHRyTmFtZXMpIHtcbiAgICAgICAgY29uc3QgYXJyID0gW11cbiAgICAgICAgY29uc3QgYXR0ckxpc3QgPSBBcnJheS5pc0FycmF5KGF0dHJOYW1lcylcbiAgICAgICAgICA/IGF0dHJOYW1lcy5tYXAobmFtZSA9PiBkZXNjcmlwdG9yLmF0dHJbbmFtZV0pXG4gICAgICAgICAgOiBkZXNjcmlwdG9yLmF0dHJMaXN0XG4gICAgICAgIGNvbnN0IGxlbiA9IGF0dHJMaXN0Lmxlbmd0aFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlc2NyaXB0b3IudmVydGV4Q291bnQ7ICsraSkge1xuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGVuOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSBhdHRyTGlzdFtqXVxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBhdHRyLnNpemU7ICsraykge1xuICAgICAgICAgICAgICBhcnIucHVzaChhdHRyLmdldFZhbHVlKHRoaXMsIGksIGspKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyXG4gICAgICB9XG5cbiAgICB9XG5cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGRlc2NyaXB0b3IuYXR0cikuZm9yRWFjaChuYW1lID0+IHtcbiAgICBjb25zdCBhdHRyID0gZGVzY3JpcHRvci5hdHRyWyBuYW1lIF1cblxuICAgIFZPQXR0ckRlc2NyaXB0b3IuZGVmaW5lUHJvcGVydGllcyhhdHRyLCBwcm9wZXJ0aWVzT2JqZWN0LCBkZXNjcmlwdG9yKVxuICB9KVxuXG4gIGRlc2NyaXB0b3Iudm9Qcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgcHJvdG8gPT09ICdvYmplY3QnID8gcHJvdG8gOiB7fSksIHByb3BlcnRpZXNPYmplY3QpXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS92X29fZGVzY3JpcHRvci9jcmVhdGVfdl9vX3Byb3RvdHlwZS5qcyIsIlxuLyoqIEBwcml2YXRlICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICBkZXNjcmlwdG9yLnR5cGVkQXJyYXlzID0ge1xuICAgIGZsb2F0MzI6IGZhbHNlLFxuICAgIGludDE2OiBmYWxzZSxcbiAgICBpbnQzMjogZmFsc2UsXG4gICAgaW50ODogZmFsc2UsXG4gICAgdWludDE2OiBmYWxzZSxcbiAgICB1aW50MzI6IGZhbHNlLFxuICAgIHVpbnQ4OiBmYWxzZVxuICB9XG5cbiAgT2JqZWN0LmtleXMoZGVzY3JpcHRvci5hdHRyKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgIGRlc2NyaXB0b3IudHlwZWRBcnJheXNbZGVzY3JpcHRvci5hdHRyW25hbWVdLnR5cGVdID0gdHJ1ZVxuICB9KVxuXG4gIE9iamVjdC5mcmVlemUoZGVzY3JpcHRvci50eXBlZEFycmF5cylcblxuICBkZXNjcmlwdG9yLnR5cGVMaXN0ID0gT2JqZWN0LmtleXMoZGVzY3JpcHRvci50eXBlZEFycmF5cykuZmlsdGVyKHR5cGUgPT4gZGVzY3JpcHRvci50eXBlZEFycmF5c1t0eXBlXSkuc29ydCgpXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS92X29fZGVzY3JpcHRvci9jcmVhdGVfdHlwZWRfYXJyYXlzLmpzIiwiaW1wb3J0IHsgQllURVNfUEVSX0VMRU1FTlQgfSBmcm9tICcuLi8uLi91dGlscy90eXBlZF9hcnJheV9oZWxwZXJzJ1xuaW1wb3J0IFZPQXR0ckRlc2NyaXB0b3IgZnJvbSAnLi4vdl9vX2F0dHJfZGVzY3JpcHRvcidcblxuLyoqIEBwcml2YXRlICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZGVzY3JpcHRvciwgYXR0cmlidXRlcykge1xuICBkZXNjcmlwdG9yLmF0dHIgPSB7fVxuICBkZXNjcmlwdG9yLmF0dHJOYW1lcyA9IFtdXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYXR0cmlidXRlcykpIHtcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIGxldCBieXRlT2Zmc2V0ID0gMFxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBhdHRyID0gYXR0cmlidXRlc1sgaSBdXG5cbiAgICAgIGlmIChhdHRyLnNpemUgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCd2ZXJ0ZXggb2JqZWN0IGF0dHJpYnV0ZSBkZXNjcmlwdG9yIGhhcyBubyBzaXplIScpXG5cbiAgICAgIGNvbnN0IHR5cGUgPSBhdHRyLnR5cGUgfHwgJ2Zsb2F0MzInXG5cbiAgICAgIGlmIChhdHRyLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZXNjcmlwdG9yLmF0dHJOYW1lcy5wdXNoKGF0dHIubmFtZSlcbiAgICAgICAgZGVzY3JpcHRvci5hdHRyWyBhdHRyLm5hbWUgXSA9IG5ldyBWT0F0dHJEZXNjcmlwdG9yKGF0dHIubmFtZSwgdHlwZSwgYXR0ci5zaXplLCBvZmZzZXQsIGJ5dGVPZmZzZXQsICEhYXR0ci51bmlmb3JtLCBhdHRyLmF0dHJOYW1lcylcbiAgICAgIH1cblxuICAgICAgb2Zmc2V0ICs9IGF0dHIuc2l6ZVxuICAgICAgYnl0ZU9mZnNldCArPSBCWVRFU19QRVJfRUxFTUVOVFsgdHlwZSBdICogYXR0ci5zaXplXG4gICAgfVxuXG4gICAgLy8gYnl0ZXMgcGVyIHZlcnRleCBpcyBhbHdheXMgYWxpZ25lZCB0byA0LWJ5dGVzIVxuICAgIGRlc2NyaXB0b3IucmlnaHRQYWRCeXRlc1BlclZlcnRleCA9IGJ5dGVPZmZzZXQgJSA0ID4gMCA/IDQgLSAoYnl0ZU9mZnNldCAlIDQpIDogMFxuICAgIGRlc2NyaXB0b3IuYnl0ZXNQZXJWZXJ0ZXggPSBieXRlT2Zmc2V0ICsgZGVzY3JpcHRvci5yaWdodFBhZEJ5dGVzUGVyVmVydGV4XG4gICAgZGVzY3JpcHRvci5ieXRlc1BlclZPID0gZGVzY3JpcHRvci5ieXRlc1BlclZlcnRleCAqIGRlc2NyaXB0b3IudmVydGV4Q291bnRcbiAgICBkZXNjcmlwdG9yLnZlcnRleEF0dHJDb3VudCA9IG9mZnNldFxuICB9XG5cbiAgZGVzY3JpcHRvci5hdHRyTGlzdCA9IGRlc2NyaXB0b3IuYXR0ck5hbWVzLm1hcChuYW1lID0+IGRlc2NyaXB0b3IuYXR0cltuYW1lXSlcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3Zfb19kZXNjcmlwdG9yL2NyZWF0ZV9hdHRyaWJ1dGVzLmpzIiwiaW1wb3J0IFZPQXR0ckRlc2NyaXB0b3IgZnJvbSAnLi4vdl9vX2F0dHJfZGVzY3JpcHRvcidcblxuLyoqIEBwcml2YXRlICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZGVzY3JpcHRvciwgYWxpYXNlcykge1xuICBpZiAodHlwZW9mIGFsaWFzZXMgIT09ICdvYmplY3QnKSByZXR1cm5cblxuICBPYmplY3Qua2V5cyhhbGlhc2VzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgIGxldCBhdHRyID0gYWxpYXNlc1sgbmFtZSBdXG5cbiAgICBpZiAodHlwZW9mIGF0dHIgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhdHRyID0gZGVzY3JpcHRvci5hdHRyWyBhdHRyIF1cblxuICAgICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZXNjcmlwdG9yLmF0dHJbIG5hbWUgXSA9IGF0dHJcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVzY3JpcHRvci5hdHRyWyBuYW1lIF0gPSBuZXcgVk9BdHRyRGVzY3JpcHRvcihuYW1lLCBhdHRyLnR5cGUsIGF0dHIuc2l6ZSwgYXR0ci5vZmZzZXQsIGF0dHIuYnl0ZU9mZnNldCwgISFhdHRyLnVuaWZvcm0sIGF0dHIuYXR0ck5hbWVzKVxuICAgIH1cbiAgfSlcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3Zfb19kZXNjcmlwdG9yL2NyZWF0ZV9hbGlhc2VzLmpzIiwiXG4vKipcbiAqIFByZS1hbGxvY2F0ZSBhIGJ1bmNoIG9mIHZlcnRleCBvYmplY3RzLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHZvUG9vbCwgbWF4QWxsb2NTaXplID0gMCkge1xuICBjb25zdCBtYXggPSB2b1Bvb2wuY2FwYWNpdHkgLSB2b1Bvb2wudXNlZENvdW50IC0gdm9Qb29sLmFsbG9jYXRlZENvdW50XG4gIGNvbnN0IGxlbiA9IHZvUG9vbC5hbGxvY2F0ZWRDb3VudCArIChtYXhBbGxvY1NpemUgPiAwICYmIG1heEFsbG9jU2l6ZSA8IG1heCA/IG1heEFsbG9jU2l6ZSA6IG1heClcblxuICBmb3IgKGxldCBpID0gdm9Qb29sLmFsbG9jYXRlZENvdW50OyBpIDwgbGVuOyBpKyspIHtcbiAgICBsZXQgdm9BcnJheSA9IHZvUG9vbC52b0FycmF5LnN1YmFycmF5KGkpXG5cbiAgICBsZXQgdmVydGV4T2JqZWN0ID0gdm9Qb29sLmRlc2NyaXB0b3IuY3JlYXRlVk8odm9BcnJheSlcbiAgICB2ZXJ0ZXhPYmplY3QuZnJlZSA9IHZvUG9vbC5mcmVlLmJpbmQodm9Qb29sLCB2ZXJ0ZXhPYmplY3QpXG5cbiAgICB2b1Bvb2wuYXZhaWxhYmxlVk9zLnB1c2godmVydGV4T2JqZWN0KVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS92X29fcG9vbC9jcmVhdGVfdmVydGV4X29iamVjdHMuanMiLCJjb25zdCBzbmFrZUNhc2UgPSByZXF1aXJlKCdsb2Rhc2gvc25ha2VDYXNlJylcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxlbmRNb2RlIHtcbiAgY29uc3RydWN0b3IgKGVuYWJsZSwgc2ZhY3RvciA9IG51bGwsIGRmYWN0b3IgPSBudWxsKSB7XG4gICAgdGhpcy5lbmFibGUgPSBlbmFibGVcbiAgICB0aGlzLnNmYWN0b3IgPSBzZmFjdG9yXG4gICAgdGhpcy5kZmFjdG9yID0gZGZhY3RvclxuICB9XG5cbiAgc2V0IHNmYWN0b3IgKHZhbHVlKSB7XG4gICAgdGhpcy5fc2ZhY3RvciA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzbmFrZUNhc2UodmFsdWUpLnRvVXBwZXJDYXNlKCkgOiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBzZmFjdG9yICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2ZhY3RvclxuICB9XG5cbiAgc2V0IGRmYWN0b3IgKHZhbHVlKSB7XG4gICAgdGhpcy5fZGZhY3RvciA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzbmFrZUNhc2UodmFsdWUpLnRvVXBwZXJDYXNlKCkgOiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBkZmFjdG9yICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGZhY3RvclxuICB9XG5cbiAgaXNFcXVhbCAob3RoZXIpIHtcbiAgICByZXR1cm4gb3RoZXIgJiYgdGhpcy5lbmFibGUgPT09IG90aGVyLmVuYWJsZSAmJiB0aGlzLl9zZmFjdG9yID09PSBvdGhlci5fc2ZhY3RvciAmJiB0aGlzLl9kZmFjdG9yID09PSBvdGhlci5fZGZhY3RvclxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS9ibGVuZF9tb2RlLmpzIiwidmFyIGNyZWF0ZUNvbXBvdW5kZXIgPSByZXF1aXJlKCcuL19jcmVhdGVDb21wb3VuZGVyJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICogLy8gPT4gJ2Zvb19iYXInXG4gKlxuICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICogLy8gPT4gJ2Zvb19iYXInXG4gKlxuICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gKiAvLyA9PiAnZm9vX2JhcidcbiAqL1xudmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc25ha2VDYXNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NuYWtlQ2FzZS5qc1xuLy8gbW9kdWxlIGlkID0gOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFycmF5UmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXlSZWR1Y2UnKSxcbiAgICBkZWJ1cnIgPSByZXF1aXJlKCcuL2RlYnVycicpLFxuICAgIHdvcmRzID0gcmVxdWlyZSgnLi93b3JkcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCI7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xudmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUNvbXBvdW5kZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUNvbXBvdW5kZXIuanNcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVJlZHVjZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlSZWR1Y2UuanNcbi8vIG1vZHVsZSBpZCA9IDk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkZWJ1cnJMZXR0ZXIgPSByZXF1aXJlKCcuL19kZWJ1cnJMZXR0ZXInKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG52YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICovXG52YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuLyoqXG4gKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAqIC8vID0+ICdkZWphIHZ1J1xuICovXG5mdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVidXJyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlYnVyci5qc1xuLy8gbW9kdWxlIGlkID0gMTAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlUHJvcGVydHlPZiA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eU9mJyk7XG5cbi8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbnZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAnXFx4ZGYnOiAnc3MnLFxuICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAncydcbn07XG5cbi8qKlxuICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAqL1xudmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVidXJyTGV0dGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWJ1cnJMZXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5T2Y7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eU9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDEwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qc1xuLy8gbW9kdWxlIGlkID0gMTA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFzY2lpV29yZHMgPSByZXF1aXJlKCcuL19hc2NpaVdvcmRzJyksXG4gICAgaGFzVW5pY29kZVdvcmQgPSByZXF1aXJlKCcuL19oYXNVbmljb2RlV29yZCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpLFxuICAgIHVuaWNvZGVXb3JkcyA9IHJlcXVpcmUoJy4vX3VuaWNvZGVXb3JkcycpO1xuXG4vKipcbiAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gKlxuICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICovXG5mdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHBhdHRlcm4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IHBhdHRlcm47XG5cbiAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3b3JkcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC93b3Jkcy5qc1xuLy8gbW9kdWxlIGlkID0gMTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xudmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4vKipcbiAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzY2lpV29yZHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FzY2lpV29yZHMuanNcbi8vIG1vZHVsZSBpZCA9IDEwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG52YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezIsfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzVW5pY29kZVdvcmQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGVXb3JkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc09yZExvd2VyID0gJ1xcXFxkKig/Oig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpXFxcXGIpJyxcbiAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/Oig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpXFxcXGIpJyxcbiAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXE7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG52YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICByc09yZFVwcGVyLFxuICByc09yZExvd2VyLFxuICByc0RpZ2l0cyxcbiAgcnNFbW9qaVxuXS5qb2luKCd8JyksICdnJyk7XG5cbi8qKlxuICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmljb2RlV29yZHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3VuaWNvZGVXb3Jkcy5qc1xuLy8gbW9kdWxlIGlkID0gMTExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBNYXQ0IGZyb20gJy4uL3V0aWxzL21hdDQnXG5pbXBvcnQgU2hhZGVyVW5pZm9ybVZhcmlhYmxlIGZyb20gJy4uL2NvcmUvc2hhZGVyX3VuaWZvcm1fdmFyaWFibGUnXG5cbmNvbnN0IFVOSUZPUk1fTkFNRSA9ICd2aWV3TWF0cml4J1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZGVzaXJlZFdpZHRoXSAtIGRlc2lyZWQgd2lkdGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5kZXNpcmVkSGVpZ2h0XSAtIGRlc2lyZWQgaGVpZ2h0XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucGl4ZWxSYXRpb10gLSBwaXhlbCByYXRpb1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNpemVGaXRdIC0gYGNvdmVyYCwgYGNvbnRhaW5gIG9yIGBmaWxsYFxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnVuaWZvcm1OYW1lPSd2aWV3TWF0cml4J10gLSBuYW1lIG9mIHRoZSB1bmlmb3JtIHZhbHVlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3Rpb24ge1xuICBjb25zdHJ1Y3RvciAoeyBkZXNpcmVkV2lkdGgsIGRlc2lyZWRIZWlnaHQsIHBpeGVsUmF0aW8sIHNpemVGaXQsIHVuaWZvcm1OYW1lIH0pIHtcbiAgICB0aGlzLmRlc2lyZWRXaWR0aCA9IGRlc2lyZWRXaWR0aFxuICAgIHRoaXMuZGVzaXJlZEhlaWdodCA9IGRlc2lyZWRIZWlnaHRcbiAgICB0aGlzLnBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvXG4gICAgdGhpcy5zaXplRml0ID0gc2l6ZUZpdFxuICAgIHRoaXMudW5pZm9ybSA9IG5ldyBTaGFkZXJVbmlmb3JtVmFyaWFibGUodW5pZm9ybU5hbWUgfHwgVU5JRk9STV9OQU1FLCBuZXcgTWF0NCgpKVxuICAgIHRoaXMud2lkdGggPSAwXG4gICAgdGhpcy5oZWlnaHQgPSAwXG4gIH1cblxuICB1cGRhdGVPcnRobyAod2lkdGgsIGhlaWdodCkge1xuICAgIGlmICh3aWR0aCAhPT0gdGhpcy53aWR0aCB8fCBoZWlnaHQgIT09IHRoaXMuaGVpZ2h0KSB7XG4gICAgICB0aGlzLndpZHRoID0gd2lkdGhcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0XG4gICAgICAvLyB0aGlzLnVuaWZvcm0udmFsdWUub3J0aG8od2lkdGgsIGhlaWdodClcbiAgICAgIC8vIFRPRE8gZW5hYmxlIHBlcnNwZWN0aXZlIHdpdGggZGlzdGFuY2VcbiAgICAgIHRoaXMudW5pZm9ybS52YWx1ZS5wZXJzcGVjdGl2ZSh3aWR0aCwgaGVpZ2h0LCAxMDApXG4gICAgICB0aGlzLnVuaWZvcm0udG91Y2goKVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSAoY3VycmVudFdpZHRoLCBjdXJyZW50SGVpZ2h0KSB7XG4gICAgLy8gVE9ETyBwaXhlbFJhdGlvIGFuZCBjdXJyZW50UGl4ZWxSYXRpb1xuICAgIGlmICh0aGlzLnNpemVGaXQgPT09ICdmaWxsJyAmJiB0aGlzLmRlc2lyZWRXaWR0aCA+IDAgJiYgdGhpcy5kZXNpcmVkSGVpZ2h0ID4gMCkge1xuICAgICAgdGhpcy51cGRhdGVPcnRobyh0aGlzLmRlc2lyZWRXaWR0aCwgdGhpcy5kZXNpcmVkSGVpZ2h0KVxuICAgIH0gZWxzZSBpZiAoKHRoaXMuc2l6ZUZpdCA9PT0gJ2NvdmVyJyB8fCB0aGlzLnNpemVGaXQgPT09ICdjb250YWluJykgJiZcbiAgICAgIHRoaXMuZGVzaXJlZFdpZHRoID49IDAgJiYgdGhpcy5kZXNpcmVkSGVpZ2h0ID49IDApIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRSYXRpbyA9IGN1cnJlbnRIZWlnaHQgLyBjdXJyZW50V2lkdGggICAgICAgICAgICAvLyA8MSA6IGxhbmRzY2FwZSwgPjEgOiBwb3J0cmFpdFxuICAgICAgY29uc3QgZGVzaXJlZFJhdGlvID0gdGhpcy5kZXNpcmVkSGVpZ2h0IC8gdGhpcy5kZXNpcmVkV2lkdGhcbiAgICAgIGNvbnN0IGlzQ292ZXIgPSB0aGlzLnNpemVGaXQgPT09ICdjb3ZlcidcblxuICAgICAgbGV0IHdpZHRoID0gdGhpcy5kZXNpcmVkV2lkdGhcbiAgICAgIGxldCBoZWlnaHQgPSB0aGlzLmRlc2lyZWRIZWlnaHRcblxuICAgICAgaWYgKCh0aGlzLmRlc2lyZWRXaWR0aCA9PT0gMCAmJiB0aGlzLmRlc2lyZWRIZWlnaHQpIHx8IGN1cnJlbnRSYXRpbyA8IGRlc2lyZWRSYXRpbykge1xuICAgICAgICB3aWR0aCA9ICh0aGlzLmRlc2lyZWRIZWlnaHQgLyBjdXJyZW50SGVpZ2h0KSAqIGN1cnJlbnRXaWR0aFxuICAgICAgICBpZiAoaXNDb3Zlcikge1xuICAgICAgICAgIGNvbnN0IGZhY3RvciA9IHRoaXMuZGVzaXJlZFdpZHRoIC8gd2lkdGhcbiAgICAgICAgICB3aWR0aCAqPSBmYWN0b3JcbiAgICAgICAgICBoZWlnaHQgKj0gZmFjdG9yXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKHRoaXMuZGVzaXJlZFdpZHRoICYmIHRoaXMuZGVzaXJlZEhlaWdodCA9PT0gMCkgfHwgY3VycmVudFJhdGlvID4gZGVzaXJlZFJhdGlvKSB7XG4gICAgICAgIGhlaWdodCA9ICh0aGlzLmRlc2lyZWRXaWR0aCAvIGN1cnJlbnRXaWR0aCkgKiBjdXJyZW50SGVpZ2h0XG4gICAgICAgIGlmIChpc0NvdmVyKSB7XG4gICAgICAgICAgY29uc3QgZmFjdG9yID0gdGhpcy5kZXNpcmVkSGVpZ2h0IC8gaGVpZ2h0XG4gICAgICAgICAgd2lkdGggKj0gZmFjdG9yXG4gICAgICAgICAgaGVpZ2h0ICo9IGZhY3RvclxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlT3J0aG8od2lkdGgsIGhlaWdodClcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9jb3JlL3Byb2plY3Rpb24uanMiLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgZ2wtbWF0cml4IC0gSGlnaCBwZXJmb3JtYW5jZSBtYXRyaXggYW5kIHZlY3RvciBvcGVyYXRpb25zXG4gKiBAYXV0aG9yIEJyYW5kb24gSm9uZXNcbiAqIEBhdXRob3IgQ29saW4gTWFjS2VuemllIElWXG4gKiBAdmVyc2lvbiAyLjQuMFxuICovXG5cbi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG4vLyBFTkQgSEVBREVSXG5cbmltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2dsLW1hdHJpeC9jb21tb25cIjtcbmltcG9ydCAqIGFzIG1hdDIgZnJvbSBcIi4vZ2wtbWF0cml4L21hdDJcIjtcbmltcG9ydCAqIGFzIG1hdDJkIGZyb20gXCIuL2dsLW1hdHJpeC9tYXQyZFwiO1xuaW1wb3J0ICogYXMgbWF0MyBmcm9tIFwiLi9nbC1tYXRyaXgvbWF0M1wiO1xuaW1wb3J0ICogYXMgbWF0NCBmcm9tIFwiLi9nbC1tYXRyaXgvbWF0NFwiO1xuaW1wb3J0ICogYXMgcXVhdCBmcm9tIFwiLi9nbC1tYXRyaXgvcXVhdFwiO1xuaW1wb3J0ICogYXMgdmVjMiBmcm9tIFwiLi9nbC1tYXRyaXgvdmVjMlwiO1xuaW1wb3J0ICogYXMgdmVjMyBmcm9tIFwiLi9nbC1tYXRyaXgvdmVjM1wiO1xuaW1wb3J0ICogYXMgdmVjNCBmcm9tIFwiLi9nbC1tYXRyaXgvdmVjNFwiO1xuXG5leHBvcnQge1xuICBnbE1hdHJpeCxcbiAgbWF0MiwgbWF0MmQsIG1hdDMsIG1hdDQsXG4gIHF1YXQsXG4gIHZlYzIsIHZlYzMsIHZlYzQsXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogQ29weXJpZ2h0IChjKSAyMDE1LCBCcmFuZG9uIEpvbmVzLCBDb2xpbiBNYWNLZW56aWUgSVYuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS4gKi9cblxuaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uXCJcblxuLyoqXG4gKiAyeDIgTWF0cml4XG4gKiBAbW9kdWxlIG1hdDJcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0MlxuICpcbiAqIEByZXR1cm5zIHttYXQyfSBhIG5ldyAyeDIgbWF0cml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIGxldCBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgb3V0WzBdID0gMTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDIgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IGEgbWF0cml4IHRvIGNsb25lXG4gKiBAcmV0dXJucyB7bWF0Mn0gYSBuZXcgMngyIG1hdHJpeFxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICBsZXQgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDIgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgbWF0MiB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXQyIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEByZXR1cm5zIHttYXQyfSBvdXQgQSBuZXcgMngyIG1hdHJpeFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyhtMDAsIG0wMSwgbTEwLCBtMTEpIHtcbiAgbGV0IG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICBvdXRbMF0gPSBtMDA7XG4gIG91dFsxXSA9IG0wMTtcbiAgb3V0WzJdID0gbTEwO1xuICBvdXRbM10gPSBtMTE7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MiB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMTAsIG0xMSkge1xuICBvdXRbMF0gPSBtMDA7XG4gIG91dFsxXSA9IG0wMTtcbiAgb3V0WzJdID0gbTEwO1xuICBvdXRbM10gPSBtMTE7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlXG4gIC8vIHNvbWUgdmFsdWVzXG4gIGlmIChvdXQgPT09IGEpIHtcbiAgICBsZXQgYTEgPSBhWzFdO1xuICAgIG91dFsxXSA9IGFbMl07XG4gICAgb3V0WzJdID0gYTE7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzJdO1xuICAgIG91dFsyXSA9IGFbMV07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDJcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gIGxldCBhMCA9IGFbMF0sIGExID0gYVsxXSwgYTIgPSBhWzJdLCBhMyA9IGFbM107XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICBsZXQgZGV0ID0gYTAgKiBhMyAtIGEyICogYTE7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgb3V0WzBdID0gIGEzICogZGV0O1xuICBvdXRbMV0gPSAtYTEgKiBkZXQ7XG4gIG91dFsyXSA9IC1hMiAqIGRldDtcbiAgb3V0WzNdID0gIGEwICogZGV0O1xuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcbiAgLy8gQ2FjaGluZyB0aGlzIHZhbHVlIGlzIG5lc3NlY2FyeSBpZiBvdXQgPT0gYVxuICBsZXQgYTAgPSBhWzBdO1xuICBvdXRbMF0gPSAgYVszXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICBvdXRbM10gPSAgYTA7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDJcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgcmV0dXJuIGFbMF0gKiBhWzNdIC0gYVsyXSAqIGFbMV07XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbWF0MidzXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIGxldCBhMCA9IGFbMF0sIGExID0gYVsxXSwgYTIgPSBhWzJdLCBhMyA9IGFbM107XG4gIGxldCBiMCA9IGJbMF0sIGIxID0gYlsxXSwgYjIgPSBiWzJdLCBiMyA9IGJbM107XG4gIG91dFswXSA9IGEwICogYjAgKyBhMiAqIGIxO1xuICBvdXRbMV0gPSBhMSAqIGIwICsgYTMgKiBiMTtcbiAgb3V0WzJdID0gYTAgKiBiMiArIGEyICogYjM7XG4gIG91dFszXSA9IGExICogYjIgKyBhMyAqIGIzO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQyIGJ5IHRoZSBnaXZlbiBhbmdsZVxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgbGV0IGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXTtcbiAgbGV0IHMgPSBNYXRoLnNpbihyYWQpO1xuICBsZXQgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGEwICogIGMgKyBhMiAqIHM7XG4gIG91dFsxXSA9IGExICogIGMgKyBhMyAqIHM7XG4gIG91dFsyXSA9IGEwICogLXMgKyBhMiAqIGM7XG4gIG91dFszXSA9IGExICogLXMgKyBhMyAqIGM7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQyIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHt2ZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgbGV0IGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXTtcbiAgbGV0IHYwID0gdlswXSwgdjEgPSB2WzFdO1xuICBvdXRbMF0gPSBhMCAqIHYwO1xuICBvdXRbMV0gPSBhMSAqIHYwO1xuICBvdXRbMl0gPSBhMiAqIHYxO1xuICBvdXRbM10gPSBhMyAqIHYxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0Mi5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQyLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IG1hdDIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQpIHtcbiAgbGV0IHMgPSBNYXRoLnNpbihyYWQpO1xuICBsZXQgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IHM7XG4gIG91dFsyXSA9IC1zO1xuICBvdXRbM10gPSBjO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0Mi5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQyLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgbWF0MiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHt2ZWMyfSB2IFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tU2NhbGluZyhvdXQsIHYpIHtcbiAgb3V0WzBdID0gdlswXTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gdlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuICdtYXQyKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJyknO1xufVxuXG4vKipcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBtYXRyaXggdG8gY2FsY3VsYXRlIEZyb2Jlbml1cyBub3JtIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybihNYXRoLnNxcnQoTWF0aC5wb3coYVswXSwgMikgKyBNYXRoLnBvdyhhWzFdLCAyKSArIE1hdGgucG93KGFbMl0sIDIpICsgTWF0aC5wb3coYVszXSwgMikpKVxufVxuXG4vKipcbiAqIFJldHVybnMgTCwgRCBhbmQgVSBtYXRyaWNlcyAoTG93ZXIgdHJpYW5ndWxhciwgRGlhZ29uYWwgYW5kIFVwcGVyIHRyaWFuZ3VsYXIpIGJ5IGZhY3Rvcml6aW5nIHRoZSBpbnB1dCBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0Mn0gTCB0aGUgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0Mn0gRCB0aGUgZGlhZ29uYWwgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IFUgdGhlIHVwcGVyIHRyaWFuZ3VsYXIgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGlucHV0IG1hdHJpeCB0byBmYWN0b3JpemVcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gTERVKEwsIEQsIFUsIGEpIHtcbiAgTFsyXSA9IGFbMl0vYVswXTtcbiAgVVswXSA9IGFbMF07XG4gIFVbMV0gPSBhWzFdO1xuICBVWzNdID0gYVszXSAtIExbMl0gKiBVWzFdO1xuICByZXR1cm4gW0wsIEQsIFVdO1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIG1hdDInc1xuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHttYXQyfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHttYXQyfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge21hdDJ9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICBsZXQgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdO1xuICBsZXQgYjAgPSBiWzBdLCBiMSA9IGJbMV0sIGIyID0gYlsyXSwgYjMgPSBiWzNdO1xuICByZXR1cm4gKE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkpO1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIG1hdDIncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyAoYlswXSAqIHNjYWxlKTtcbiAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICBvdXRbMl0gPSBhWzJdICsgKGJbMl0gKiBzY2FsZSk7XG4gIG91dFszXSA9IGFbM10gKyAoYlszXSAqIHNjYWxlKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDIubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IG11bCA9IG11bHRpcGx5O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5zdWJ0cmFjdH1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgc3ViID0gc3VidHJhY3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC9tYXQyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogQ29weXJpZ2h0IChjKSAyMDE1LCBCcmFuZG9uIEpvbmVzLCBDb2xpbiBNYWNLZW56aWUgSVYuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS4gKi9cblxuaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uXCI7XG5cbi8qKlxuICogMngzIE1hdHJpeFxuICogQG1vZHVsZSBtYXQyZFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBtYXQyZCBjb250YWlucyBzaXggZWxlbWVudHMgZGVmaW5lZCBhczpcbiAqIDxwcmU+XG4gKiBbYSwgYywgdHgsXG4gKiAgYiwgZCwgdHldXG4gKiA8L3ByZT5cbiAqIFRoaXMgaXMgYSBzaG9ydCBmb3JtIGZvciB0aGUgM3gzIG1hdHJpeDpcbiAqIDxwcmU+XG4gKiBbYSwgYywgdHgsXG4gKiAgYiwgZCwgdHksXG4gKiAgMCwgMCwgMV1cbiAqIDwvcHJlPlxuICogVGhlIGxhc3Qgcm93IGlzIGlnbm9yZWQgc28gdGhlIGFycmF5IGlzIHNob3J0ZXIgYW5kIG9wZXJhdGlvbnMgYXJlIGZhc3Rlci5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0MmRcbiAqXG4gKiBAcmV0dXJucyB7bWF0MmR9IGEgbmV3IDJ4MyBtYXRyaXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDYpO1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0MmQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBhIG1hdHJpeCB0byBjbG9uZVxuICogQHJldHVybnMge21hdDJkfSBhIG5ldyAyeDMgbWF0cml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIGxldCBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg2KTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MmQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgbWF0MmQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXQyZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYSBDb21wb25lbnQgQSAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIENvbXBvbmVudCBCIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IGMgQ29tcG9uZW50IEMgKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gZCBDb21wb25lbnQgRCAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eCBDb21wb25lbnQgVFggKGluZGV4IDQpXG4gKiBAcGFyYW0ge051bWJlcn0gdHkgQ29tcG9uZW50IFRZIChpbmRleCA1KVxuICogQHJldHVybnMge21hdDJkfSBBIG5ldyBtYXQyZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyhhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgbGV0IG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDYpO1xuICBvdXRbMF0gPSBhO1xuICBvdXRbMV0gPSBiO1xuICBvdXRbMl0gPSBjO1xuICBvdXRbM10gPSBkO1xuICBvdXRbNF0gPSB0eDtcbiAgb3V0WzVdID0gdHk7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MmQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtOdW1iZXJ9IGEgQ29tcG9uZW50IEEgKGluZGV4IDApXG4gKiBAcGFyYW0ge051bWJlcn0gYiBDb21wb25lbnQgQiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIENvbXBvbmVudCBDIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IGQgQ29tcG9uZW50IEQgKGluZGV4IDMpXG4gKiBAcGFyYW0ge051bWJlcn0gdHggQ29tcG9uZW50IFRYIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IHR5IENvbXBvbmVudCBUWSAoaW5kZXggNSlcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgb3V0WzBdID0gYTtcbiAgb3V0WzFdID0gYjtcbiAgb3V0WzJdID0gYztcbiAgb3V0WzNdID0gZDtcbiAgb3V0WzRdID0gdHg7XG4gIG91dFs1XSA9IHR5O1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEludmVydHMgYSBtYXQyZFxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgbGV0IGFhID0gYVswXSwgYWIgPSBhWzFdLCBhYyA9IGFbMl0sIGFkID0gYVszXTtcbiAgbGV0IGF0eCA9IGFbNF0sIGF0eSA9IGFbNV07XG5cbiAgbGV0IGRldCA9IGFhICogYWQgLSBhYiAqIGFjO1xuICBpZighZGV0KXtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgb3V0WzBdID0gYWQgKiBkZXQ7XG4gIG91dFsxXSA9IC1hYiAqIGRldDtcbiAgb3V0WzJdID0gLWFjICogZGV0O1xuICBvdXRbM10gPSBhYSAqIGRldDtcbiAgb3V0WzRdID0gKGFjICogYXR5IC0gYWQgKiBhdHgpICogZGV0O1xuICBvdXRbNV0gPSAoYWIgKiBhdHggLSBhYSAqIGF0eSkgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQyZFxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgcmV0dXJuIGFbMF0gKiBhWzNdIC0gYVsxXSAqIGFbMl07XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbWF0MmQnc1xuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQyZH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgbGV0IGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXSwgYTQgPSBhWzRdLCBhNSA9IGFbNV07XG4gIGxldCBiMCA9IGJbMF0sIGIxID0gYlsxXSwgYjIgPSBiWzJdLCBiMyA9IGJbM10sIGI0ID0gYls0XSwgYjUgPSBiWzVdO1xuICBvdXRbMF0gPSBhMCAqIGIwICsgYTIgKiBiMTtcbiAgb3V0WzFdID0gYTEgKiBiMCArIGEzICogYjE7XG4gIG91dFsyXSA9IGEwICogYjIgKyBhMiAqIGIzO1xuICBvdXRbM10gPSBhMSAqIGIyICsgYTMgKiBiMztcbiAgb3V0WzRdID0gYTAgKiBiNCArIGEyICogYjUgKyBhNDtcbiAgb3V0WzVdID0gYTEgKiBiNCArIGEzICogYjUgKyBhNTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MmQgYnkgdGhlIGdpdmVuIGFuZ2xlXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCkge1xuICBsZXQgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdLCBhNCA9IGFbNF0sIGE1ID0gYVs1XTtcbiAgbGV0IHMgPSBNYXRoLnNpbihyYWQpO1xuICBsZXQgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGEwICogIGMgKyBhMiAqIHM7XG4gIG91dFsxXSA9IGExICogIGMgKyBhMyAqIHM7XG4gIG91dFsyXSA9IGEwICogLXMgKyBhMiAqIGM7XG4gIG91dFszXSA9IGExICogLXMgKyBhMyAqIGM7XG4gIG91dFs0XSA9IGE0O1xuICBvdXRbNV0gPSBhNTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDJkIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgbGV0IGEwID0gYVswXSwgYTEgPSBhWzFdLCBhMiA9IGFbMl0sIGEzID0gYVszXSwgYTQgPSBhWzRdLCBhNSA9IGFbNV07XG4gIGxldCB2MCA9IHZbMF0sIHYxID0gdlsxXTtcbiAgb3V0WzBdID0gYTAgKiB2MDtcbiAgb3V0WzFdID0gYTEgKiB2MDtcbiAgb3V0WzJdID0gYTIgKiB2MTtcbiAgb3V0WzNdID0gYTMgKiB2MTtcbiAgb3V0WzRdID0gYTQ7XG4gIG91dFs1XSA9IGE1O1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZXMgdGhlIG1hdDJkIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdGhlIHZlYzIgdG8gdHJhbnNsYXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICBsZXQgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdLCBhNCA9IGFbNF0sIGE1ID0gYVs1XTtcbiAgbGV0IHYwID0gdlswXSwgdjEgPSB2WzFdO1xuICBvdXRbMF0gPSBhMDtcbiAgb3V0WzFdID0gYTE7XG4gIG91dFsyXSA9IGEyO1xuICBvdXRbM10gPSBhMztcbiAgb3V0WzRdID0gYTAgKiB2MCArIGEyICogdjEgKyBhNDtcbiAgb3V0WzVdID0gYTEgKiB2MCArIGEzICogdjEgKyBhNTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDJkLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDJkLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQpIHtcbiAgbGV0IHMgPSBNYXRoLnNpbihyYWQpLCBjID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gLXM7XG4gIG91dFszXSA9IGM7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQyZC5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHt2ZWMyfSB2IFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IHZbMV07XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0MmQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0MmQudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IG1hdDJkIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3ZlYzJ9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdikge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICBvdXRbNF0gPSB2WzBdO1xuICBvdXRbNV0gPSB2WzFdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQyZFxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiAnbWF0MmQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArXG4gICAgICAgICAgYVszXSArICcsICcgKyBhWzRdICsgJywgJyArIGFbNV0gKyAnKSc7XG59XG5cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4oTWF0aC5zcXJ0KE1hdGgucG93KGFbMF0sIDIpICsgTWF0aC5wb3coYVsxXSwgMikgKyBNYXRoLnBvdyhhWzJdLCAyKSArIE1hdGgucG93KGFbM10sIDIpICsgTWF0aC5wb3coYVs0XSwgMikgKyBNYXRoLnBvdyhhWzVdLCAyKSArIDEpKVxufVxuXG4vKipcbiAqIEFkZHMgdHdvIG1hdDJkJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICBvdXRbNF0gPSBhWzRdICogYjtcbiAgb3V0WzVdID0gYVs1XSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MmQncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQyZH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgKGJbMF0gKiBzY2FsZSk7XG4gIG91dFsxXSA9IGFbMV0gKyAoYlsxXSAqIHNjYWxlKTtcbiAgb3V0WzJdID0gYVsyXSArIChiWzJdICogc2NhbGUpO1xuICBvdXRbM10gPSBhWzNdICsgKGJbM10gKiBzY2FsZSk7XG4gIG91dFs0XSA9IGFbNF0gKyAoYls0XSAqIHNjYWxlKTtcbiAgb3V0WzVdID0gYVs1XSArIChiWzVdICogc2NhbGUpO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge21hdDJkfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXSAmJiBhWzRdID09PSBiWzRdICYmIGFbNV0gPT09IGJbNV07XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7bWF0MmR9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICBsZXQgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdLCBhNCA9IGFbNF0sIGE1ID0gYVs1XTtcbiAgbGV0IGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl0sIGIzID0gYlszXSwgYjQgPSBiWzRdLCBiNSA9IGJbNV07XG4gIHJldHVybiAoTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpKTtcbn1cblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDJkLm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBtdWwgPSBtdWx0aXBseTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDJkLnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzdWIgPSBzdWJ0cmFjdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9zcmMvZ2wtbWF0cml4L21hdDJkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogQ29weXJpZ2h0IChjKSAyMDE1LCBCcmFuZG9uIEpvbmVzLCBDb2xpbiBNYWNLZW56aWUgSVYuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS4gKi9cblxuaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uXCI7XG5cbi8qKlxuICogNHg0IE1hdHJpeFxuICogQG1vZHVsZSBtYXQ0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDRcbiAqXG4gKiBAcmV0dXJucyB7bWF0NH0gYSBuZXcgNHg0IG1hdHJpeFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gYSBtYXRyaXggdG8gY2xvbmVcbiAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIGxldCBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIG91dFs5XSA9IGFbOV07XG4gIG91dFsxMF0gPSBhWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdO1xuICBvdXRbMTJdID0gYVsxMl07XG4gIG91dFsxM10gPSBhWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdO1xuICBvdXRbMTVdID0gYVsxNV07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIG91dFs5XSA9IGFbOV07XG4gIG91dFsxMF0gPSBhWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdO1xuICBvdXRbMTJdID0gYVsxMl07XG4gIG91dFsxM10gPSBhWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdO1xuICBvdXRbMTVdID0gYVsxNV07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG1hdDQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxuICogQHJldHVybnMge21hdDR9IEEgbmV3IG1hdDRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gIGxldCBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0wMztcbiAgb3V0WzRdID0gbTEwO1xuICBvdXRbNV0gPSBtMTE7XG4gIG91dFs2XSA9IG0xMjtcbiAgb3V0WzddID0gbTEzO1xuICBvdXRbOF0gPSBtMjA7XG4gIG91dFs5XSA9IG0yMTtcbiAgb3V0WzEwXSA9IG0yMjtcbiAgb3V0WzExXSA9IG0yMztcbiAgb3V0WzEyXSA9IG0zMDtcbiAgb3V0WzEzXSA9IG0zMTtcbiAgb3V0WzE0XSA9IG0zMjtcbiAgb3V0WzE1XSA9IG0zMztcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQ0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0wMztcbiAgb3V0WzRdID0gbTEwO1xuICBvdXRbNV0gPSBtMTE7XG4gIG91dFs2XSA9IG0xMjtcbiAgb3V0WzddID0gbTEzO1xuICBvdXRbOF0gPSBtMjA7XG4gIG91dFs5XSA9IG0yMTtcbiAgb3V0WzEwXSA9IG0yMjtcbiAgb3V0WzExXSA9IG0yMztcbiAgb3V0WzEyXSA9IG0zMDtcbiAgb3V0WzEzXSA9IG0zMTtcbiAgb3V0WzE0XSA9IG0zMjtcbiAgb3V0WzE1XSA9IG0zMztcbiAgcmV0dXJuIG91dDtcbn1cblxuXG4vKipcbiAqIFNldCBhIG1hdDQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgb3V0WzBdID0gMTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMTtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDE7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgaWYgKG91dCA9PT0gYSkge1xuICAgIGxldCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdLCBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTIgPSBhWzZdLCBhMTMgPSBhWzddO1xuICAgIGxldCBhMjMgPSBhWzExXTtcblxuICAgIG91dFsxXSA9IGFbNF07XG4gICAgb3V0WzJdID0gYVs4XTtcbiAgICBvdXRbM10gPSBhWzEyXTtcbiAgICBvdXRbNF0gPSBhMDE7XG4gICAgb3V0WzZdID0gYVs5XTtcbiAgICBvdXRbN10gPSBhWzEzXTtcbiAgICBvdXRbOF0gPSBhMDI7XG4gICAgb3V0WzldID0gYTEyO1xuICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICBvdXRbMTJdID0gYTAzO1xuICAgIG91dFsxM10gPSBhMTM7XG4gICAgb3V0WzE0XSA9IGEyMztcbiAgfSBlbHNlIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbNF07XG4gICAgb3V0WzJdID0gYVs4XTtcbiAgICBvdXRbM10gPSBhWzEyXTtcbiAgICBvdXRbNF0gPSBhWzFdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs5XTtcbiAgICBvdXRbN10gPSBhWzEzXTtcbiAgICBvdXRbOF0gPSBhWzJdO1xuICAgIG91dFs5XSA9IGFbNl07XG4gICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICBvdXRbMTJdID0gYVszXTtcbiAgICBvdXRbMTNdID0gYVs3XTtcbiAgICBvdXRbMTRdID0gYVsxMV07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgbGV0IGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sIGEwMyA9IGFbM107XG4gIGxldCBhMTAgPSBhWzRdLCBhMTEgPSBhWzVdLCBhMTIgPSBhWzZdLCBhMTMgPSBhWzddO1xuICBsZXQgYTIwID0gYVs4XSwgYTIxID0gYVs5XSwgYTIyID0gYVsxMF0sIGEyMyA9IGFbMTFdO1xuICBsZXQgYTMwID0gYVsxMl0sIGEzMSA9IGFbMTNdLCBhMzIgPSBhWzE0XSwgYTMzID0gYVsxNV07XG5cbiAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgbGV0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgbGV0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgbGV0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgbGV0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgbGV0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgbGV0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgbGV0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgbGV0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gIG91dFsxXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICBvdXRbMl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XG4gIG91dFs0XSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICBvdXRbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcbiAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gIG91dFs3XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogZGV0O1xuICBvdXRbOF0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcbiAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gIG91dFsxMF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcbiAgb3V0WzExXSA9IChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApICogZGV0O1xuICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XG4gIG91dFsxM10gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGRldDtcbiAgb3V0WzE0XSA9IChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApICogZGV0O1xuICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhZGp1Z2F0ZSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xuICBsZXQgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXSwgYTAzID0gYVszXTtcbiAgbGV0IGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN107XG4gIGxldCBhMjAgPSBhWzhdLCBhMjEgPSBhWzldLCBhMjIgPSBhWzEwXSwgYTIzID0gYVsxMV07XG4gIGxldCBhMzAgPSBhWzEyXSwgYTMxID0gYVsxM10sIGEzMiA9IGFbMTRdLCBhMzMgPSBhWzE1XTtcblxuICBvdXRbMF0gID0gIChhMTEgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMSAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpICsgYTMxICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikpO1xuICBvdXRbMV0gID0gLShhMDEgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMikpO1xuICBvdXRbMl0gID0gIChhMDEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICBvdXRbM10gID0gLShhMDEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMSAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICBvdXRbNF0gID0gLShhMTAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpICsgYTMwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikpO1xuICBvdXRbNV0gID0gIChhMDAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMikpO1xuICBvdXRbNl0gID0gLShhMDAgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICBvdXRbN10gID0gIChhMDAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMCAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICBvdXRbOF0gID0gIChhMTAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSkpO1xuICBvdXRbOV0gID0gLShhMDAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMDEgKiBhMzMgLSBhMDMgKiBhMzEpICsgYTMwICogKGEwMSAqIGEyMyAtIGEwMyAqIGEyMSkpO1xuICBvdXRbMTBdID0gIChhMDAgKiAoYTExICogYTMzIC0gYTEzICogYTMxKSAtIGExMCAqIChhMDEgKiBhMzMgLSBhMDMgKiBhMzEpICsgYTMwICogKGEwMSAqIGExMyAtIGEwMyAqIGExMSkpO1xuICBvdXRbMTFdID0gLShhMDAgKiAoYTExICogYTIzIC0gYTEzICogYTIxKSAtIGExMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpICsgYTIwICogKGEwMSAqIGExMyAtIGEwMyAqIGExMSkpO1xuICBvdXRbMTJdID0gLShhMTAgKiAoYTIxICogYTMyIC0gYTIyICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzIgLSBhMTIgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMiAtIGExMiAqIGEyMSkpO1xuICBvdXRbMTNdID0gIChhMDAgKiAoYTIxICogYTMyIC0gYTIyICogYTMxKSAtIGEyMCAqIChhMDEgKiBhMzIgLSBhMDIgKiBhMzEpICsgYTMwICogKGEwMSAqIGEyMiAtIGEwMiAqIGEyMSkpO1xuICBvdXRbMTRdID0gLShhMDAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSAtIGExMCAqIChhMDEgKiBhMzIgLSBhMDIgKiBhMzEpICsgYTMwICogKGEwMSAqIGExMiAtIGEwMiAqIGExMSkpO1xuICBvdXRbMTVdID0gIChhMDAgKiAoYTExICogYTIyIC0gYTEyICogYTIxKSAtIGExMCAqIChhMDEgKiBhMjIgLSBhMDIgKiBhMjEpICsgYTIwICogKGEwMSAqIGExMiAtIGEwMiAqIGExMSkpO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICBsZXQgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXSwgYTAzID0gYVszXTtcbiAgbGV0IGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN107XG4gIGxldCBhMjAgPSBhWzhdLCBhMjEgPSBhWzldLCBhMjIgPSBhWzEwXSwgYTIzID0gYVsxMV07XG4gIGxldCBhMzAgPSBhWzEyXSwgYTMxID0gYVsxM10sIGEzMiA9IGFbMTRdLCBhMzMgPSBhWzE1XTtcblxuICBsZXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICBsZXQgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICBsZXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICBsZXQgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICBsZXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICBsZXQgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICBsZXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICBsZXQgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgcmV0dXJuIGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQ0c1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBsZXQgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXSwgYTAzID0gYVszXTtcbiAgbGV0IGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN107XG4gIGxldCBhMjAgPSBhWzhdLCBhMjEgPSBhWzldLCBhMjIgPSBhWzEwXSwgYTIzID0gYVsxMV07XG4gIGxldCBhMzAgPSBhWzEyXSwgYTMxID0gYVsxM10sIGEzMiA9IGFbMTRdLCBhMzMgPSBhWzE1XTtcblxuICAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcbiAgbGV0IGIwICA9IGJbMF0sIGIxID0gYlsxXSwgYjIgPSBiWzJdLCBiMyA9IGJbM107XG4gIG91dFswXSA9IGIwKmEwMCArIGIxKmExMCArIGIyKmEyMCArIGIzKmEzMDtcbiAgb3V0WzFdID0gYjAqYTAxICsgYjEqYTExICsgYjIqYTIxICsgYjMqYTMxO1xuICBvdXRbMl0gPSBiMCphMDIgKyBiMSphMTIgKyBiMiphMjIgKyBiMyphMzI7XG4gIG91dFszXSA9IGIwKmEwMyArIGIxKmExMyArIGIyKmEyMyArIGIzKmEzMztcblxuICBiMCA9IGJbNF07IGIxID0gYls1XTsgYjIgPSBiWzZdOyBiMyA9IGJbN107XG4gIG91dFs0XSA9IGIwKmEwMCArIGIxKmExMCArIGIyKmEyMCArIGIzKmEzMDtcbiAgb3V0WzVdID0gYjAqYTAxICsgYjEqYTExICsgYjIqYTIxICsgYjMqYTMxO1xuICBvdXRbNl0gPSBiMCphMDIgKyBiMSphMTIgKyBiMiphMjIgKyBiMyphMzI7XG4gIG91dFs3XSA9IGIwKmEwMyArIGIxKmExMyArIGIyKmEyMyArIGIzKmEzMztcblxuICBiMCA9IGJbOF07IGIxID0gYls5XTsgYjIgPSBiWzEwXTsgYjMgPSBiWzExXTtcbiAgb3V0WzhdID0gYjAqYTAwICsgYjEqYTEwICsgYjIqYTIwICsgYjMqYTMwO1xuICBvdXRbOV0gPSBiMCphMDEgKyBiMSphMTEgKyBiMiphMjEgKyBiMyphMzE7XG4gIG91dFsxMF0gPSBiMCphMDIgKyBiMSphMTIgKyBiMiphMjIgKyBiMyphMzI7XG4gIG91dFsxMV0gPSBiMCphMDMgKyBiMSphMTMgKyBiMiphMjMgKyBiMyphMzM7XG5cbiAgYjAgPSBiWzEyXTsgYjEgPSBiWzEzXTsgYjIgPSBiWzE0XTsgYjMgPSBiWzE1XTtcbiAgb3V0WzEyXSA9IGIwKmEwMCArIGIxKmExMCArIGIyKmEyMCArIGIzKmEzMDtcbiAgb3V0WzEzXSA9IGIwKmEwMSArIGIxKmExMSArIGIyKmEyMSArIGIzKmEzMTtcbiAgb3V0WzE0XSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjtcbiAgb3V0WzE1XSA9IGIwKmEwMyArIGIxKmExMyArIGIyKmEyMyArIGIzKmEzMztcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQ0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICBsZXQgeCA9IHZbMF0sIHkgPSB2WzFdLCB6ID0gdlsyXTtcbiAgbGV0IGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgbGV0IGExMCwgYTExLCBhMTIsIGExMztcbiAgbGV0IGEyMCwgYTIxLCBhMjIsIGEyMztcblxuICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzFdICogeCArIGFbNV0gKiB5ICsgYVs5XSAqIHogKyBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XG4gIH0gZWxzZSB7XG4gICAgYTAwID0gYVswXTsgYTAxID0gYVsxXTsgYTAyID0gYVsyXTsgYTAzID0gYVszXTtcbiAgICBhMTAgPSBhWzRdOyBhMTEgPSBhWzVdOyBhMTIgPSBhWzZdOyBhMTMgPSBhWzddO1xuICAgIGEyMCA9IGFbOF07IGEyMSA9IGFbOV07IGEyMiA9IGFbMTBdOyBhMjMgPSBhWzExXTtcblxuICAgIG91dFswXSA9IGEwMDsgb3V0WzFdID0gYTAxOyBvdXRbMl0gPSBhMDI7IG91dFszXSA9IGEwMztcbiAgICBvdXRbNF0gPSBhMTA7IG91dFs1XSA9IGExMTsgb3V0WzZdID0gYTEyOyBvdXRbN10gPSBhMTM7XG4gICAgb3V0WzhdID0gYTIwOyBvdXRbOV0gPSBhMjE7IG91dFsxMF0gPSBhMjI7IG91dFsxMV0gPSBhMjM7XG5cbiAgICBvdXRbMTJdID0gYTAwICogeCArIGExMCAqIHkgKyBhMjAgKiB6ICsgYVsxMl07XG4gICAgb3V0WzEzXSA9IGEwMSAqIHggKyBhMTEgKiB5ICsgYTIxICogeiArIGFbMTNdO1xuICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTtcbiAgICBvdXRbMTVdID0gYTAzICogeCArIGExMyAqIHkgKyBhMjMgKiB6ICsgYVsxNV07XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0NCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMyBub3QgdXNpbmcgdmVjdG9yaXphdGlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHt2ZWMzfSB2IHRoZSB2ZWMzIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgbGV0IHggPSB2WzBdLCB5ID0gdlsxXSwgeiA9IHZbMl07XG5cbiAgb3V0WzBdID0gYVswXSAqIHg7XG4gIG91dFsxXSA9IGFbMV0gKiB4O1xuICBvdXRbMl0gPSBhWzJdICogeDtcbiAgb3V0WzNdID0gYVszXSAqIHg7XG4gIG91dFs0XSA9IGFbNF0gKiB5O1xuICBvdXRbNV0gPSBhWzVdICogeTtcbiAgb3V0WzZdID0gYVs2XSAqIHk7XG4gIG91dFs3XSA9IGFbN10gKiB5O1xuICBvdXRbOF0gPSBhWzhdICogejtcbiAgb3V0WzldID0gYVs5XSAqIHo7XG4gIG91dFsxMF0gPSBhWzEwXSAqIHo7XG4gIG91dFsxMV0gPSBhWzExXSAqIHo7XG4gIG91dFsxMl0gPSBhWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdO1xuICBvdXRbMTRdID0gYVsxNF07XG4gIG91dFsxNV0gPSBhWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0NCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBnaXZlbiBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEBwYXJhbSB7dmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQsIGF4aXMpIHtcbiAgbGV0IHggPSBheGlzWzBdLCB5ID0gYXhpc1sxXSwgeiA9IGF4aXNbMl07XG4gIGxldCBsZW4gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbiAgbGV0IHMsIGMsIHQ7XG4gIGxldCBhMDAsIGEwMSwgYTAyLCBhMDM7XG4gIGxldCBhMTAsIGExMSwgYTEyLCBhMTM7XG4gIGxldCBhMjAsIGEyMSwgYTIyLCBhMjM7XG4gIGxldCBiMDAsIGIwMSwgYjAyO1xuICBsZXQgYjEwLCBiMTEsIGIxMjtcbiAgbGV0IGIyMCwgYjIxLCBiMjI7XG5cbiAgaWYgKE1hdGguYWJzKGxlbikgPCBnbE1hdHJpeC5FUFNJTE9OKSB7IHJldHVybiBudWxsOyB9XG5cbiAgbGVuID0gMSAvIGxlbjtcbiAgeCAqPSBsZW47XG4gIHkgKj0gbGVuO1xuICB6ICo9IGxlbjtcblxuICBzID0gTWF0aC5zaW4ocmFkKTtcbiAgYyA9IE1hdGguY29zKHJhZCk7XG4gIHQgPSAxIC0gYztcblxuICBhMDAgPSBhWzBdOyBhMDEgPSBhWzFdOyBhMDIgPSBhWzJdOyBhMDMgPSBhWzNdO1xuICBhMTAgPSBhWzRdOyBhMTEgPSBhWzVdOyBhMTIgPSBhWzZdOyBhMTMgPSBhWzddO1xuICBhMjAgPSBhWzhdOyBhMjEgPSBhWzldOyBhMjIgPSBhWzEwXTsgYTIzID0gYVsxMV07XG5cbiAgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG4gIGIwMCA9IHggKiB4ICogdCArIGM7IGIwMSA9IHkgKiB4ICogdCArIHogKiBzOyBiMDIgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgYjEwID0geCAqIHkgKiB0IC0geiAqIHM7IGIxMSA9IHkgKiB5ICogdCArIGM7IGIxMiA9IHogKiB5ICogdCArIHggKiBzO1xuICBiMjAgPSB4ICogeiAqIHQgKyB5ICogczsgYjIxID0geSAqIHogKiB0IC0geCAqIHM7IGIyMiA9IHogKiB6ICogdCArIGM7XG5cbiAgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgb3V0WzBdID0gYTAwICogYjAwICsgYTEwICogYjAxICsgYTIwICogYjAyO1xuICBvdXRbMV0gPSBhMDEgKiBiMDAgKyBhMTEgKiBiMDEgKyBhMjEgKiBiMDI7XG4gIG91dFsyXSA9IGEwMiAqIGIwMCArIGExMiAqIGIwMSArIGEyMiAqIGIwMjtcbiAgb3V0WzNdID0gYTAzICogYjAwICsgYTEzICogYjAxICsgYTIzICogYjAyO1xuICBvdXRbNF0gPSBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTI7XG4gIG91dFs1XSA9IGEwMSAqIGIxMCArIGExMSAqIGIxMSArIGEyMSAqIGIxMjtcbiAgb3V0WzZdID0gYTAyICogYjEwICsgYTEyICogYjExICsgYTIyICogYjEyO1xuICBvdXRbN10gPSBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTI7XG4gIG91dFs4XSA9IGEwMCAqIGIyMCArIGExMCAqIGIyMSArIGEyMCAqIGIyMjtcbiAgb3V0WzldID0gYTAxICogYjIwICsgYTExICogYjIxICsgYTIxICogYjIyO1xuICBvdXRbMTBdID0gYTAyICogYjIwICsgYTEyICogYjIxICsgYTIyICogYjIyO1xuICBvdXRbMTFdID0gYTAzICogYjIwICsgYTEzICogYjIxICsgYTIzICogYjIyO1xuXG4gIGlmIChhICE9PSBvdXQpIHsgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFggYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gIGxldCBzID0gTWF0aC5zaW4ocmFkKTtcbiAgbGV0IGMgPSBNYXRoLmNvcyhyYWQpO1xuICBsZXQgYTEwID0gYVs0XTtcbiAgbGV0IGExMSA9IGFbNV07XG4gIGxldCBhMTIgPSBhWzZdO1xuICBsZXQgYTEzID0gYVs3XTtcbiAgbGV0IGEyMCA9IGFbOF07XG4gIGxldCBhMjEgPSBhWzldO1xuICBsZXQgYTIyID0gYVsxMF07XG4gIGxldCBhMjMgPSBhWzExXTtcblxuICBpZiAoYSAhPT0gb3V0KSB7IC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIHJvd3NcbiAgICBvdXRbMF0gID0gYVswXTtcbiAgICBvdXRbMV0gID0gYVsxXTtcbiAgICBvdXRbMl0gID0gYVsyXTtcbiAgICBvdXRbM10gID0gYVszXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH1cblxuICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gIG91dFs0XSA9IGExMCAqIGMgKyBhMjAgKiBzO1xuICBvdXRbNV0gPSBhMTEgKiBjICsgYTIxICogcztcbiAgb3V0WzZdID0gYTEyICogYyArIGEyMiAqIHM7XG4gIG91dFs3XSA9IGExMyAqIGMgKyBhMjMgKiBzO1xuICBvdXRbOF0gPSBhMjAgKiBjIC0gYTEwICogcztcbiAgb3V0WzldID0gYTIxICogYyAtIGExMSAqIHM7XG4gIG91dFsxMF0gPSBhMjIgKiBjIC0gYTEyICogcztcbiAgb3V0WzExXSA9IGEyMyAqIGMgLSBhMTMgKiBzO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVkob3V0LCBhLCByYWQpIHtcbiAgbGV0IHMgPSBNYXRoLnNpbihyYWQpO1xuICBsZXQgYyA9IE1hdGguY29zKHJhZCk7XG4gIGxldCBhMDAgPSBhWzBdO1xuICBsZXQgYTAxID0gYVsxXTtcbiAgbGV0IGEwMiA9IGFbMl07XG4gIGxldCBhMDMgPSBhWzNdO1xuICBsZXQgYTIwID0gYVs4XTtcbiAgbGV0IGEyMSA9IGFbOV07XG4gIGxldCBhMjIgPSBhWzEwXTtcbiAgbGV0IGEyMyA9IGFbMTFdO1xuXG4gIGlmIChhICE9PSBvdXQpIHsgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgIG91dFs0XSAgPSBhWzRdO1xuICAgIG91dFs1XSAgPSBhWzVdO1xuICAgIG91dFs2XSAgPSBhWzZdO1xuICAgIG91dFs3XSAgPSBhWzddO1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfVxuXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgb3V0WzBdID0gYTAwICogYyAtIGEyMCAqIHM7XG4gIG91dFsxXSA9IGEwMSAqIGMgLSBhMjEgKiBzO1xuICBvdXRbMl0gPSBhMDIgKiBjIC0gYTIyICogcztcbiAgb3V0WzNdID0gYTAzICogYyAtIGEyMyAqIHM7XG4gIG91dFs4XSA9IGEwMCAqIHMgKyBhMjAgKiBjO1xuICBvdXRbOV0gPSBhMDEgKiBzICsgYTIxICogYztcbiAgb3V0WzEwXSA9IGEwMiAqIHMgKyBhMjIgKiBjO1xuICBvdXRbMTFdID0gYTAzICogcyArIGEyMyAqIGM7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBaIGF4aXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xuICBsZXQgcyA9IE1hdGguc2luKHJhZCk7XG4gIGxldCBjID0gTWF0aC5jb3MocmFkKTtcbiAgbGV0IGEwMCA9IGFbMF07XG4gIGxldCBhMDEgPSBhWzFdO1xuICBsZXQgYTAyID0gYVsyXTtcbiAgbGV0IGEwMyA9IGFbM107XG4gIGxldCBhMTAgPSBhWzRdO1xuICBsZXQgYTExID0gYVs1XTtcbiAgbGV0IGExMiA9IGFbNl07XG4gIGxldCBhMTMgPSBhWzddO1xuXG4gIGlmIChhICE9PSBvdXQpIHsgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICBvdXRbOF0gID0gYVs4XTtcbiAgICBvdXRbOV0gID0gYVs5XTtcbiAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfVxuXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgb3V0WzBdID0gYTAwICogYyArIGExMCAqIHM7XG4gIG91dFsxXSA9IGEwMSAqIGMgKyBhMTEgKiBzO1xuICBvdXRbMl0gPSBhMDIgKiBjICsgYTEyICogcztcbiAgb3V0WzNdID0gYTAzICogYyArIGExMyAqIHM7XG4gIG91dFs0XSA9IGExMCAqIGMgLSBhMDAgKiBzO1xuICBvdXRbNV0gPSBhMTEgKiBjIC0gYTAxICogcztcbiAgb3V0WzZdID0gYTEyICogYyAtIGEwMiAqIHM7XG4gIG91dFs3XSA9IGExMyAqIGMgLSBhMDMgKiBzO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDE7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF07XG4gIG91dFsxM10gPSB2WzFdO1xuICBvdXRbMTRdID0gdlsyXTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3ZlYzN9IHYgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSB2WzFdO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gdlsyXTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlIGFyb3VuZCBhIGdpdmVuIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlKGRlc3QsIGRlc3QsIHJhZCwgYXhpcyk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEBwYXJhbSB7dmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQsIGF4aXMpIHtcbiAgbGV0IHggPSBheGlzWzBdLCB5ID0gYXhpc1sxXSwgeiA9IGF4aXNbMl07XG4gIGxldCBsZW4gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbiAgbGV0IHMsIGMsIHQ7XG5cbiAgaWYgKE1hdGguYWJzKGxlbikgPCBnbE1hdHJpeC5FUFNJTE9OKSB7IHJldHVybiBudWxsOyB9XG5cbiAgbGVuID0gMSAvIGxlbjtcbiAgeCAqPSBsZW47XG4gIHkgKj0gbGVuO1xuICB6ICo9IGxlbjtcblxuICBzID0gTWF0aC5zaW4ocmFkKTtcbiAgYyA9IE1hdGguY29zKHJhZCk7XG4gIHQgPSAxIC0gYztcblxuICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICBvdXRbMF0gPSB4ICogeCAqIHQgKyBjO1xuICBvdXRbMV0gPSB5ICogeCAqIHQgKyB6ICogcztcbiAgb3V0WzJdID0geiAqIHggKiB0IC0geSAqIHM7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHggKiB5ICogdCAtIHogKiBzO1xuICBvdXRbNV0gPSB5ICogeSAqIHQgKyBjO1xuICBvdXRbNl0gPSB6ICogeSAqIHQgKyB4ICogcztcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0geCAqIHogKiB0ICsgeSAqIHM7XG4gIG91dFs5XSA9IHkgKiB6ICogdCAtIHggKiBzO1xuICBvdXRbMTBdID0geiAqIHogKiB0ICsgYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlWChkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWFJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIGxldCBzID0gTWF0aC5zaW4ocmFkKTtcbiAgbGV0IGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgb3V0WzBdICA9IDE7XG4gIG91dFsxXSAgPSAwO1xuICBvdXRbMl0gID0gMDtcbiAgb3V0WzNdICA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IGM7XG4gIG91dFs2XSA9IHM7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IC1zO1xuICBvdXRbMTBdID0gYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlWShkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWVJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIGxldCBzID0gTWF0aC5zaW4ocmFkKTtcbiAgbGV0IGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgb3V0WzBdICA9IGM7XG4gIG91dFsxXSAgPSAwO1xuICBvdXRbMl0gID0gLXM7XG4gIG91dFszXSAgPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSBzO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBaIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlWihkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWlJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIGxldCBzID0gTWF0aC5zaW4ocmFkKTtcbiAgbGV0IGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgb3V0WzBdICA9IGM7XG4gIG91dFsxXSAgPSBzO1xuICBvdXRbMl0gID0gMDtcbiAgb3V0WzNdICA9IDA7XG4gIG91dFs0XSA9IC1zO1xuICBvdXRbNV0gPSBjO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24gYW5kIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIHEsIHYpIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIGxldCB4ID0gcVswXSwgeSA9IHFbMV0sIHogPSBxWzJdLCB3ID0gcVszXTtcbiAgbGV0IHgyID0geCArIHg7XG4gIGxldCB5MiA9IHkgKyB5O1xuICBsZXQgejIgPSB6ICsgejtcblxuICBsZXQgeHggPSB4ICogeDI7XG4gIGxldCB4eSA9IHggKiB5MjtcbiAgbGV0IHh6ID0geCAqIHoyO1xuICBsZXQgeXkgPSB5ICogeTI7XG4gIGxldCB5eiA9IHkgKiB6MjtcbiAgbGV0IHp6ID0geiAqIHoyO1xuICBsZXQgd3ggPSB3ICogeDI7XG4gIGxldCB3eSA9IHcgKiB5MjtcbiAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gIG91dFswXSA9IDEgLSAoeXkgKyB6eik7XG4gIG91dFsxXSA9IHh5ICsgd3o7XG4gIG91dFsyXSA9IHh6IC0gd3k7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHh5IC0gd3o7XG4gIG91dFs1XSA9IDEgLSAoeHggKyB6eik7XG4gIG91dFs2XSA9IHl6ICsgd3g7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHh6ICsgd3k7XG4gIG91dFs5XSA9IHl6IC0gd3g7XG4gIG91dFsxMF0gPSAxIC0gKHh4ICsgeXkpO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF07XG4gIG91dFsxM10gPSB2WzFdO1xuICBvdXRbMTRdID0gdlsyXTtcbiAgb3V0WzE1XSA9IDE7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sXG4gKiAgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHRyYW5zbGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24ob3V0LCBtYXQpIHtcbiAgb3V0WzBdID0gbWF0WzEyXTtcbiAgb3V0WzFdID0gbWF0WzEzXTtcbiAgb3V0WzJdID0gbWF0WzE0XTtcblxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGVcbiAqICB3aXRoIGEgbm9ybWFsaXplZCBRdWF0ZXJuaW9uIHBhcmFtdGVyLCB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmVcbiAqICB0aGUgc2FtZSBhcyB0aGUgc2NhbGluZyB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudFxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NhbGluZyhvdXQsIG1hdCkge1xuICBsZXQgbTExID0gbWF0WzBdO1xuICBsZXQgbTEyID0gbWF0WzFdO1xuICBsZXQgbTEzID0gbWF0WzJdO1xuICBsZXQgbTIxID0gbWF0WzRdO1xuICBsZXQgbTIyID0gbWF0WzVdO1xuICBsZXQgbTIzID0gbWF0WzZdO1xuICBsZXQgbTMxID0gbWF0WzhdO1xuICBsZXQgbTMyID0gbWF0WzldO1xuICBsZXQgbTMzID0gbWF0WzEwXTtcblxuICBvdXRbMF0gPSBNYXRoLnNxcnQobTExICogbTExICsgbTEyICogbTEyICsgbTEzICogbTEzKTtcbiAgb3V0WzFdID0gTWF0aC5zcXJ0KG0yMSAqIG0yMSArIG0yMiAqIG0yMiArIG0yMyAqIG0yMyk7XG4gIG91dFsyXSA9IE1hdGguc3FydChtMzEgKiBtMzEgKyBtMzIgKiBtMzIgKyBtMzMgKiBtMzMpO1xuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSByb3RhdGlvbmFsIGNvbXBvbmVudFxuICogIG9mIGEgdHJhbnNmb3JtYXRpb24gbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoXG4gKiAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sIHRoZSByZXR1cm5lZCBxdWF0ZXJuaW9uIHdpbGwgYmUgdGhlXG4gKiAgc2FtZSBhcyB0aGUgcXVhdGVybmlvbiBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtIHtxdWF0fSBvdXQgUXVhdGVybmlvbiB0byByZWNlaXZlIHRoZSByb3RhdGlvbiBjb21wb25lbnRcbiAqIEBwYXJhbSB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um90YXRpb24ob3V0LCBtYXQpIHtcbiAgLy8gQWxnb3JpdGhtIHRha2VuIGZyb20gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cbiAgbGV0IHRyYWNlID0gbWF0WzBdICsgbWF0WzVdICsgbWF0WzEwXTtcbiAgbGV0IFMgPSAwO1xuXG4gIGlmICh0cmFjZSA+IDApIHtcbiAgICBTID0gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKSAqIDI7XG4gICAgb3V0WzNdID0gMC4yNSAqIFM7XG4gICAgb3V0WzBdID0gKG1hdFs2XSAtIG1hdFs5XSkgLyBTO1xuICAgIG91dFsxXSA9IChtYXRbOF0gLSBtYXRbMl0pIC8gUztcbiAgICBvdXRbMl0gPSAobWF0WzFdIC0gbWF0WzRdKSAvIFM7XG4gIH0gZWxzZSBpZiAoKG1hdFswXSA+IG1hdFs1XSkmKG1hdFswXSA+IG1hdFsxMF0pKSB7XG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBtYXRbMF0gLSBtYXRbNV0gLSBtYXRbMTBdKSAqIDI7XG4gICAgb3V0WzNdID0gKG1hdFs2XSAtIG1hdFs5XSkgLyBTO1xuICAgIG91dFswXSA9IDAuMjUgKiBTO1xuICAgIG91dFsxXSA9IChtYXRbMV0gKyBtYXRbNF0pIC8gUztcbiAgICBvdXRbMl0gPSAobWF0WzhdICsgbWF0WzJdKSAvIFM7XG4gIH0gZWxzZSBpZiAobWF0WzVdID4gbWF0WzEwXSkge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgbWF0WzVdIC0gbWF0WzBdIC0gbWF0WzEwXSkgKiAyO1xuICAgIG91dFszXSA9IChtYXRbOF0gLSBtYXRbMl0pIC8gUztcbiAgICBvdXRbMF0gPSAobWF0WzFdICsgbWF0WzRdKSAvIFM7XG4gICAgb3V0WzFdID0gMC4yNSAqIFM7XG4gICAgb3V0WzJdID0gKG1hdFs2XSArIG1hdFs5XSkgLyBTO1xuICB9IGVsc2Uge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgbWF0WzEwXSAtIG1hdFswXSAtIG1hdFs1XSkgKiAyO1xuICAgIG91dFszXSA9IChtYXRbMV0gLSBtYXRbNF0pIC8gUztcbiAgICBvdXRbMF0gPSAobWF0WzhdICsgbWF0WzJdKSAvIFM7XG4gICAgb3V0WzFdID0gKG1hdFs2XSArIG1hdFs5XSkgLyBTO1xuICAgIG91dFsyXSA9IDAuMjUgKiBTO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7dmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gcyBTY2FsaW5nIHZlY3RvclxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZShvdXQsIHEsIHYsIHMpIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIGxldCB4ID0gcVswXSwgeSA9IHFbMV0sIHogPSBxWzJdLCB3ID0gcVszXTtcbiAgbGV0IHgyID0geCArIHg7XG4gIGxldCB5MiA9IHkgKyB5O1xuICBsZXQgejIgPSB6ICsgejtcblxuICBsZXQgeHggPSB4ICogeDI7XG4gIGxldCB4eSA9IHggKiB5MjtcbiAgbGV0IHh6ID0geCAqIHoyO1xuICBsZXQgeXkgPSB5ICogeTI7XG4gIGxldCB5eiA9IHkgKiB6MjtcbiAgbGV0IHp6ID0geiAqIHoyO1xuICBsZXQgd3ggPSB3ICogeDI7XG4gIGxldCB3eSA9IHcgKiB5MjtcbiAgbGV0IHd6ID0gdyAqIHoyO1xuICBsZXQgc3ggPSBzWzBdO1xuICBsZXQgc3kgPSBzWzFdO1xuICBsZXQgc3ogPSBzWzJdO1xuXG4gIG91dFswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xuICBvdXRbMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgb3V0WzJdID0gKHh6IC0gd3kpICogc3g7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9ICh4eSAtIHd6KSAqIHN5O1xuICBvdXRbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgb3V0WzZdID0gKHl6ICsgd3gpICogc3k7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9ICh4eiArIHd5KSAqIHN6O1xuICBvdXRbOV0gPSAoeXogLSB3eCkgKiBzejtcbiAgb3V0WzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF07XG4gIG91dFsxM10gPSB2WzFdO1xuICBvdXRbMTRdID0gdlsyXTtcbiAgb3V0WzE1XSA9IDE7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZSwgcm90YXRpbmcgYW5kIHNjYWxpbmcgYXJvdW5kIHRoZSBnaXZlbiBvcmlnaW5cbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgb3JpZ2luKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCBuZWdhdGl2ZU9yaWdpbik7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gbyBUaGUgb3JpZ2luIHZlY3RvciBhcm91bmQgd2hpY2ggdG8gc2NhbGUgYW5kIHJvdGF0ZVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZU9yaWdpbihvdXQsIHEsIHYsIHMsIG8pIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIGxldCB4ID0gcVswXSwgeSA9IHFbMV0sIHogPSBxWzJdLCB3ID0gcVszXTtcbiAgbGV0IHgyID0geCArIHg7XG4gIGxldCB5MiA9IHkgKyB5O1xuICBsZXQgejIgPSB6ICsgejtcblxuICBsZXQgeHggPSB4ICogeDI7XG4gIGxldCB4eSA9IHggKiB5MjtcbiAgbGV0IHh6ID0geCAqIHoyO1xuICBsZXQgeXkgPSB5ICogeTI7XG4gIGxldCB5eiA9IHkgKiB6MjtcbiAgbGV0IHp6ID0geiAqIHoyO1xuICBsZXQgd3ggPSB3ICogeDI7XG4gIGxldCB3eSA9IHcgKiB5MjtcbiAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gIGxldCBzeCA9IHNbMF07XG4gIGxldCBzeSA9IHNbMV07XG4gIGxldCBzeiA9IHNbMl07XG5cbiAgbGV0IG94ID0gb1swXTtcbiAgbGV0IG95ID0gb1sxXTtcbiAgbGV0IG96ID0gb1syXTtcblxuICBvdXRbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgb3V0WzFdID0gKHh5ICsgd3opICogc3g7XG4gIG91dFsyXSA9ICh4eiAtIHd5KSAqIHN4O1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAoeHkgLSB3eikgKiBzeTtcbiAgb3V0WzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gIG91dFs2XSA9ICh5eiArIHd4KSAqIHN5O1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAoeHogKyB3eSkgKiBzejtcbiAgb3V0WzldID0gKHl6IC0gd3gpICogc3o7XG4gIG91dFsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdICsgb3ggLSAob3V0WzBdICogb3ggKyBvdXRbNF0gKiBveSArIG91dFs4XSAqIG96KTtcbiAgb3V0WzEzXSA9IHZbMV0gKyBveSAtIChvdXRbMV0gKiBveCArIG91dFs1XSAqIG95ICsgb3V0WzldICogb3opO1xuICBvdXRbMTRdID0gdlsyXSArIG96IC0gKG91dFsyXSAqIG94ICsgb3V0WzZdICogb3kgKyBvdXRbMTBdICogb3opO1xuICBvdXRbMTVdID0gMTtcblxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSA0eDQgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgbGV0IHggPSBxWzBdLCB5ID0gcVsxXSwgeiA9IHFbMl0sIHcgPSBxWzNdO1xuICBsZXQgeDIgPSB4ICsgeDtcbiAgbGV0IHkyID0geSArIHk7XG4gIGxldCB6MiA9IHogKyB6O1xuXG4gIGxldCB4eCA9IHggKiB4MjtcbiAgbGV0IHl4ID0geSAqIHgyO1xuICBsZXQgeXkgPSB5ICogeTI7XG4gIGxldCB6eCA9IHogKiB4MjtcbiAgbGV0IHp5ID0geiAqIHkyO1xuICBsZXQgenogPSB6ICogejI7XG4gIGxldCB3eCA9IHcgKiB4MjtcbiAgbGV0IHd5ID0gdyAqIHkyO1xuICBsZXQgd3ogPSB3ICogejI7XG5cbiAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gIG91dFsxXSA9IHl4ICsgd3o7XG4gIG91dFsyXSA9IHp4IC0gd3k7XG4gIG91dFszXSA9IDA7XG5cbiAgb3V0WzRdID0geXggLSB3ejtcbiAgb3V0WzVdID0gMSAtIHh4IC0geno7XG4gIG91dFs2XSA9IHp5ICsgd3g7XG4gIG91dFs3XSA9IDA7XG5cbiAgb3V0WzhdID0genggKyB3eTtcbiAgb3V0WzldID0genkgLSB3eDtcbiAgb3V0WzEwXSA9IDEgLSB4eCAtIHl5O1xuICBvdXRbMTFdID0gMDtcblxuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcblxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGZydXN0dW0gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJ1c3R1bShvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gIGxldCBybCA9IDEgLyAocmlnaHQgLSBsZWZ0KTtcbiAgbGV0IHRiID0gMSAvICh0b3AgLSBib3R0b20pO1xuICBsZXQgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMF0gPSAobmVhciAqIDIpICogcmw7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IChuZWFyICogMikgKiB0YjtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gKHJpZ2h0ICsgbGVmdCkgKiBybDtcbiAgb3V0WzldID0gKHRvcCArIGJvdHRvbSkgKiB0YjtcbiAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IChmYXIgKiBuZWFyICogMikgKiBuZjtcbiAgb3V0WzE1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlKG91dCwgZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIpIHtcbiAgbGV0IGYgPSAxLjAgLyBNYXRoLnRhbihmb3Z5IC8gMik7XG4gIGxldCBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gIG91dFswXSA9IGYgLyBhc3BlY3Q7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IGY7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgb3V0WzExXSA9IC0xO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAoMiAqIGZhciAqIG5lYXIpICogbmY7XG4gIG91dFsxNV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGZpZWxkIG9mIHZpZXcuXG4gKiBUaGlzIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGdlbmVyYXRpbmcgcHJvamVjdGlvbiBtYXRyaWNlcyB0byBiZSB1c2VkXG4gKiB3aXRoIHRoZSBzdGlsbCBleHBlcmllbWVudGFsIFdlYlZSIEFQSS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge09iamVjdH0gZm92IE9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiB1cERlZ3JlZXMsIGRvd25EZWdyZWVzLCBsZWZ0RGVncmVlcywgcmlnaHREZWdyZWVzXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmVGcm9tRmllbGRPZlZpZXcob3V0LCBmb3YsIG5lYXIsIGZhcikge1xuICBsZXQgdXBUYW4gPSBNYXRoLnRhbihmb3YudXBEZWdyZWVzICogTWF0aC5QSS8xODAuMCk7XG4gIGxldCBkb3duVGFuID0gTWF0aC50YW4oZm92LmRvd25EZWdyZWVzICogTWF0aC5QSS8xODAuMCk7XG4gIGxldCBsZWZ0VGFuID0gTWF0aC50YW4oZm92LmxlZnREZWdyZWVzICogTWF0aC5QSS8xODAuMCk7XG4gIGxldCByaWdodFRhbiA9IE1hdGgudGFuKGZvdi5yaWdodERlZ3JlZXMgKiBNYXRoLlBJLzE4MC4wKTtcbiAgbGV0IHhTY2FsZSA9IDIuMCAvIChsZWZ0VGFuICsgcmlnaHRUYW4pO1xuICBsZXQgeVNjYWxlID0gMi4wIC8gKHVwVGFuICsgZG93blRhbik7XG5cbiAgb3V0WzBdID0geFNjYWxlO1xuICBvdXRbMV0gPSAwLjA7XG4gIG91dFsyXSA9IDAuMDtcbiAgb3V0WzNdID0gMC4wO1xuICBvdXRbNF0gPSAwLjA7XG4gIG91dFs1XSA9IHlTY2FsZTtcbiAgb3V0WzZdID0gMC4wO1xuICBvdXRbN10gPSAwLjA7XG4gIG91dFs4XSA9IC0oKGxlZnRUYW4gLSByaWdodFRhbikgKiB4U2NhbGUgKiAwLjUpO1xuICBvdXRbOV0gPSAoKHVwVGFuIC0gZG93blRhbikgKiB5U2NhbGUgKiAwLjUpO1xuICBvdXRbMTBdID0gZmFyIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMTFdID0gLTEuMDtcbiAgb3V0WzEyXSA9IDAuMDtcbiAgb3V0WzEzXSA9IDAuMDtcbiAgb3V0WzE0XSA9IChmYXIgKiBuZWFyKSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzE1XSA9IDAuMDtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBvcnRob2dvbmFsIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gb3J0aG8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICBsZXQgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XG4gIGxldCBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgbGV0IG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzBdID0gLTIgKiBscjtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gLTIgKiBidDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBsb29rLWF0IG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBleWUgcG9zaXRpb24sIGZvY2FsIHBvaW50LCBhbmQgdXAgYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7dmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAqIEBwYXJhbSB7dmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxuICogQHBhcmFtIHt2ZWMzfSB1cCB2ZWMzIHBvaW50aW5nIHVwXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb29rQXQob3V0LCBleWUsIGNlbnRlciwgdXApIHtcbiAgbGV0IHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbjtcbiAgbGV0IGV5ZXggPSBleWVbMF07XG4gIGxldCBleWV5ID0gZXllWzFdO1xuICBsZXQgZXlleiA9IGV5ZVsyXTtcbiAgbGV0IHVweCA9IHVwWzBdO1xuICBsZXQgdXB5ID0gdXBbMV07XG4gIGxldCB1cHogPSB1cFsyXTtcbiAgbGV0IGNlbnRlcnggPSBjZW50ZXJbMF07XG4gIGxldCBjZW50ZXJ5ID0gY2VudGVyWzFdO1xuICBsZXQgY2VudGVyeiA9IGNlbnRlclsyXTtcblxuICBpZiAoTWF0aC5hYnMoZXlleCAtIGNlbnRlcngpIDwgZ2xNYXRyaXguRVBTSUxPTiAmJlxuICAgICAgTWF0aC5hYnMoZXlleSAtIGNlbnRlcnkpIDwgZ2xNYXRyaXguRVBTSUxPTiAmJlxuICAgICAgTWF0aC5hYnMoZXlleiAtIGNlbnRlcnopIDwgZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIHJldHVybiBtYXQ0LmlkZW50aXR5KG91dCk7XG4gIH1cblxuICB6MCA9IGV5ZXggLSBjZW50ZXJ4O1xuICB6MSA9IGV5ZXkgLSBjZW50ZXJ5O1xuICB6MiA9IGV5ZXogLSBjZW50ZXJ6O1xuXG4gIGxlbiA9IDEgLyBNYXRoLnNxcnQoejAgKiB6MCArIHoxICogejEgKyB6MiAqIHoyKTtcbiAgejAgKj0gbGVuO1xuICB6MSAqPSBsZW47XG4gIHoyICo9IGxlbjtcblxuICB4MCA9IHVweSAqIHoyIC0gdXB6ICogejE7XG4gIHgxID0gdXB6ICogejAgLSB1cHggKiB6MjtcbiAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuICBsZW4gPSBNYXRoLnNxcnQoeDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyKTtcbiAgaWYgKCFsZW4pIHtcbiAgICB4MCA9IDA7XG4gICAgeDEgPSAwO1xuICAgIHgyID0gMDtcbiAgfSBlbHNlIHtcbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHgwICo9IGxlbjtcbiAgICB4MSAqPSBsZW47XG4gICAgeDIgKj0gbGVuO1xuICB9XG5cbiAgeTAgPSB6MSAqIHgyIC0gejIgKiB4MTtcbiAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgeTIgPSB6MCAqIHgxIC0gejEgKiB4MDtcblxuICBsZW4gPSBNYXRoLnNxcnQoeTAgKiB5MCArIHkxICogeTEgKyB5MiAqIHkyKTtcbiAgaWYgKCFsZW4pIHtcbiAgICB5MCA9IDA7XG4gICAgeTEgPSAwO1xuICAgIHkyID0gMDtcbiAgfSBlbHNlIHtcbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHkwICo9IGxlbjtcbiAgICB5MSAqPSBsZW47XG4gICAgeTIgKj0gbGVuO1xuICB9XG5cbiAgb3V0WzBdID0geDA7XG4gIG91dFsxXSA9IHkwO1xuICBvdXRbMl0gPSB6MDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geDE7XG4gIG91dFs1XSA9IHkxO1xuICBvdXRbNl0gPSB6MTtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0geDI7XG4gIG91dFs5XSA9IHkyO1xuICBvdXRbMTBdID0gejI7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gLSh4MCAqIGV5ZXggKyB4MSAqIGV5ZXkgKyB4MiAqIGV5ZXopO1xuICBvdXRbMTNdID0gLSh5MCAqIGV5ZXggKyB5MSAqIGV5ZXkgKyB5MiAqIGV5ZXopO1xuICBvdXRbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xuICBvdXRbMTVdID0gMTtcblxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG1hdHJpeCB0aGF0IG1ha2VzIHNvbWV0aGluZyBsb29rIGF0IHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7dmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAqIEBwYXJhbSB7dmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxuICogQHBhcmFtIHt2ZWMzfSB1cCB2ZWMzIHBvaW50aW5nIHVwXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YXJnZXRUbyhvdXQsIGV5ZSwgdGFyZ2V0LCB1cCkge1xuICBsZXQgZXlleCA9IGV5ZVswXSxcbiAgICAgIGV5ZXkgPSBleWVbMV0sXG4gICAgICBleWV6ID0gZXllWzJdLFxuICAgICAgdXB4ID0gdXBbMF0sXG4gICAgICB1cHkgPSB1cFsxXSxcbiAgICAgIHVweiA9IHVwWzJdO1xuXG4gIGxldCB6MCA9IGV5ZXggLSB0YXJnZXRbMF0sXG4gICAgICB6MSA9IGV5ZXkgLSB0YXJnZXRbMV0sXG4gICAgICB6MiA9IGV5ZXogLSB0YXJnZXRbMl07XG5cbiAgbGV0IGxlbiA9IHowKnowICsgejEqejEgKyB6Mip6MjtcbiAgaWYgKGxlbiA+IDApIHtcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgejAgKj0gbGVuO1xuICAgIHoxICo9IGxlbjtcbiAgICB6MiAqPSBsZW47XG4gIH1cblxuICBsZXQgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxLFxuICAgICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyLFxuICAgICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuXG4gIG91dFswXSA9IHgwO1xuICBvdXRbMV0gPSB4MTtcbiAgb3V0WzJdID0geDI7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xuICBvdXRbNV0gPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgb3V0WzZdID0gejAgKiB4MSAtIHoxICogeDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHowO1xuICBvdXRbOV0gPSB6MTtcbiAgb3V0WzEwXSA9IHoyO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IGV5ZXg7XG4gIG91dFsxM10gPSBleWV5O1xuICBvdXRbMTRdID0gZXllejtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gJ21hdDQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnLCAnICtcbiAgICAgICAgICBhWzRdICsgJywgJyArIGFbNV0gKyAnLCAnICsgYVs2XSArICcsICcgKyBhWzddICsgJywgJyArXG4gICAgICAgICAgYVs4XSArICcsICcgKyBhWzldICsgJywgJyArIGFbMTBdICsgJywgJyArIGFbMTFdICsgJywgJyArXG4gICAgICAgICAgYVsxMl0gKyAnLCAnICsgYVsxM10gKyAnLCAnICsgYVsxNF0gKyAnLCAnICsgYVsxNV0gKyAnKSc7XG59XG5cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9iKGEpIHtcbiAgcmV0dXJuKE1hdGguc3FydChNYXRoLnBvdyhhWzBdLCAyKSArIE1hdGgucG93KGFbMV0sIDIpICsgTWF0aC5wb3coYVsyXSwgMikgKyBNYXRoLnBvdyhhWzNdLCAyKSArIE1hdGgucG93KGFbNF0sIDIpICsgTWF0aC5wb3coYVs1XSwgMikgKyBNYXRoLnBvdyhhWzZdLCAyKSArIE1hdGgucG93KGFbN10sIDIpICsgTWF0aC5wb3coYVs4XSwgMikgKyBNYXRoLnBvdyhhWzldLCAyKSArIE1hdGgucG93KGFbMTBdLCAyKSArIE1hdGgucG93KGFbMTFdLCAyKSArIE1hdGgucG93KGFbMTJdLCAyKSArIE1hdGgucG93KGFbMTNdLCAyKSArIE1hdGgucG93KGFbMTRdLCAyKSArIE1hdGgucG93KGFbMTVdLCAyKSApKVxufVxuXG4vKipcbiAqIEFkZHMgdHdvIG1hdDQnc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XTtcbiAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICBvdXRbOF0gPSBhWzhdICsgYls4XTtcbiAgb3V0WzldID0gYVs5XSArIGJbOV07XG4gIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdO1xuICBvdXRbMTFdID0gYVsxMV0gKyBiWzExXTtcbiAgb3V0WzEyXSA9IGFbMTJdICsgYlsxMl07XG4gIG91dFsxM10gPSBhWzEzXSArIGJbMTNdO1xuICBvdXRbMTRdID0gYVsxNF0gKyBiWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdICsgYlsxNV07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XG4gIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xuICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgb3V0WzZdID0gYVs2XSAtIGJbNl07XG4gIG91dFs3XSA9IGFbN10gLSBiWzddO1xuICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgb3V0WzldID0gYVs5XSAtIGJbOV07XG4gIG91dFsxMF0gPSBhWzEwXSAtIGJbMTBdO1xuICBvdXRbMTFdID0gYVsxMV0gLSBiWzExXTtcbiAgb3V0WzEyXSA9IGFbMTJdIC0gYlsxMl07XG4gIG91dFsxM10gPSBhWzEzXSAtIGJbMTNdO1xuICBvdXRbMTRdID0gYVsxNF0gLSBiWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdIC0gYlsxNV07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgb3V0WzZdID0gYVs2XSAqIGI7XG4gIG91dFs3XSA9IGFbN10gKiBiO1xuICBvdXRbOF0gPSBhWzhdICogYjtcbiAgb3V0WzldID0gYVs5XSAqIGI7XG4gIG91dFsxMF0gPSBhWzEwXSAqIGI7XG4gIG91dFsxMV0gPSBhWzExXSAqIGI7XG4gIG91dFsxMl0gPSBhWzEyXSAqIGI7XG4gIG91dFsxM10gPSBhWzEzXSAqIGI7XG4gIG91dFsxNF0gPSBhWzE0XSAqIGI7XG4gIG91dFsxNV0gPSBhWzE1XSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0NCdzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIChiWzBdICogc2NhbGUpO1xuICBvdXRbMV0gPSBhWzFdICsgKGJbMV0gKiBzY2FsZSk7XG4gIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgb3V0WzNdID0gYVszXSArIChiWzNdICogc2NhbGUpO1xuICBvdXRbNF0gPSBhWzRdICsgKGJbNF0gKiBzY2FsZSk7XG4gIG91dFs1XSA9IGFbNV0gKyAoYls1XSAqIHNjYWxlKTtcbiAgb3V0WzZdID0gYVs2XSArIChiWzZdICogc2NhbGUpO1xuICBvdXRbN10gPSBhWzddICsgKGJbN10gKiBzY2FsZSk7XG4gIG91dFs4XSA9IGFbOF0gKyAoYls4XSAqIHNjYWxlKTtcbiAgb3V0WzldID0gYVs5XSArIChiWzldICogc2NhbGUpO1xuICBvdXRbMTBdID0gYVsxMF0gKyAoYlsxMF0gKiBzY2FsZSk7XG4gIG91dFsxMV0gPSBhWzExXSArIChiWzExXSAqIHNjYWxlKTtcbiAgb3V0WzEyXSA9IGFbMTJdICsgKGJbMTJdICogc2NhbGUpO1xuICBvdXRbMTNdID0gYVsxM10gKyAoYlsxM10gKiBzY2FsZSk7XG4gIG91dFsxNF0gPSBhWzE0XSArIChiWzE0XSAqIHNjYWxlKTtcbiAgb3V0WzE1XSA9IGFbMTVdICsgKGJbMTVdICogc2NhbGUpO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge21hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7bWF0NH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiZcbiAgICAgICAgIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiZcbiAgICAgICAgIGFbOF0gPT09IGJbOF0gJiYgYVs5XSA9PT0gYls5XSAmJiBhWzEwXSA9PT0gYlsxMF0gJiYgYVsxMV0gPT09IGJbMTFdICYmXG4gICAgICAgICBhWzEyXSA9PT0gYlsxMl0gJiYgYVsxM10gPT09IGJbMTNdICYmIGFbMTRdID09PSBiWzE0XSAmJiBhWzE1XSA9PT0gYlsxNV07XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHttYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgbGV0IGEwICA9IGFbMF0sICBhMSAgPSBhWzFdLCAgYTIgID0gYVsyXSwgIGEzICA9IGFbM107XG4gIGxldCBhNCAgPSBhWzRdLCAgYTUgID0gYVs1XSwgIGE2ICA9IGFbNl0sICBhNyAgPSBhWzddO1xuICBsZXQgYTggID0gYVs4XSwgIGE5ICA9IGFbOV0sICBhMTAgPSBhWzEwXSwgYTExID0gYVsxMV07XG4gIGxldCBhMTIgPSBhWzEyXSwgYTEzID0gYVsxM10sIGExNCA9IGFbMTRdLCBhMTUgPSBhWzE1XTtcblxuICBsZXQgYjAgID0gYlswXSwgIGIxICA9IGJbMV0sICBiMiAgPSBiWzJdLCAgYjMgID0gYlszXTtcbiAgbGV0IGI0ICA9IGJbNF0sICBiNSAgPSBiWzVdLCAgYjYgID0gYls2XSwgIGI3ICA9IGJbN107XG4gIGxldCBiOCAgPSBiWzhdLCAgYjkgID0gYls5XSwgIGIxMCA9IGJbMTBdLCBiMTEgPSBiWzExXTtcbiAgbGV0IGIxMiA9IGJbMTJdLCBiMTMgPSBiWzEzXSwgYjE0ID0gYlsxNF0sIGIxNSA9IGJbMTVdO1xuXG4gIHJldHVybiAoTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE2KSwgTWF0aC5hYnMoYjYpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNyksIE1hdGguYWJzKGI3KSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhOCAtIGI4KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTgpLCBNYXRoLmFicyhiOCkpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTkgLSBiOSkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE5KSwgTWF0aC5hYnMoYjkpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGExMCAtIGIxMCkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMCksIE1hdGguYWJzKGIxMCkpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTExIC0gYjExKSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTExKSwgTWF0aC5hYnMoYjExKSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhMTIgLSBiMTIpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTIpLCBNYXRoLmFicyhiMTIpKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGExMyAtIGIxMykgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMyksIE1hdGguYWJzKGIxMykpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTE0IC0gYjE0KSA8PSBnbE1hdHJpeC5FUFNJTE9OKk1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTE0KSwgTWF0aC5hYnMoYjE0KSkgJiZcbiAgICAgICAgICBNYXRoLmFicyhhMTUgLSBiMTUpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTUpLCBNYXRoLmFicyhiMTUpKSk7XG59XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0Lm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBtdWwgPSBtdWx0aXBseTtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHN1YiA9IHN1YnRyYWN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L3NyYy9nbC1tYXRyaXgvbWF0NC5qc1xuLy8gbW9kdWxlIGlkID0gMTE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIENvcHlyaWdodCAoYykgMjAxNSwgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWLlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuICovXG5cbmltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vblwiXG5pbXBvcnQgKiBhcyBtYXQzIGZyb20gXCIuL21hdDNcIlxuaW1wb3J0ICogYXMgdmVjMyBmcm9tIFwiLi92ZWMzXCJcbmltcG9ydCAqIGFzIHZlYzQgZnJvbSBcIi4vdmVjNFwiXG5cbi8qKlxuICogUXVhdGVybmlvblxuICogQG1vZHVsZSBxdWF0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IHF1YXRcbiAqXG4gKiBAcmV0dXJucyB7cXVhdH0gYSBuZXcgcXVhdGVybmlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IDA7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgcXVhdCB0byB0aGUgaWRlbnRpdHkgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDA7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0cyBhIHF1YXQgZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYW5kIHJvdGF0aW9uIGF4aXMsXG4gKiB0aGVuIHJldHVybnMgaXQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgaW4gcmFkaWFuc1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEF4aXNBbmdsZShvdXQsIGF4aXMsIHJhZCkge1xuICByYWQgPSByYWQgKiAwLjU7XG4gIGxldCBzID0gTWF0aC5zaW4ocmFkKTtcbiAgb3V0WzBdID0gcyAqIGF4aXNbMF07XG4gIG91dFsxXSA9IHMgKiBheGlzWzFdO1xuICBvdXRbMl0gPSBzICogYXhpc1syXTtcbiAgb3V0WzNdID0gTWF0aC5jb3MocmFkKTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSByb3RhdGlvbiBheGlzIGFuZCBhbmdsZSBmb3IgYSBnaXZlblxuICogIHF1YXRlcm5pb24uIElmIGEgcXVhdGVybmlvbiBpcyBjcmVhdGVkIHdpdGhcbiAqICBzZXRBeGlzQW5nbGUsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzYW1lXG4gKiAgdmFsdWVzIGFzIHByb3ZpZGllZCBpbiB0aGUgb3JpZ2luYWwgcGFyYW1ldGVyIGxpc3RcbiAqICBPUiBmdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB2YWx1ZXMuXG4gKiBFeGFtcGxlOiBUaGUgcXVhdGVybmlvbiBmb3JtZWQgYnkgYXhpcyBbMCwgMCwgMV0gYW5kXG4gKiAgYW5nbGUgLTkwIGlzIHRoZSBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIGZvcm1lZCBieVxuICogIFswLCAwLCAxXSBhbmQgMjcwLiBUaGlzIG1ldGhvZCBmYXZvcnMgdGhlIGxhdHRlci5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dF9heGlzICBWZWN0b3IgcmVjZWl2aW5nIHRoZSBheGlzIG9mIHJvdGF0aW9uXG4gKiBAcGFyYW0gIHtxdWF0fSBxICAgICBRdWF0ZXJuaW9uIHRvIGJlIGRlY29tcG9zZWRcbiAqIEByZXR1cm4ge051bWJlcn0gICAgIEFuZ2xlLCBpbiByYWRpYW5zLCBvZiB0aGUgcm90YXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEF4aXNBbmdsZShvdXRfYXhpcywgcSkge1xuICBsZXQgcmFkID0gTWF0aC5hY29zKHFbM10pICogMi4wO1xuICBsZXQgcyA9IE1hdGguc2luKHJhZCAvIDIuMCk7XG4gIGlmIChzICE9IDAuMCkge1xuICAgIG91dF9heGlzWzBdID0gcVswXSAvIHM7XG4gICAgb3V0X2F4aXNbMV0gPSBxWzFdIC8gcztcbiAgICBvdXRfYXhpc1syXSA9IHFbMl0gLyBzO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHMgaXMgemVybywgcmV0dXJuIGFueSBheGlzIChubyByb3RhdGlvbiAtIGF4aXMgZG9lcyBub3QgbWF0dGVyKVxuICAgIG91dF9heGlzWzBdID0gMTtcbiAgICBvdXRfYXhpc1sxXSA9IDA7XG4gICAgb3V0X2F4aXNbMl0gPSAwO1xuICB9XG4gIHJldHVybiByYWQ7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBsZXQgYXggPSBhWzBdLCBheSA9IGFbMV0sIGF6ID0gYVsyXSwgYXcgPSBhWzNdO1xuICBsZXQgYnggPSBiWzBdLCBieSA9IGJbMV0sIGJ6ID0gYlsyXSwgYncgPSBiWzNdO1xuXG4gIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIHJhZCkge1xuICByYWQgKj0gMC41O1xuXG4gIGxldCBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdLCBhdyA9IGFbM107XG4gIGxldCBieCA9IE1hdGguc2luKHJhZCksIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieDtcbiAgb3V0WzFdID0gYXkgKiBidyArIGF6ICogYng7XG4gIG91dFsyXSA9IGF6ICogYncgLSBheSAqIGJ4O1xuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieDtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gIHJhZCAqPSAwLjU7XG5cbiAgbGV0IGF4ID0gYVswXSwgYXkgPSBhWzFdLCBheiA9IGFbMl0sIGF3ID0gYVszXTtcbiAgbGV0IGJ5ID0gTWF0aC5zaW4ocmFkKSwgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gIG91dFswXSA9IGF4ICogYncgLSBheiAqIGJ5O1xuICBvdXRbMV0gPSBheSAqIGJ3ICsgYXcgKiBieTtcbiAgb3V0WzJdID0gYXogKiBidyArIGF4ICogYnk7XG4gIG91dFszXSA9IGF3ICogYncgLSBheSAqIGJ5O1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWiBheGlzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcbiAgcmFkICo9IDAuNTtcblxuICBsZXQgYXggPSBhWzBdLCBheSA9IGFbMV0sIGF6ID0gYVsyXSwgYXcgPSBhWzNdO1xuICBsZXQgYnogPSBNYXRoLnNpbihyYWQpLCBidyA9IE1hdGguY29zKHJhZCk7XG5cbiAgb3V0WzBdID0gYXggKiBidyArIGF5ICogYno7XG4gIG91dFsxXSA9IGF5ICogYncgLSBheCAqIGJ6O1xuICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBiejtcbiAgb3V0WzNdID0gYXcgKiBidyAtIGF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgVyBjb21wb25lbnQgb2YgYSBxdWF0IGZyb20gdGhlIFgsIFksIGFuZCBaIGNvbXBvbmVudHMuXG4gKiBBc3N1bWVzIHRoYXQgcXVhdGVybmlvbiBpcyAxIHVuaXQgaW4gbGVuZ3RoLlxuICogQW55IGV4aXN0aW5nIFcgY29tcG9uZW50IHdpbGwgYmUgaWdub3JlZC5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBXIGNvbXBvbmVudCBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlVyhvdXQsIGEpIHtcbiAgbGV0IHggPSBhWzBdLCB5ID0gYVsxXSwgeiA9IGFbMl07XG5cbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgb3V0WzJdID0gejtcbiAgb3V0WzNdID0gTWF0aC5zcXJ0KE1hdGguYWJzKDEuMCAtIHggKiB4IC0geSAqIHkgLSB6ICogeikpO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xlcnAob3V0LCBhLCBiLCB0KSB7XG4gIC8vIGJlbmNobWFya3M6XG4gIC8vICAgIGh0dHA6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tc2xlcnAtaW1wbGVtZW50YXRpb25zXG4gIGxldCBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdLCBhdyA9IGFbM107XG4gIGxldCBieCA9IGJbMF0sIGJ5ID0gYlsxXSwgYnogPSBiWzJdLCBidyA9IGJbM107XG5cbiAgbGV0IG9tZWdhLCBjb3NvbSwgc2lub20sIHNjYWxlMCwgc2NhbGUxO1xuXG4gIC8vIGNhbGMgY29zaW5lXG4gIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcbiAgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG4gIGlmICggY29zb20gPCAwLjAgKSB7XG4gICAgY29zb20gPSAtY29zb207XG4gICAgYnggPSAtIGJ4O1xuICAgIGJ5ID0gLSBieTtcbiAgICBieiA9IC0gYno7XG4gICAgYncgPSAtIGJ3O1xuICB9XG4gIC8vIGNhbGN1bGF0ZSBjb2VmZmljaWVudHNcbiAgaWYgKCAoMS4wIC0gY29zb20pID4gMC4wMDAwMDEgKSB7XG4gICAgLy8gc3RhbmRhcmQgY2FzZSAoc2xlcnApXG4gICAgb21lZ2EgID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICBzaW5vbSAgPSBNYXRoLnNpbihvbWVnYSk7XG4gICAgc2NhbGUwID0gTWF0aC5zaW4oKDEuMCAtIHQpICogb21lZ2EpIC8gc2lub207XG4gICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tO1xuICB9IGVsc2Uge1xuICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgcXVhdGVybmlvbnMgYXJlIHZlcnkgY2xvc2VcbiAgICAvLyAgLi4uIHNvIHdlIGNhbiBkbyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uXG4gICAgc2NhbGUwID0gMS4wIC0gdDtcbiAgICBzY2FsZTEgPSB0O1xuICB9XG4gIC8vIGNhbGN1bGF0ZSBmaW5hbCB2YWx1ZXNcbiAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgb3V0WzFdID0gc2NhbGUwICogYXkgKyBzY2FsZTEgKiBieTtcbiAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcblxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2Ugb2YgYSBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICBsZXQgYTAgPSBhWzBdLCBhMSA9IGFbMV0sIGEyID0gYVsyXSwgYTMgPSBhWzNdO1xuICBsZXQgZG90ID0gYTAqYTAgKyBhMSphMSArIGEyKmEyICsgYTMqYTM7XG4gIGxldCBpbnZEb3QgPSBkb3QgPyAxLjAvZG90IDogMDtcblxuICAvLyBUT0RPOiBXb3VsZCBiZSBmYXN0ZXIgdG8gcmV0dXJuIFswLDAsMCwwXSBpbW1lZGlhdGVseSBpZiBkb3QgPT0gMFxuXG4gIG91dFswXSA9IC1hMCppbnZEb3Q7XG4gIG91dFsxXSA9IC1hMSppbnZEb3Q7XG4gIG91dFsyXSA9IC1hMippbnZEb3Q7XG4gIG91dFszXSA9IGEzKmludkRvdDtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb25qdWdhdGUgb2YgYSBxdWF0XG4gKiBJZiB0aGUgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGZ1bmN0aW9uIGlzIGZhc3RlciB0aGFuIHF1YXQuaW52ZXJzZSBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGNvbmp1Z2F0ZSBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uanVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIDN4MyByb3RhdGlvbiBtYXRyaXguXG4gKlxuICogTk9URTogVGhlIHJlc3VsdGFudCBxdWF0ZXJuaW9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyB5b3Ugc2hvdWxkIGJlIHN1cmVcbiAqIHRvIHJlbm9ybWFsaXplIHRoZSBxdWF0ZXJuaW9uIHlvdXJzZWxmIHdoZXJlIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7bWF0M30gbSByb3RhdGlvbiBtYXRyaXhcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDMob3V0LCBtKSB7XG4gIC8vIEFsZ29yaXRobSBpbiBLZW4gU2hvZW1ha2UncyBhcnRpY2xlIGluIDE5ODcgU0lHR1JBUEggY291cnNlIG5vdGVzXG4gIC8vIGFydGljbGUgXCJRdWF0ZXJuaW9uIENhbGN1bHVzIGFuZCBGYXN0IEFuaW1hdGlvblwiLlxuICBsZXQgZlRyYWNlID0gbVswXSArIG1bNF0gKyBtWzhdO1xuICBsZXQgZlJvb3Q7XG5cbiAgaWYgKCBmVHJhY2UgPiAwLjAgKSB7XG4gICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgIGZSb290ID0gTWF0aC5zcXJ0KGZUcmFjZSArIDEuMCk7ICAvLyAyd1xuICAgIG91dFszXSA9IDAuNSAqIGZSb290O1xuICAgIGZSb290ID0gMC41L2ZSb290OyAgLy8gMS8oNHcpXG4gICAgb3V0WzBdID0gKG1bNV0tbVs3XSkqZlJvb3Q7XG4gICAgb3V0WzFdID0gKG1bNl0tbVsyXSkqZlJvb3Q7XG4gICAgb3V0WzJdID0gKG1bMV0tbVszXSkqZlJvb3Q7XG4gIH0gZWxzZSB7XG4gICAgLy8gfHd8IDw9IDEvMlxuICAgIGxldCBpID0gMDtcbiAgICBpZiAoIG1bNF0gPiBtWzBdIClcbiAgICAgIGkgPSAxO1xuICAgIGlmICggbVs4XSA+IG1baSozK2ldIClcbiAgICAgIGkgPSAyO1xuICAgIGxldCBqID0gKGkrMSklMztcbiAgICBsZXQgayA9IChpKzIpJTM7XG5cbiAgICBmUm9vdCA9IE1hdGguc3FydChtW2kqMytpXS1tW2oqMytqXS1tW2sqMytrXSArIDEuMCk7XG4gICAgb3V0W2ldID0gMC41ICogZlJvb3Q7XG4gICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcbiAgICBvdXRbM10gPSAobVtqKjMra10gLSBtW2sqMytqXSkgKiBmUm9vdDtcbiAgICBvdXRbal0gPSAobVtqKjMraV0gKyBtW2kqMytqXSkgKiBmUm9vdDtcbiAgICBvdXRba10gPSAobVtrKjMraV0gKyBtW2kqMytrXSkgKiBmUm9vdDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gZXVsZXIgYW5nbGUgeCwgeSwgei5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7eH0gQW5nbGUgdG8gcm90YXRlIGFyb3VuZCBYIGF4aXMgaW4gZGVncmVlcy5cbiAqIEBwYXJhbSB7eX0gQW5nbGUgdG8gcm90YXRlIGFyb3VuZCBZIGF4aXMgaW4gZGVncmVlcy5cbiAqIEBwYXJhbSB7en0gQW5nbGUgdG8gcm90YXRlIGFyb3VuZCBaIGF4aXMgaW4gZGVncmVlcy5cbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUV1bGVyKG91dCwgeCwgeSwgeikge1xuICAgIGxldCBoYWxmVG9SYWQgPSAwLjUgKiBNYXRoLlBJIC8gMTgwLjA7XG4gICAgeCAqPSBoYWxmVG9SYWQ7XG4gICAgeSAqPSBoYWxmVG9SYWQ7XG4gICAgeiAqPSBoYWxmVG9SYWQ7XG5cbiAgICBsZXQgc3ggPSBNYXRoLnNpbih4KTtcbiAgICBsZXQgY3ggPSBNYXRoLmNvcyh4KTtcbiAgICBsZXQgc3kgPSBNYXRoLnNpbih5KTtcbiAgICBsZXQgY3kgPSBNYXRoLmNvcyh5KTtcbiAgICBsZXQgc3ogPSBNYXRoLnNpbih6KTtcbiAgICBsZXQgY3ogPSBNYXRoLmNvcyh6KTtcblxuICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHF1YXRlbmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuICdxdWF0KCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJyknO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcXVhdCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdGVybmlvbiB0byBjbG9uZVxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY2xvbmUgPSB2ZWM0LmNsb25lO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcXVhdCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZnJvbVZhbHVlcyA9IHZlYzQuZnJvbVZhbHVlcztcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgcXVhdCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIHNvdXJjZSBxdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGNvcHkgPSB2ZWM0LmNvcHk7XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgcXVhdCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzZXQgPSB2ZWM0LnNldDtcblxuLyoqXG4gKiBBZGRzIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBhZGQgPSB2ZWM0LmFkZDtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IG11bCA9IG11bHRpcGx5O1xuXG4vKipcbiAqIFNjYWxlcyBhIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzY2FsZSA9IHZlYzQuc2NhbGU7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBkb3QgPSB2ZWM0LmRvdDtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGxlcnAgPSB2ZWM0LmxlcnA7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGNvbnN0IGxlbmd0aCA9IHZlYzQubGVuZ3RoO1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5sZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGxlbiA9IGxlbmd0aDtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzcXVhcmVkTGVuZ3RoID0gdmVjNC5zcXVhcmVkTGVuZ3RoO1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5zcXVhcmVkTGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzcXJMZW4gPSBzcXVhcmVkTGVuZ3RoO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0ZXJuaW9uIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemUgPSB2ZWM0Lm5vcm1hbGl6ZTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBxdWF0ZXJuaW9ucyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtxdWF0fSBhIFRoZSBmaXJzdCBxdWF0ZXJuaW9uLlxuICogQHBhcmFtIHtxdWF0fSBiIFRoZSBzZWNvbmQgcXVhdGVybmlvbi5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgY29uc3QgZXhhY3RFcXVhbHMgPSB2ZWM0LmV4YWN0RXF1YWxzO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHF1YXRlcm5pb25zIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7cXVhdH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgY29uc3QgZXF1YWxzID0gdmVjNC5lcXVhbHM7XG5cbi8qKlxuICogU2V0cyBhIHF1YXRlcm5pb24gdG8gcmVwcmVzZW50IHRoZSBzaG9ydGVzdCByb3RhdGlvbiBmcm9tIG9uZVxuICogdmVjdG9yIHRvIGFub3RoZXIuXG4gKlxuICogQm90aCB2ZWN0b3JzIGFyZSBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoLlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvbi5cbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgaW5pdGlhbCB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgZGVzdGluYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBjb25zdCByb3RhdGlvblRvID0gKGZ1bmN0aW9uKCkge1xuICBsZXQgdG1wdmVjMyA9IHZlYzMuY3JlYXRlKCk7XG4gIGxldCB4VW5pdFZlYzMgPSB2ZWMzLmZyb21WYWx1ZXMoMSwwLDApO1xuICBsZXQgeVVuaXRWZWMzID0gdmVjMy5mcm9tVmFsdWVzKDAsMSwwKTtcblxuICByZXR1cm4gZnVuY3Rpb24ob3V0LCBhLCBiKSB7XG4gICAgbGV0IGRvdCA9IHZlYzMuZG90KGEsIGIpO1xuICAgIGlmIChkb3QgPCAtMC45OTk5OTkpIHtcbiAgICAgIHZlYzMuY3Jvc3ModG1wdmVjMywgeFVuaXRWZWMzLCBhKTtcbiAgICAgIGlmICh2ZWMzLmxlbih0bXB2ZWMzKSA8IDAuMDAwMDAxKVxuICAgICAgICB2ZWMzLmNyb3NzKHRtcHZlYzMsIHlVbml0VmVjMywgYSk7XG4gICAgICB2ZWMzLm5vcm1hbGl6ZSh0bXB2ZWMzLCB0bXB2ZWMzKTtcbiAgICAgIHNldEF4aXNBbmdsZShvdXQsIHRtcHZlYzMsIE1hdGguUEkpO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9IGVsc2UgaWYgKGRvdCA+IDAuOTk5OTk5KSB7XG4gICAgICBvdXRbMF0gPSAwO1xuICAgICAgb3V0WzFdID0gMDtcbiAgICAgIG91dFsyXSA9IDA7XG4gICAgICBvdXRbM10gPSAxO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmVjMy5jcm9zcyh0bXB2ZWMzLCBhLCBiKTtcbiAgICAgIG91dFswXSA9IHRtcHZlYzNbMF07XG4gICAgICBvdXRbMV0gPSB0bXB2ZWMzWzFdO1xuICAgICAgb3V0WzJdID0gdG1wdmVjM1syXTtcbiAgICAgIG91dFszXSA9IDEgKyBkb3Q7XG4gICAgICByZXR1cm4gbm9ybWFsaXplKG91dCwgb3V0KTtcbiAgICB9XG4gIH07XG59KSgpO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYyB0aGUgdGhpcmQgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IHNxbGVycCA9IChmdW5jdGlvbiAoKSB7XG4gIGxldCB0ZW1wMSA9IGNyZWF0ZSgpO1xuICBsZXQgdGVtcDIgPSBjcmVhdGUoKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKG91dCwgYSwgYiwgYywgZCwgdCkge1xuICAgIHNsZXJwKHRlbXAxLCBhLCBkLCB0KTtcbiAgICBzbGVycCh0ZW1wMiwgYiwgYywgdCk7XG4gICAgc2xlcnAob3V0LCB0ZW1wMSwgdGVtcDIsIDIgKiB0ICogKDEgLSB0KSk7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9O1xufSgpKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbiB3aXRoIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlblxuICogYXhlcy4gRWFjaCBheGlzIGlzIGEgdmVjMyBhbmQgaXMgZXhwZWN0ZWQgdG8gYmUgdW5pdCBsZW5ndGggYW5kXG4gKiBwZXJwZW5kaWN1bGFyIHRvIGFsbCBvdGhlciBzcGVjaWZpZWQgYXhlcy5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IHZpZXcgIHRoZSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSB2aWV3aW5nIGRpcmVjdGlvblxuICogQHBhcmFtIHt2ZWMzfSByaWdodCB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgXCJyaWdodFwiIGRpcmVjdGlvblxuICogQHBhcmFtIHt2ZWMzfSB1cCAgICB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgXCJ1cFwiIGRpcmVjdGlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgY29uc3Qgc2V0QXhlcyA9IChmdW5jdGlvbigpIHtcbiAgbGV0IG1hdHIgPSBtYXQzLmNyZWF0ZSgpO1xuXG4gIHJldHVybiBmdW5jdGlvbihvdXQsIHZpZXcsIHJpZ2h0LCB1cCkge1xuICAgIG1hdHJbMF0gPSByaWdodFswXTtcbiAgICBtYXRyWzNdID0gcmlnaHRbMV07XG4gICAgbWF0cls2XSA9IHJpZ2h0WzJdO1xuXG4gICAgbWF0clsxXSA9IHVwWzBdO1xuICAgIG1hdHJbNF0gPSB1cFsxXTtcbiAgICBtYXRyWzddID0gdXBbMl07XG5cbiAgICBtYXRyWzJdID0gLXZpZXdbMF07XG4gICAgbWF0cls1XSA9IC12aWV3WzFdO1xuICAgIG1hdHJbOF0gPSAtdmlld1syXTtcblxuICAgIHJldHVybiBub3JtYWxpemUob3V0LCBmcm9tTWF0MyhvdXQsIG1hdHIpKTtcbiAgfTtcbn0pKCk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvc3JjL2dsLW1hdHJpeC9xdWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogQ29weXJpZ2h0IChjKSAyMDE1LCBCcmFuZG9uIEpvbmVzLCBDb2xpbiBNYWNLZW56aWUgSVYuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS4gKi9cblxuaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uXCI7XG5cbi8qKlxuICogMiBEaW1lbnNpb25hbCBWZWN0b3JcbiAqIEBtb2R1bGUgdmVjMlxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjMlxuICpcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuICBvdXRbMF0gPSAwO1xuICBvdXRbMV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gY2xvbmVcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgbGV0IG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSkge1xuICBsZXQgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzIgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMiB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSkge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNlaWxcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGZsb29yXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbG9vcihvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWluaW11bSBvZiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWluKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5taW4oYVsxXSwgYlsxXSk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBNYXRoLnJvdW5kIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIHJvdW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3VuZCAob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFNjYWxlcyBhIHZlYzIgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQWRkcyB0d28gdmVjMidzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyAoYlswXSAqIHNjYWxlKTtcbiAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICB5ID0gYlsxXSAtIGFbMV07XG4gIHJldHVybiBNYXRoLnNxcnQoeCp4ICsgeSp5KTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICB5ID0gYlsxXSAtIGFbMV07XG4gIHJldHVybiB4KnggKyB5Knk7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgeSA9IGFbMV07XG4gIHJldHVybiBNYXRoLnNxcnQoeCp4ICsgeSp5KTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGggKGEpIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgIHkgPSBhWzFdO1xuICByZXR1cm4geCp4ICsgeSp5O1xufTtcblxuLyoqXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gaW52ZXJ0XG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUob3V0LCBhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICB5ID0gYVsxXTtcbiAgdmFyIGxlbiA9IHgqeCArIHkqeTtcbiAgaWYgKGxlbiA+IDApIHtcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICAgIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV07XG59O1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWMyJ3NcbiAqIE5vdGUgdGhhdCB0aGUgY3Jvc3MgcHJvZHVjdCBtdXN0IGJ5IGRlZmluaXRpb24gcHJvZHVjZSBhIDNEIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzKG91dCwgYSwgYikge1xuICB2YXIgeiA9IGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF07XG4gIG91dFswXSA9IG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IHo7XG4gIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICBheSA9IGFbMV07XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xuICB2YXIgciA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wICogTWF0aC5QSTtcbiAgb3V0WzBdID0gTWF0aC5jb3MocikgKiBzY2FsZTtcbiAgb3V0WzFdID0gTWF0aC5zaW4ocikgKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0Mn0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDIob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeTtcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzNdICogeTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0MmRcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDJkfSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MmQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeSArIG1bNF07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQzXG4gKiAzcmQgdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0M30gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzNdICogeSArIG1bNl07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVs0XSAqIHkgKyBtWzddO1xuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQ0XG4gKiAzcmQgdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcwJ1xuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICBsZXQgeCA9IGFbMF07XG4gIGxldCB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzRdICogeSArIG1bMTJdO1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVsxM107XG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuICd2ZWMyKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnKSc7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBleGFjdGx5IGhhdmUgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgbGV0IGEwID0gYVswXSwgYTEgPSBhWzFdO1xuICBsZXQgYjAgPSBiWzBdLCBiMSA9IGJbMV07XG4gIHJldHVybiAoTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTipNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJlxuICAgICAgICAgIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04qTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkpO1xufVxuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5sZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGxlbiA9IGxlbmd0aDtcblxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHN1YiA9IHN1YnRyYWN0O1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgbXVsID0gbXVsdGlwbHk7XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmRpdmlkZX1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZGl2ID0gZGl2aWRlO1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZGlzdCA9IGRpc3RhbmNlO1xuXG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5zcXVhcmVkRGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2U7XG5cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG5cbi8qKlxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzJzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzIuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMycyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxuICogQHJldHVybnMge0FycmF5fSBhXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGZvckVhY2ggPSAoZnVuY3Rpb24oKSB7XG4gIGxldCB2ZWMgPSBjcmVhdGUoKTtcblxuICByZXR1cm4gZnVuY3Rpb24oYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XG4gICAgbGV0IGksIGw7XG4gICAgaWYoIXN0cmlkZSkge1xuICAgICAgc3RyaWRlID0gMjtcbiAgICB9XG5cbiAgICBpZighb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmKGNvdW50KSB7XG4gICAgICBsID0gTWF0aC5taW4oKGNvdW50ICogc3RyaWRlKSArIG9mZnNldCwgYS5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgdmVjWzBdID0gYVtpXTsgdmVjWzFdID0gYVtpKzFdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdOyBhW2krMV0gPSB2ZWNbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG59KSgpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L3NyYy9nbC1tYXRyaXgvdmVjMi5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTaGFkZXJWYXJpYWJsZSBmcm9tICcuL3NoYWRlcl92YXJpYWJsZSdcbmltcG9ydCBTaGFkZXJWYXJpYWJsZUdyb3VwIGZyb20gJy4vc2hhZGVyX3ZhcmlhYmxlX2dyb3VwJ1xuXG5pbXBvcnQgZGVzdHJveSBmcm9tICcuLi91dGlscy9kZXN0cm95J1xuXG4vKipcbiAqIEEgU2hhZGVyQ29udGV4dCBrZWVwcyBuYW1lZCByZWZlcmVuY2VzIHRvIGFsbCBzaGFkZXIgX3ZhcmlhYmxlc19cbiAqIHRvIG1ha2UgdGhlbSBhdmFpbGFibGUgZm9yIHNoYWRlciBfcHJvZ3JhbXNfLlxuICogRWFjaCBuYW1lZCByZWZlcmVuY2UgaXMgb3JnYW5pemVkIGFzIGEgX3N0YWNrXyB3aGVyZSB5b3UgY2FuIHB1c2hcbiAqIG9yIHBvcCBzaGFkZXIgdmFyaWFibGUgX3ZhbHVlc18uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYWRlckNvbnRleHQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy51bmlmb3JtID0gbmV3IE1hcCgpXG4gICAgdGhpcy5hdHRyaWIgPSBuZXcgTWFwKClcbiAgICB0aGlzLnRleDJkID0gbmV3IE1hcCgpXG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgdGhpcy51bmlmb3JtLmNsZWFyKClcbiAgICB0aGlzLmF0dHJpYi5jbGVhcigpXG4gICAgdGhpcy50ZXgyZC5jbGVhcigpXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmNsZWFyKClcbiAgICBkZXN0cm95KHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTaGFkZXJWYXJpYWJsZXxTaGFkZXJWYXJpYWJsZUdyb3VwfSBzaGFkZXJWYXJpYWJsZVxuICAgKi9cbiAgcHVzaFZhciAoc2hhZGVyVmFyaWFibGUpIHtcbiAgICBpZiAoc2hhZGVyVmFyaWFibGUgaW5zdGFuY2VvZiBTaGFkZXJWYXJpYWJsZUdyb3VwKSB7XG4gICAgICBzaGFkZXJWYXJpYWJsZS5wdXNoVmFyKHRoaXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxhbmUgPSBzaGFkZXJWYXJMYW5lKHRoaXMsIHNoYWRlclZhcmlhYmxlLnR5cGUsIHNoYWRlclZhcmlhYmxlLm5hbWUpXG4gICAgICBsYW5lLnB1c2goc2hhZGVyVmFyaWFibGUpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBjdXJyZW50IHNoYWRlciB2YXJpYWJsZSBwbHVzIGFsbCBsYXRlciBzZXQgdmFyaWFibGVzIGZyb20gbmFtZWQgc2hhZGVyIHZhcmlhYmxlIHN0YWNrLlxuICAgKiBAcGFyYW0ge1NoYWRlclZhcmlhYmxlfFNoYWRlclZhcmlhYmxlR3JvdXB9IHNoYWRlclZhcmlhYmxlXG4gICAqL1xuICBwb3BWYXIgKHNoYWRlclZhcmlhYmxlKSB7XG4gICAgaWYgKHNoYWRlclZhcmlhYmxlIGluc3RhbmNlb2YgU2hhZGVyVmFyaWFibGVHcm91cCkge1xuICAgICAgc2hhZGVyVmFyaWFibGUucG9wVmFyKHRoaXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxhbmUgPSBzaGFkZXJWYXJMYW5lKHRoaXMsIHNoYWRlclZhcmlhYmxlLnR5cGUsIHNoYWRlclZhcmlhYmxlLm5hbWUpXG4gICAgICBjb25zdCBsZW4gPSBsYW5lLmxlbmd0aFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICBpZiAobGFuZVtpXSA9PT0gc2hhZGVyVmFyaWFibGUpIHtcbiAgICAgICAgICBsYW5lLmxlbmd0aCA9IGlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gY3VycmVudCBzaGFkZXIgdmFyaWFibGUgYnkgbmFtZSBhbmQgdHlwZS5cbiAgICogQHBhcmFtIHtTaGFkZXJWYXJpYWJsZX0gc2hhZGVyVmFyaWFibGVcbiAgICogQHJldHVybiB7U2hhZGVyVmFyaWFibGV9IG9yIGBudWxsYFxuICAgKi9cbiAgY3VyVmFyIChzaGFkZXJWYXJpYWJsZSkge1xuICAgIGNvbnN0IGxhbmUgPSBzaGFkZXJWYXJNYXAodGhpcywgc2hhZGVyVmFyaWFibGUudHlwZSkuZ2V0KHNoYWRlclZhcmlhYmxlLm5hbWUpXG4gICAgcmV0dXJuIGxhbmUgJiYgbGFuZS5sZW5ndGggPyBsYW5lW2xhbmUubGVuZ3RoIC0gMV0gOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGN1cnJlbnQgX3VuaWZvcm1fIHNoYWRlciB2YXJpYWJsZSBieSBuYW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJuIHtTaGFkZXJVbmlmb3JtVmFyaWFibGV9IG9yIGBudWxsYFxuICAgKi9cbiAgY3VyVW5pZm9ybSAobmFtZSkge1xuICAgIGNvbnN0IGxhbmUgPSB0aGlzLnVuaWZvcm0uZ2V0KG5hbWUpXG4gICAgcmV0dXJuIGxhbmUgJiYgbGFuZS5sZW5ndGggPyBsYW5lW2xhbmUubGVuZ3RoIC0gMV0gOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGN1cnJlbnQgX2F0dHJpYnV0ZV8gc2hhZGVyIHZhcmlhYmxlIGJ5IG5hbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4ge1NoYWRlckF0dHJpYlZhcmlhYmxlfSBvciBgbnVsbGBcbiAgICovXG4gIGN1ckF0dHJpYiAobmFtZSkge1xuICAgIGNvbnN0IGxhbmUgPSB0aGlzLmF0dHJpYi5nZXQobmFtZSlcbiAgICByZXR1cm4gbGFuZSAmJiBsYW5lLmxlbmd0aCA/IGxhbmVbbGFuZS5sZW5ndGggLSAxXSA6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gY3VycmVudCBfdGV4dHVyZTJkXyBzaGFkZXIgdmFyaWFibGUgYnkgbmFtZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7U2hhZGVyVGV4dHVyZTJkVmFyaWFibGV9IG9yIGBudWxsYFxuICAgKi9cbiAgY3VyVGV4MmQgKG5hbWUpIHtcbiAgICBjb25zdCBsYW5lID0gdGhpcy50ZXgyZC5nZXQobmFtZSlcbiAgICByZXR1cm4gbGFuZSAmJiBsYW5lLmxlbmd0aCA/IGxhbmVbbGFuZS5sZW5ndGggLSAxXSA6IG51bGxcbiAgfVxufVxuXG5mdW5jdGlvbiBzaGFkZXJWYXJNYXAgKHNoYWRlckNvbnRleHQsIHR5cGUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBTaGFkZXJWYXJpYWJsZS5UWVBFLlVOSUZPUk06IHJldHVybiBzaGFkZXJDb250ZXh0LnVuaWZvcm1cbiAgICBjYXNlIFNoYWRlclZhcmlhYmxlLlRZUEUuQVRUUklCOiByZXR1cm4gc2hhZGVyQ29udGV4dC5hdHRyaWJcbiAgICBjYXNlIFNoYWRlclZhcmlhYmxlLlRZUEUuVEVYVFVSRV8yRDogcmV0dXJuIHNoYWRlckNvbnRleHQudGV4MmRcbiAgfVxufVxuXG5mdW5jdGlvbiBzaGFkZXJWYXJMYW5lIChzaGFkZXJDb250ZXh0LCB0eXBlLCBuYW1lKSB7XG4gIGNvbnN0IG1hcCA9IHNoYWRlclZhck1hcChzaGFkZXJDb250ZXh0LCB0eXBlKVxuICBsZXQgbGFuZSA9IG1hcC5nZXQobmFtZSlcblxuICBpZiAoIWxhbmUpIHtcbiAgICBsYW5lID0gW11cbiAgICBtYXAuc2V0KG5hbWUsIGxhbmUpXG4gIH1cblxuICByZXR1cm4gbGFuZVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvc2hhZGVyX2NvbnRleHQuanMiLCJpbXBvcnQgRWxlbWVudEluZGV4QXJyYXkgZnJvbSAnLi9lbGVtZW50X2luZGV4X2FycmF5J1xuaW1wb3J0IFNoYWRlclByb2dyYW0gZnJvbSAnLi9zaGFkZXJfcHJvZ3JhbSdcbmltcG9ydCBTaGFkZXJUZXh0dXJlR3JvdXAgZnJvbSAnLi9zaGFkZXJfdGV4dHVyZV9ncm91cCdcbmltcG9ydCBTaGFkZXJWYXJpYWJsZUJ1ZmZlckdyb3VwIGZyb20gJy4vc2hhZGVyX3ZhcmlhYmxlX2J1ZmZlcl9ncm91cCdcbmltcG9ydCBWT1Bvb2wgZnJvbSAnLi92X29fcG9vbCdcblxuY29uc3QgcGljayA9IHJlcXVpcmUoJ2xvZGFzaC9waWNrJylcblxuY29uc3QgZ2V0Vk8gPSAoZGVzY3JpcHRvciwgb3B0KSA9PiB7XG4gIGlmICh0eXBlb2Ygb3B0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3Qgdm8gPSBkZXNjcmlwdG9yLmNyZWF0ZVZPKClcbiAgICBvcHQodm8pXG4gICAgcmV0dXJuIHZvXG4gIH1cbiAgcmV0dXJuIG9wdFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcHJpdGVHcm91cCB7XG4gIGNvbnN0cnVjdG9yIChyZXNvdXJjZUxpYnJhcnksIHRleHR1cmVMaWJyYXJ5LCBvcHRpb25zKSB7XG4gICAgdGhpcy5yZXNvdXJjZUxpYnJhcnkgPSByZXNvdXJjZUxpYnJhcnlcbiAgICB0aGlzLnRleHR1cmVMaWJyYXJ5ID0gdGV4dHVyZUxpYnJhcnlcbiAgICB0aGlzLmRlc2NyaXB0b3IgPSByZXNvdXJjZUxpYnJhcnkuZmluZERlc2NyaXB0b3Iob3B0aW9ucy5kZXNjcmlwdG9yKVxuICAgIHRoaXMudm9Qb29sID0gbmV3IFZPUG9vbCh0aGlzLmRlc2NyaXB0b3IsIE9iamVjdC5hc3NpZ24ocGljayhvcHRpb25zLCBbXG4gICAgICAnY2FwYWNpdHknLFxuICAgICAgJ3VzYWdlJyxcbiAgICAgICdtYXhBbGxvY1ZPU2l6ZScsXG4gICAgICAndm9BcnJheSdcbiAgICBdKSwge1xuICAgICAgdm9OZXc6IGdldFZPKHRoaXMuZGVzY3JpcHRvciwgb3B0aW9ucy52b05ldyksXG4gICAgICB2b1plcm86IGdldFZPKHRoaXMuZGVzY3JpcHRvciwgb3B0aW9ucy52b1plcm8pXG4gICAgfSkpXG4gICAgdGhpcy52b1Bvb2xTaGFkZXJBdHRyaWJzID0gbmV3IFNoYWRlclZhcmlhYmxlQnVmZmVyR3JvdXAodGhpcy52b1Bvb2wpXG4gICAgdGhpcy5pbmRpY2VzID0gb3B0aW9ucy5pbmRpY2VzIHx8IEVsZW1lbnRJbmRleEFycmF5LkdlbmVyYXRlKHRoaXMudm9Qb29sLmNhcGFjaXR5LFxuICAgICAgWzAsIDEsIDIsIDAsIDIsIDNdLCA0ICAvLyBxdWFkc1xuICAgICAgLy8gVE9ETyBjcmVhdGUgRWxlbWVudEluZGV4QXJyYXkgZmFjdG9yaWVzISBjYXBhY2l0eT1OLCB0eXBlPXF1YWRzLCAuLi5cbiAgICApXG4gICAgdGhpcy5zaGFkZXJQcm9ncmFtID0gbmV3IFNoYWRlclByb2dyYW0oXG4gICAgICByZXNvdXJjZUxpYnJhcnkuZmluZFZlcnRleFNoYWRlcihvcHRpb25zLnZlcnRleFNoYWRlciksXG4gICAgICByZXNvdXJjZUxpYnJhcnkuZmluZEZyYWdtZW50U2hhZGVyKG9wdGlvbnMuZnJhZ21lbnRTaGFkZXIpKVxuICAgIHRoaXMucHJpbWl0aXZlID0gb3B0aW9ucy5wcmltaXRpdmVcbiAgICB0aGlzLnRleHR1cmVzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy50ZXh0dXJlcylcbiAgICB0aGlzLnNoYWRlclRleHR1cmVHcm91cCA9IG51bGxcbiAgfVxuXG4gIGdldCBjYXBhY2l0eSAoKSB7IHJldHVybiB0aGlzLnZvUG9vbC5jYXBhY2l0eSB9XG5cbiAgZ2V0IHVzZWRDb3VudCAoKSB7IHJldHVybiB0aGlzLnZvUG9vbC51c2VkQ291bnQgfVxuICBnZXQgYXZhaWxhYmxlQ291bnQgKCkgeyByZXR1cm4gdGhpcy52b1Bvb2wuYXZhaWxhYmxlQ291bnQgfVxuXG4gIHNldFRleHR1cmUgKHNhbXBsZXIsIHRleHR1cmVJZCkge1xuICAgIGlmICh0aGlzLnRleHR1cmVzW3NhbXBsZXJdICE9PSB0ZXh0dXJlSWQpIHtcbiAgICAgIHRoaXMudGV4dHVyZXNbc2FtcGxlcl0gPSB0ZXh0dXJlSWRcbiAgICAgIHRoaXMuc2hhZGVyVGV4dHVyZUdyb3VwID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIGxvYWRUZXh0dXJlQXRsYXMgKHNhbXBsZXIsIHVybCkge1xuICAgIHRoaXMudGV4dHVyZXNbc2FtcGxlcl0gPSB1cmxcbiAgICB0aGlzLnNoYWRlclRleHR1cmVHcm91cCA9IG51bGxcbiAgICByZXR1cm4gdGhpcy50ZXh0dXJlTGlicmFyeS5sb2FkVGV4dHVyZUF0bGFzKHVybClcbiAgfVxuXG4gIGdldFRleHR1cmVBdGxhcyAoc2FtcGxlcikge1xuICAgIHJldHVybiB0aGlzLnRleHR1cmVMaWJyYXJ5LmdldFRleHR1cmVBdGxhcyh0aGlzLnRleHR1cmVzW3NhbXBsZXJdKVxuICB9XG5cbiAgY3JlYXRlU3ByaXRlICh0ZXh0dXJlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3Qgdm8gPSB0aGlzLnZvUG9vbC5hbGxvYygxKVxuICAgIGlmICh0ZXh0dXJlICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHcgPSB3aWR0aCB8fCB0ZXh0dXJlLndpZHRoXG4gICAgICBjb25zdCBoID0gaGVpZ2h0IHx8IHRleHR1cmUuaGVpZ2h0XG4gICAgICB2by5zZXRTaXplKHcsIGgpXG4gICAgICB2by5zZXRUZXhDb29yZHNCeVRleHR1cmUodGV4dHVyZSlcbiAgICB9XG4gICAgcmV0dXJuIHZvXG4gIH1cblxuICByZW5kZXJGcmFtZSAocmVuZGVyZXIpIHtcbiAgICBpZiAodGhpcy5zaGFkZXJUZXh0dXJlR3JvdXAgPT0gbnVsbCkge1xuICAgICAgdGhpcy5zaGFkZXJUZXh0dXJlR3JvdXAgPSBuZXcgU2hhZGVyVGV4dHVyZUdyb3VwKHRoaXMudGV4dHVyZUxpYnJhcnksIHRoaXMudGV4dHVyZXMpXG4gICAgfVxuICAgIHRoaXMuc2hhZGVyVGV4dHVyZUdyb3VwLndoZW5Mb2FkZWQodGV4VW5pZm9ybXMgPT4ge1xuICAgICAgY29uc3QgeyBzaGFkZXJDb250ZXh0IH0gPSByZW5kZXJlclxuXG4gICAgICBzaGFkZXJDb250ZXh0LnB1c2hWYXIodGV4VW5pZm9ybXMpXG4gICAgICBzaGFkZXJDb250ZXh0LnB1c2hWYXIodGhpcy52b1Bvb2xTaGFkZXJBdHRyaWJzKVxuXG4gICAgICByZW5kZXJlci51c2VTaGFkZXJQcm9ncmFtKHRoaXMuc2hhZGVyUHJvZ3JhbSlcblxuICAgICAgcmVuZGVyZXIuZHJhd0luZGV4ZWQodGhpcy5wcmltaXRpdmUsIHRoaXMuaW5kaWNlcylcbiAgICB9KVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvY29yZS9zcHJpdGVfZ3JvdXAuanMiLCJ2YXIgYmFzZVBpY2sgPSByZXF1aXJlKCcuL19iYXNlUGljaycpLFxuICAgIGZsYXRSZXN0ID0gcmVxdWlyZSgnLi9fZmxhdFJlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAqXG4gKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICovXG52YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBpY2s7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvcGljay5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlUGlja0J5ID0gcmVxdWlyZSgnLi9fYmFzZVBpY2tCeScpLFxuICAgIGhhc0luID0gcmVxdWlyZSgnLi9oYXNJbicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVBpY2s7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQaWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0JyksXG4gICAgYmFzZVNldCA9IHJlcXVpcmUoJy4vX2Jhc2VTZXQnKSxcbiAgICBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICByZXN1bHQgPSB7fTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQaWNrQnk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQaWNrQnkuanNcbi8vIG1vZHVsZSBpZCA9IDEyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleS5qc1xuLy8gbW9kdWxlIGlkID0gMTI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVMZWFkaW5nRG90ID0gL15cXC4vLFxuICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChyZUxlYWRpbmdEb3QudGVzdChzdHJpbmcpKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanNcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWVtb2l6ZSA9IHJlcXVpcmUoJy4vbWVtb2l6ZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZUNhcHBlZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWVtb2l6ZUNhcHBlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lbW9pemUuanNcbi8vIG1vZHVsZSBpZCA9IDEyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qc1xuLy8gbW9kdWxlIGlkID0gMTMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qc1xuLy8gbW9kdWxlIGlkID0gMTMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDEzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEdldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qc1xuLy8gbW9kdWxlIGlkID0gMTQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanNcbi8vIG1vZHVsZSBpZCA9IDE0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanNcbi8vIG1vZHVsZSBpZCA9IDE0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qc1xuLy8gbW9kdWxlIGlkID0gMTU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICB9XG4gICAgfVxuICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25WYWx1ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnblZhbHVlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDE1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzXG4vLyBtb2R1bGUgaWQgPSAxNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzSW4uanNcbi8vIG1vZHVsZSBpZCA9IDE1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUGF0aDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qc1xuLy8gbW9kdWxlIGlkID0gMTYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDE2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanNcbi8vIG1vZHVsZSBpZCA9IDE2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZmxhdHRlbiA9IHJlcXVpcmUoJy4vZmxhdHRlbicpLFxuICAgIG92ZXJSZXN0ID0gcmVxdWlyZSgnLi9fb3ZlclJlc3QnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0UmVzdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZmxhdFJlc3QuanNcbi8vIG1vZHVsZSBpZCA9IDE2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpO1xuXG4vKipcbiAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZsYXR0ZW4uanNcbi8vIG1vZHVsZSBpZCA9IDE2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNGbGF0dGVuYWJsZSA9IHJlcXVpcmUoJy4vX2lzRmxhdHRlbmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZsYXR0ZW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGbGF0dGVuLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlQdXNoLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGbGF0dGVuYWJsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNGbGF0dGVuYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlclJlc3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcHBseS5qc1xuLy8gbW9kdWxlIGlkID0gMTY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlU2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlU2V0VG9TdHJpbmcnKSxcbiAgICBzaG9ydE91dCA9IHJlcXVpcmUoJy4vX3Nob3J0T3V0Jyk7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9TdHJpbmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvU3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpLFxuICAgIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNldFRvU3RyaW5nO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDE3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jb25zdGFudC5qc1xuLy8gbW9kdWxlIGlkID0gMTcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanNcbi8vIG1vZHVsZSBpZCA9IDE3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICB2YXIgY291bnQgPSAwLFxuICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvcnRPdXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Nob3J0T3V0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IEFBQkIyIGZyb20gJy4vYWFiYjInXG5cbmNvbnN0IHBvc051bSA9IG51bSA9PiBudW0gPCAwID8gMCA6IG51bVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3cG9ydCBleHRlbmRzIEFBQkIyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIGhlaWdodFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBtaW5YID0gcGFyc2VJbnQoeCwgMTApXG4gICAgY29uc3QgbWluWSA9IHBhcnNlSW50KHksIDEwKVxuXG4gICAgc3VwZXIoXG4gICAgICBtaW5YLCBwb3NOdW0oKG1pblggKyBwYXJzZUludCh3aWR0aCwgMTApIC0gMSkpLFxuICAgICAgbWluWSwgcG9zTnVtKChtaW5ZICsgcGFyc2VJbnQoaGVpZ2h0LCAxMCkgLSAxKSlcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB4ICgpIHtcbiAgICByZXR1cm4gdGhpcy5taW5YXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHNldCB4ICh4KSB7XG4gICAgY29uc3QgdyA9IHRoaXMud2lkdGhcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5taW5YID0geFxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5tYXhYID0gcG9zTnVtKHggKyB3IC0gMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHkgKCkge1xuICAgIHJldHVybiB0aGlzLm1pbllcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgc2V0IHkgKHkpIHtcbiAgICBjb25zdCBoID0gdGhpcy5oZWlnaHRcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5taW5ZID0geVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5tYXhZID0gcG9zTnVtKHkgKyBoIC0gMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdpZHRoICgpIHtcbiAgICByZXR1cm4gcG9zTnVtKHRoaXMubWF4WCAtIHRoaXMubWluWCArIDEpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHNldCB3aWR0aCAodykge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5tYXhYID0gcG9zTnVtKHRoaXMubWluWCArIHcgLSAxKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgaGVpZ2h0ICgpIHtcbiAgICByZXR1cm4gcG9zTnVtKHRoaXMubWF4WSAtIHRoaXMubWluWSArIDEpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHNldCBoZWlnaHQgKGgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubWF4WSA9IHBvc051bSh0aGlzLm1pblkgKyBoIC0gMSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvVmlld3BvcnQuanMiLCJjb25zdCB0aW55Y29sb3IgPSByZXF1aXJlKCd0aW55Y29sb3IyJylcblxuY29uc3QgbWFrZUNsZWFyTWFzayA9IChjbGVhckJ1ZmZlciwgY29sb3IgPSBmYWxzZSwgZGVwdGggPSBmYWxzZSwgc3RlbmNpbCA9IGZhbHNlKSA9PiB7XG4gIGNvbnN0IHsgZ2wgfSA9IGNsZWFyQnVmZmVyLmdseFxuICBsZXQgbWFzayA9IGNvbG9yID8gZ2wuQ09MT1JfQlVGRkVSX0JJVCA6IDBcbiAgaWYgKGRlcHRoICYmIGNsZWFyQnVmZmVyLmhhc0RlcHRoQml0cykgbWFzayA9IG1hc2sgfCBnbC5ERVBUSF9CVUZGRVJfQklUXG4gIGlmIChkZXB0aCAmJiBjbGVhckJ1ZmZlci5oYXNTdGVuY2lsQml0cykgbWFzayA9IG1hc2sgfCBnbC5TVEVOQ0lMX0JVRkZFUl9CSVRcbiAgcmV0dXJuIG1hc2tcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xlYXJCdWZmZXIge1xuICBjb25zdHJ1Y3RvciAoZ2x4KSB7XG4gICAgdGhpcy5nbHggPSBnbHhcblxuICAgIHRoaXMuaGFzRGVwdGhCaXRzID0gZ2x4LkRFUFRIX0JVRkZFUl9CSVQgPiAwXG4gICAgdGhpcy5oYXNTdGVuY2lsQml0cyA9IGdseC5TVEVOQ0lMX0JVRkZFUl9CSVQgPiAwXG5cbiAgICB0aGlzLnJlc2V0KClcbiAgfVxuXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLmNsZWFyQ29sb3IgPSBudWxsXG4gICAgdGhpcy5jbGVhckRlcHRoID0gMVxuICAgIHRoaXMuY2xlYXJTdGVuY2lsID0gMFxuICAgIHRoaXMuY2xlYXJNYXNrID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZnJhbWVidWZmZXIgY2xlYXIgY29sb3IuXG4gICAqIFVzZSB0aGUgKnRpbnljb2xvciogbGlicmFyeSBmb3IgY3NzIGNvbG9yIGNvbnZlcnNpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gY29sIC0gY3NzIGNvbG9yIGRlZmluaXRpb24gKG9yIF90aW55Y29sb3IyXyBvYmplY3QpXG4gICAqL1xuICBzZXRDbGVhckNvbG9yIChjb2wpIHtcbiAgICB0aGlzLmNsZWFyQ29sb3IgPSBjb2wgPyAodHlwZW9mIGNvbCA9PT0gJ3N0cmluZycgPyB0aW55Y29sb3IoY29sKSA6IGNvbCkgOiBudWxsXG4gIH1cblxuICBzZXRDbGVhck1hc2sgKGNvbG9yLCBkZXB0aCwgc3RlbmNpbCkge1xuICAgIHRoaXMuY2xlYXJNYXNrID0gbWFrZUNsZWFyTWFzayh0aGlzLCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwpXG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgY29uc3QgeyBnbCB9ID0gdGhpcy5nbHhcblxuICAgIGNvbnN0IHsgY2xlYXJDb2xvciB9ID0gdGhpc1xuICAgIGlmIChjbGVhckNvbG9yKSB7XG4gICAgICBjb25zdCBjb2wgPSBjbGVhckNvbG9yLnRvUmdiKClcbiAgICAgIGdsLmNsZWFyQ29sb3IoY29sLnIgLyAyNTUsIGNvbC5nIC8gMjU1LCBjb2wuYiAvIDI1NSwgY29sLmEpXG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNEZXB0aEJpdHMpIGdsLmNsZWFyRGVwdGgodGhpcy5jbGVhckRlcHRoKVxuICAgIGlmICh0aGlzLmhhc1N0ZW5jaWxCaXRzKSBnbC5jbGVhclN0ZW5jaWwodGhpcy5jbGVhclN0ZW5jaWwpXG5cbiAgICBsZXQgbWFzayA9IHRoaXMuY2xlYXJNYXNrIHx8IG1ha2VDbGVhck1hc2sodGhpcywgdHJ1ZSwgdHJ1ZSwgdHJ1ZSlcbiAgICBnbC5jbGVhcihtYXNrKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvcmVuZGVyL2NsZWFyX2J1ZmZlci5qcyIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuY29uc3QgcmVOdW1iZXIgPSAvXlstK10/KFxcZCtcXC58XFwuKT9cXGQrKGVcXGQrfGVbLStdXFxkKyk/JC9cbmNvbnN0IHJlVXJsID0gL151cmxcXChcXHMqKFteKV0rKVxcKSQvXG5jb25zdCByZVZlYzIgPSAvXnZlYzJcXChcXHMqKFstK1xcZC5lXSspXFxzKixcXHMqKFstK1xcZC5lXSspXFxzKlxcKSQvXG5jb25zdCByZVZlYzMgPSAvXnZlYzNcXChcXHMqKFstK1xcZC5lXSspXFxzKixcXHMqKFstK1xcZC5lXSspXFxzKixcXHMqKFstK1xcZC5lXSspXFxzKlxcKSQvXG5jb25zdCByZVZlYzQgPSAvXnZlYzRcXChcXHMqKFstK1xcZC5lXSspXFxzKixcXHMqKFstK1xcZC5lXSspXFxzKixcXHMqKFstK1xcZC5lXSspXFxzKixcXHMqKFstK1xcZC5lXSspXFxzKlxcKSQvXG5jb25zdCByZUZ1bmMgPSAvXlxccypbYS16QS1aXStcXChcXHMqW14pXStcXClcXHMqJC9cblxuLy8gcGFyc2VWYWx1ZShzdHIpIGV4cGVjdHMgYSB0cmltbWVkIHN0cmluZyFcbi8vXG4vLyBzcGVjaWFsIHRyYW5zZm9ybSBydWxlczpcbi8vXG4vLyAgIChzdHJpbmcpICAgPT4gKHR5cGUpXG4vLyAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gICAnLi4uJyAgICAgID0+IHN0cmluZzogLi4uXG4vLyAgIFwiLi4uXCIgICAgICA9PiBzdHJpbmc6IC4uLlxuLy8gICAxMjMgICAgICAgID0+IG51bWJlclxuLy8gICAxMjMuNDU2ICAgID0+IG51bWJlclxuLy8gICBudWxsICAgICAgID0+IG9iamVjdDogbnVsbFxuLy8gICB1bmRlZmluZWQgID0+IHVuZGVmaW5lZFxuLy8gICB0cnVlICAgICAgID0+IGJvb2xlYW46IHRydWVcbi8vICAgZmFsc2UgICAgICA9PiBib29sZWFuOiBmYWxzZVxuLy8gICB7Li4ufSAgICAgID0+IEpTT04ucGFyc2UoLi4uKVxuLy8gICBbLi4uXSAgICAgID0+IEpTT04ucGFyc2UoLi4uKVxuLy8gICB1cmwoLi4uKSAgID0+IG5ldyBVUkwoLi4uKVxuLy8gICB2ZWMyKDxudW1iZXI+LCA8bnVtYmVyPikgPT4gbmV3IEZsb2F0MzJBcnJheShbbnVtYmVyLCBudW1iZXJdKVxuLy8gICB2ZWMzKDxudW1iZXI+LCA8bnVtYmVyPiwgPG51bWJlcj4pID0+IG5ldyBGbG9hdDMyQXJyYXkoW251bWJlciwgbnVtYmVyLCBudW1iZXJdKVxuLy8gICB2ZWM0KDxudW1iZXI+LCA8bnVtYmVyPiwgPG51bWJlcj4sIDxudW1iZXI+KSA9PiBuZXcgRmxvYXQzMkFycmF5KFsuLi5dKVxuLy9cbmZ1bmN0aW9uIHBhcnNlVmFsdWUgKHZhbHVlKSB7XG4gIGNvbnN0IGxlbiA9IHZhbHVlLmxlbmd0aFxuICBpZiAobGVuID49IDIgJiYgdmFsdWUuc3RhcnRzV2l0aCgnXCInKSAmJiB2YWx1ZS5lbmRzV2l0aCgnXCInKSkge1xuICAgIHJldHVybiB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMilcbiAgfSBlbHNlIGlmIChsZW4gPj0gMiAmJiB2YWx1ZS5zdGFydHNXaXRoKCd7JykgJiYgdmFsdWUuZW5kc1dpdGgoJ30nKSkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKVxuICB9IGVsc2UgaWYgKGxlbiA+PSAyICYmIHZhbHVlLnN0YXJ0c1dpdGgoJ1snKSAmJiB2YWx1ZS5lbmRzV2l0aCgnXScpKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpXG4gIH0gZWxzZSBpZiAobGVuID49IDIgJiYgdmFsdWUuc3RhcnRzV2l0aCgnXFwnJykgJiYgdmFsdWUuZW5kc1dpdGgoJ1xcJycpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAyKVxuICB9IGVsc2UgaWYgKGxlbiA+IDAgJiYgcmVOdW1iZXIuZXhlYyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSlcbiAgfVxuXG4gIGxldCBtID0gcmVVcmwuZXhlYyh2YWx1ZSlcbiAgaWYgKG0pIHJldHVybiBuZXcgVVJMKG1bMV0udHJpbSgpKVxuXG4gIG0gPSByZVZlYzIuZXhlYyh2YWx1ZSlcbiAgaWYgKG0pIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KG0uc2xpY2UoMSwgMykubWFwKHBhcnNlRmxvYXQpKVxuXG4gIG0gPSByZVZlYzMuZXhlYyh2YWx1ZSlcbiAgaWYgKG0pIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KG0uc2xpY2UoMSwgNCkubWFwKHBhcnNlRmxvYXQpKVxuXG4gIG0gPSByZVZlYzQuZXhlYyh2YWx1ZSlcbiAgaWYgKG0pIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KG0uc2xpY2UoMSwgNSkubWFwKHBhcnNlRmxvYXQpKVxuXG4gIHN3aXRjaCAodmFsdWUpIHtcbiAgICBjYXNlICdudWxsJzogcmV0dXJuIG51bGxcbiAgICBjYXNlICd1bmRlZmluZWQnOiByZXR1cm4gdW5kZWZpbmVkXG4gICAgY2FzZSAndHJ1ZSc6IHJldHVybiB0cnVlXG4gICAgY2FzZSAnZmFsc2UnOiByZXR1cm4gZmFsc2VcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHZhbHVlXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZk5leHROb25XaGl0ZXNwYWNlIChzdHIsIGN1cklkeCkge1xuICBjb25zdCBsZW4gPSBzdHIubGVuZ3RoXG4gIGxldCBpID0gY3VySWR4XG4gIGlmIChpID49IGxlbikgcmV0dXJuIGxlblxuICBkbyB7XG4gICAgaWYgKHN0cltpXSA9PT0gJyAnIHx8IHN0cltpXSA9PT0gJ1xcdCcpIHtcbiAgICAgICsraVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfSB3aGlsZSAoaSA8IGxlbilcbiAgcmV0dXJuIGxlblxufVxuXG5mdW5jdGlvbiBpbmRleE9mTmV4dFNlcGVyYXRvciAoc3RyLCBjdXJJZHgsIHNlcGVyYXRvciA9ICc7Jykge1xuICBjb25zdCBsZW4gPSBzdHIubGVuZ3RoXG4gIGxldCBpID0gY3VySWR4XG4gIGxldCBpc0luc2lkZSA9IG51bGxcbiAgZG8ge1xuICAgIGlmIChpc0luc2lkZSA9PT0gbnVsbCkge1xuICAgICAgc3dpdGNoIChzdHJbaV0pIHtcbiAgICAgICAgY2FzZSBzZXBlcmF0b3I6IHJldHVybiBpXG4gICAgICAgIGNhc2UgJ1xcJyc6XG4gICAgICAgICAgaXNJbnNpZGUgPSAnXFwnJ1xuICAgICAgICAgICsraVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICBpc0luc2lkZSA9ICdcIidcbiAgICAgICAgICArK2lcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICcoJzpcbiAgICAgICAgICBpc0luc2lkZSA9ICcpJ1xuICAgICAgICAgICsraVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgIGlzSW5zaWRlID0gJ30nXG4gICAgICAgICAgKytpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnXFxcXCc6XG4gICAgICAgICAgaSArPSAyXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICArK2lcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0cltpXSA9PT0gaXNJbnNpZGUpIHtcbiAgICAgICAgaXNJbnNpZGUgPSBudWxsXG4gICAgICAgICsraVxuICAgICAgfSBlbHNlIGlmIChzdHJbaV0gPT09ICdcXFxcJykge1xuICAgICAgICBpICs9IDJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICsraVxuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAoaSA8IGxlbilcbiAgcmV0dXJuIGxlblxufVxuXG5mdW5jdGlvbiBzcGxpdEludG9Qcm9wVG9rZW5zIChzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8ICFzdHIpIHJldHVyblxuXG4gIGNvbnN0IHByb3BUb2tlbnMgPSBbXVxuICBjb25zdCBsZW4gPSBzdHIubGVuZ3RoXG5cbiAgbGV0IGkgPSBpbmRleE9mTmV4dE5vbldoaXRlc3BhY2Uoc3RyLCAwKVxuICBkbyB7XG4gICAgY29uc3QgdG8gPSBpbmRleE9mTmV4dFNlcGVyYXRvcihzdHIsIGksICc7JylcbiAgICBpZiAodG8gPiBpKSB7XG4gICAgICBwcm9wVG9rZW5zLnB1c2goc3RyLnNsaWNlKGksIHRvKSlcbiAgICB9XG4gICAgaSA9IGluZGV4T2ZOZXh0Tm9uV2hpdGVzcGFjZShzdHIsIHRvICsgMSlcbiAgfSB3aGlsZSAoaSA8IGxlbilcblxuICByZXR1cm4gcHJvcFRva2Vuc1xufVxuXG5mdW5jdGlvbiBzcGxpdEludG9Qcm9wcyAoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IHNwbGl0SW50b1Byb3BUb2tlbnMoc3RyKVxuICBpZiAoIXRva2VucykgcmV0dXJuXG4gIHJldHVybiB0b2tlbnMubWFwKCh0b2spID0+IHtcbiAgICBpZiAocmVGdW5jLmV4ZWModG9rKSkge1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IHRvay50cmltKCkgfVxuICAgIH1cbiAgICBjb25zdCBjb2xvbiA9IHRvay5pbmRleE9mKCc6JylcbiAgICBpZiAoY29sb24gPT09IC0xKSB7XG4gICAgICByZXR1cm4geyB2YWx1ZTogdG9rLnRyaW0oKSB9XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IHRvay5zbGljZSgwLCBjb2xvbikudHJpbSgpXG4gICAgY29uc3QgdmFsdWUgPSB0b2suc3Vic3RyKGNvbG9uICsgMSkudHJpbSgpXG4gICAgcmV0dXJuIHtcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlXG4gICAgfVxuICB9KS5maWx0ZXIoKHByb3ApID0+ICEocHJvcC5rZXkgPT09ICcnICYmIHByb3AudmFsdWUgPT09ICcnKSlcbn1cblxuZnVuY3Rpb24gcGFyc2VDc3NTdHlsZWRQcm9wZXJ0aWVzIChkYXRhKSB7XG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHJldHVybiBkYXRhXG5cbiAgLy8gPT4ganNvblxuICBjb25zdCBzdHIgPSBkYXRhLnRyaW0oKVxuICBpZiAoc3RyLnN0YXJ0c1dpdGgoJ3snKSAmJiBzdHIuZW5kc1dpdGgoJ30nKSkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cilcbiAgfVxuXG4gIGNvbnN0IHByb3BzID0gc3BsaXRJbnRvUHJvcHMoc3RyKVxuXG4gIC8vID0+IHVuZGVmaW5lZFxuICBpZiAoIXByb3BzIHx8IHByb3BzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgaWYgKCdrZXknIGluIHByb3BzWzBdKSB7XG4gICAgLy8gPT4gcHJvcGVydGllc1xuICAgIGNvbnN0IG1hcCA9IHt9XG4gICAgcHJvcHMuZm9yRWFjaCgoeyBrZXksIHZhbHVlIH0pID0+IHtcbiAgICAgIG1hcFtrZXldID0gcGFyc2VWYWx1ZSh2YWx1ZSlcbiAgICB9KVxuICAgIHJldHVybiBtYXBcbiAgfSBlbHNlIHtcbiAgICAvLyA9PiBhcnJheSBvZiB2YWx1ZXMgT1Igc2luZ2xlIHZhbHVlXG4gICAgY29uc3QgdmFsdWVzID0gcHJvcHMubWFwKCh7IHZhbHVlIH0pID0+IHBhcnNlVmFsdWUodmFsdWUpKVxuICAgIHJldHVybiB2YWx1ZXMubGVuZ3RoID09PSAxID8gdmFsdWVzWzBdIDogdmFsdWVzXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VDc3NTdHlsZWRQcm9wZXJ0aWVzXG5leHBvcnQge1xuICBzcGxpdEludG9Qcm9wVG9rZW5zLFxuICBzcGxpdEludG9Qcm9wcyxcbiAgaW5kZXhPZk5leHROb25XaGl0ZXNwYWNlLFxuICBpbmRleE9mTmV4dFNlcGVyYXRvcixcbiAgcGFyc2VWYWx1ZVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3V0aWxzL3BhcnNlQ3NzU3R5bGVkUHJvcGVydGllcy5qcyIsIlxuZXhwb3J0IGRlZmF1bHQgKG9wdGlvbnMsIGtleSwgZGVmYXVsdFZhbHVlRm4pID0+IHtcbiAgaWYgKG9wdGlvbnMgJiYga2V5IGluIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9uc1trZXldXG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBkZWZhdWx0VmFsdWVGbiA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRWYWx1ZUZuKCkgOiBkZWZhdWx0VmFsdWVGblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3V0aWxzL2dldERlZmF1bHRPcHRpb24uanMiLCJjb25zdCB0aW55Y29sb3IgPSByZXF1aXJlKCd0aW55Y29sb3IyJylcblxuY29uc3QgcGFyc2VDb2xvciA9IGNvbFN0ciA9PiBjb2xTdHIgPyB0aW55Y29sb3IoY29sU3RyKSA6IG51bGxcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xlYXJDb2xvckNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChlbnRpdHksIGNvbFN0cikge1xuICAgIHRoaXMuY29sb3IgPSBwYXJzZUNvbG9yKGNvbFN0cilcbiAgfVxuXG4gIHVwZGF0ZSAoY29sU3RyKSB7XG4gICAgdGhpcy5jb2xvciA9IHBhcnNlQ29sb3IoY29sU3RyKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvZG9tL2NvbXBvbmVudHMvQ2xlYXJDb2xvckNvbXBvbmVudC5qcyIsImltcG9ydCB7IGdldERlZmF1bHRPcHRpb24gfSBmcm9tICdibGl0cHVuay91dGlscydcbmltcG9ydCB7IENPTVBfUFJJT19DTEVBUiB9IGZyb20gJy4uL2NvbnN0YW50cydcblxuY29uc3QgdGlueWNvbG9yID0gcmVxdWlyZSgndGlueWNvbG9yMicpXG5cbmNvbnN0IERFRkFVTFRfQ09MT1IgPSAncmdiYSgwLDAsMCwwKSdcbmNvbnN0IERFRkFVTFRfREVQVEggPSAxXG5jb25zdCBERUZBVUxUX1NURU5DSUwgPSAwXG5jb25zdCBERUZBVUxUX01BU0sgPSAnQ09MT1IsREVQVEgsU1RFTkNJTCdcblxuY29uc3QgcGFyc2VDb2xvciA9IGNvbFN0ciA9PiBjb2xTdHIgPyB0aW55Y29sb3IoY29sU3RyKSA6IG51bGxcblxuY29uc3QgcGFyc2VNYXNrID0gc3RyID0+IHtcbiAgcmV0dXJuIHtcbiAgICBjb2xvcjogc3RyLmluZGV4T2YoJ0NPTE9SJykgPiAtMSxcbiAgICBkZXB0aDogc3RyLmluZGV4T2YoJ0RFUFRIJykgPiAtMSxcbiAgICBzdGVuY2lsOiBzdHIuaW5kZXhPZignU1RFTkNJTCcpID4gLTFcbiAgfVxufVxuXG5jb25zdCBwYXJzZUNvbmZpZyA9IChwcm9wcykgPT4ge1xuICBpZiAoIXByb3BzIHx8IHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xlYXJDb2xvcjogcGFyc2VDb2xvcihwcm9wcyB8fCBERUZBVUxUX0NPTE9SKSxcbiAgICAgIGNsZWFyRGVwdGg6IERFRkFVTFRfREVQVEgsXG4gICAgICBjbGVhclN0ZW5jaWw6IERFRkFVTFRfU1RFTkNJTCxcbiAgICAgIG1hc2s6IHBhcnNlTWFzayhERUZBVUxUX01BU0spXG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb3B0aW9uID0gZ2V0RGVmYXVsdE9wdGlvbi5iaW5kKG51bGwsIHByb3BzKVxuICByZXR1cm4ge1xuICAgIGNsZWFyQ29sb3I6IHBhcnNlQ29sb3Iob3B0aW9uKCdjb2xvcicsIERFRkFVTFRfQ09MT1IpKSxcbiAgICBjbGVhckRlcHRoOiBvcHRpb24oJ2RlcHRoJywgREVGQVVMVF9ERVBUSCksXG4gICAgY2xlYXJTdGVuY2lsOiBvcHRpb24oJ3N0ZW5jaWwnLCBERUZBVUxUX1NURU5DSUwpLFxuICAgIG1hc2s6IHBhcnNlTWFzayhvcHRpb24oJ21hc2snLCBERUZBVUxUX01BU0spKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsZWFyQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGVudGl0eSwgY29uZmlnKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBwYXJzZUNvbmZpZyhjb25maWcpKVxuICAgIGNvbnNvbGUubG9nKCdbQ2xlYXJDb21wb25lbnRdIGNyZWF0ZWQnLCB0aGlzKVxuICB9XG5cbiAgdXBkYXRlIChjb25maWcpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHBhcnNlQ29uZmlnKGNvbmZpZykpXG4gICAgY29uc29sZS5sb2coJ1tDbGVhckNvbXBvbmVudF0gdXBkYXRlZCcsIHRoaXMpXG4gIH1cblxuICBjb25uZWN0ZWRFbnRpdHkgKGVudGl0eSkge1xuICAgIHRoaXMucmVuZGVyRnJhbWVMaXN0ZW5lciA9XG4gICAgICBlbnRpdHkub24oJ3JlbmRlckZyYW1lJywgQ09NUF9QUklPX0NMRUFSLCB0aGlzLnJlbmRlckZyYW1lLmJpbmQodGhpcykpXG4gICAgY29uc29sZS5sb2coJ1tDbGVhckNvbXBvbmVudF0gY29ubmVjdGVkJywgdGhpcylcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZEVudGl0eSAoZW50aXR5KSB7XG4gICAgaWYgKHRoaXMucmVuZGVyRnJhbWVMaXN0ZW5lcikgZW50aXR5Lm9mZih0aGlzLnJlbmRlckZyYW1lTGlzdGVuZXIpXG4gICAgY29uc29sZS5sb2coJ1tDbGVhckNvbXBvbmVudF0gZGlzY29ubmVjdGVkJywgdGhpcylcbiAgfVxuXG4gIHJlbmRlckZyYW1lIChyZW5kZXJlcikge1xuICAgIGNvbnN0IHsgY2xlYXJCdWZmZXIgfSA9IHJlbmRlcmVyXG5cbiAgICBjbGVhckJ1ZmZlci5jbGVhckRlcHRoID0gdGhpcy5jbGVhckRlcHRoXG4gICAgY2xlYXJCdWZmZXIuY2xlYXJTdGVuY2lsID0gdGhpcy5jbGVhclN0ZW5jaWxcblxuICAgIGNsZWFyQnVmZmVyLnNldENsZWFyQ29sb3IodGhpcy5jbGVhckNvbG9yKVxuXG4gICAgY29uc3QgeyBtYXNrOiB7IGNvbG9yLCBkZXB0aCwgc3RlbmNpbCB9IH0gPSB0aGlzXG4gICAgY2xlYXJCdWZmZXIuc2V0Q2xlYXJNYXNrKGNvbG9yLCBkZXB0aCwgc3RlbmNpbClcblxuICAgIGNsZWFyQnVmZmVyLmNsZWFyKClcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2RvbS9jb21wb25lbnRzL0NsZWFyQ29tcG9uZW50LmpzIiwiaW1wb3J0ICogYXMgc2ltcGxlIGZyb20gJy4vc2ltcGxlJ1xuXG5jb25zdCBTSU1QTEUgPSAnc2ltcGxlJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc3ByaXRlTGlicmFyeSkge1xuICBzcHJpdGVMaWJyYXJ5XG4gICAgLmFkZERlc2NyaXB0b3IoU0lNUExFLCBzaW1wbGUuZGVzY3JpcHRpb24pXG4gICAgLmFkZFZlcnRleFNoYWRlcihTSU1QTEUsIHNpbXBsZS52ZXJ0ZXhTaGFkZXIpXG4gICAgLmFkZEZyYWdtZW50U2hhZGVyKFNJTVBMRSwgc2ltcGxlLmZyYWdtZW50U2hhZGVyKVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvcmVzb3VyY2VzL2luZGV4LmpzIiwiaW1wb3J0IHJvdGF0ZSBmcm9tICdibGl0cHVuay91dGlscy9zaGFkZXJfaGVscGVycy9yb3RhdGUnXG5cbmV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXIgPSBbYFxuXG4gIGF0dHJpYnV0ZSB2ZWMyIHBvczJkO1xuICBhdHRyaWJ1dGUgZmxvYXQgcG9zWjtcbiAgYXR0cmlidXRlIHZlYzIgdXY7XG4gIGF0dHJpYnV0ZSB2ZWMyIHRyYW5zbGF0ZTtcbiAgYXR0cmlidXRlIGZsb2F0IHJvdGF0ZTtcbiAgYXR0cmlidXRlIGZsb2F0IHNjYWxlO1xuICBhdHRyaWJ1dGUgZmxvYXQgb3BhY2l0eTtcblxuICB1bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcblxuICB2YXJ5aW5nIHZlYzQgdlRleHR1cmVDb29yZFNjYWxlT3BhY2l0eTtcblxuICBgLCByb3RhdGUoJ3JvdGF0ZVonLCAwLjAsIDAuMCwgMS4wKSwgYFxuXG4gIHZvaWQgbWFpbih2b2lkKVxuICB7XG4gICAgbWF0NCByb3RhdGlvbk1hdHJpeCA9IHJvdGF0ZVoocm90YXRlKTtcbiAgICBnbF9Qb3NpdGlvbiA9IHZpZXdNYXRyaXggKiAoKHJvdGF0aW9uTWF0cml4ICogKHZlYzQoc2NhbGUsIHNjYWxlLCBzY2FsZSwgMS4wKSAqIHZlYzQocG9zMmQueHksIHBvc1osIDEuMCkpKSArIHZlYzQodHJhbnNsYXRlLnh5LCAwLjAsIDAuMCkpO1xuICAgIHZUZXh0dXJlQ29vcmRTY2FsZU9wYWNpdHkgPSB2ZWM0KHV2Lnh5LCBvcGFjaXR5LCAwLjApO1xuICB9XG5gXVxuXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBgXG5cbiAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cbiAgdmFyeWluZyB2ZWM0IHZUZXh0dXJlQ29vcmRTY2FsZU9wYWNpdHk7XG4gIHVuaWZvcm0gc2FtcGxlcjJEIHRleDtcblxuICB2b2lkIG1haW4odm9pZCkge1xuICAgIGdsX0ZyYWdDb2xvciA9IHZUZXh0dXJlQ29vcmRTY2FsZU9wYWNpdHkueiAqIHRleHR1cmUyRCh0ZXgsIHZlYzIodlRleHR1cmVDb29yZFNjYWxlT3BhY2l0eS5zLCB2VGV4dHVyZUNvb3JkU2NhbGVPcGFjaXR5LnQpKTtcbiAgfVxuXG5gXG5cbmV4cG9ydCBjb25zdCBkZXNjcmlwdGlvbiA9IHtcbiAgdmVydGV4Q291bnQ6IDQsXG5cbiAgLy8gKy0rLSstKy0rICstKy0rLSstKyArLSstK1xuICAvLyB8MHwxfDJ8M3wgfDR8NXw2fDd8IHw4fDl8XG4gIC8vICstKy0rLSstKyArLSstKy0rLSsgKy0rLStcbiAgLy9cbiAgLy8gfG8tby1vfCAgICAgICAgICAgICAgICAgICAgICAgKDMpIHBvc2l0aW9uOiB4LHkselxuICAvLyAgICAgICB8b3wgICAgICAgICAgICAgICAgICAgICAoMSkgcm90YXRlXG4gIC8vICAgICAgICAgICB8by1vfCAgICAgICAgICAgICAgICgyKSB0ZXgtY29vcmRzOiBzLCB0XG4gIC8vICAgICAgICAgICAgICAgfG8tb3wgICAgICAgICAgICgzKSB0cmFuc2xhdGU6IHR4LCB0eVxuICAvLyAgICAgICAgICAgICAgICAgICAgIHxvfCAgICAgICAoMSkgc2NhbGVcbiAgLy8gICAgICAgICAgICAgICAgICAgICAgIHxvfCAgICAgKDEpIG9wYWNpdHlcbiAgLy9cblxuICBhdHRyaWJ1dGVzOiBbXG4gICAgeyBuYW1lOiAncG9zaXRpb24nLCB0eXBlOiAnZmxvYXQzMicsIHNpemU6IDMsIGF0dHJOYW1lczogWyAneCcsICd5JywgJ3onIF0gfSxcbiAgICB7IG5hbWU6ICdyb3RhdGUnLCB0eXBlOiAnZmxvYXQzMicsIHNpemU6IDEsIHVuaWZvcm06IHRydWUgfSxcbiAgICB7IG5hbWU6ICd0ZXhDb29yZHMnLCB0eXBlOiAnZmxvYXQzMicsIHNpemU6IDIsIGF0dHJOYW1lczogWyAncycsICd0JyBdIH0sXG4gICAgeyBuYW1lOiAndHJhbnNsYXRlJywgdHlwZTogJ2Zsb2F0MzInLCBzaXplOiAyLCBhdHRyTmFtZXM6IFsgJ3R4JywgJ3R5JyBdLCB1bmlmb3JtOiB0cnVlIH0sXG4gICAgeyBuYW1lOiAnc2NhbGUnLCB0eXBlOiAnZmxvYXQzMicsIHNpemU6IDEsIHVuaWZvcm06IHRydWUgfSxcbiAgICB7IG5hbWU6ICdvcGFjaXR5JywgdHlwZTogJ2Zsb2F0MzInLCBzaXplOiAxLCB1bmlmb3JtOiB0cnVlIH1cbiAgXSxcblxuICBhbGlhc2VzOiB7XG4gICAgcG9zMmQ6IHsgc2l6ZTogMiwgdHlwZTogJ2Zsb2F0MzInLCBvZmZzZXQ6IDAgfSxcbiAgICBwb3NaOiB7IHNpemU6IDEsIHR5cGU6ICdmbG9hdDMyJywgb2Zmc2V0OiAyLCB1bmlmb3JtOiB0cnVlIH0sXG4gICAgdXY6ICd0ZXhDb29yZHMnXG4gIH0sXG5cbiAgcHJvdG86IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1ZpZXdwb3J0fSB2aWV3cG9ydFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0dXJlV2lkdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGV4dHVyZUhlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVwZWF0XSAtIHRleHR1cmUgcmVwZWF0IGZhY3RvclxuICAgICAqL1xuICAgIHNldFRleENvb3Jkc0J5Vmlld3BvcnQgKHZpZXdwb3J0LCB0ZXh0dXJlV2lkdGgsIHRleHR1cmVIZWlnaHQsIHJlcGVhdCkge1xuICAgICAgbGV0IHgwID0gdmlld3BvcnQueCA9PT0gMCA/IDAgOiAodmlld3BvcnQueCAvIHRleHR1cmVXaWR0aClcbiAgICAgIGxldCB4MSA9ICh2aWV3cG9ydC54ICsgdmlld3BvcnQud2lkdGgpIC8gdGV4dHVyZVdpZHRoXG4gICAgICBsZXQgeTAgPSAxIC0gKHZpZXdwb3J0LnkgKyB2aWV3cG9ydC5oZWlnaHQpIC8gdGV4dHVyZUhlaWdodFxuICAgICAgbGV0IHkxID0gdmlld3BvcnQueSA9PT0gMCA/IDEgOiAxIC0gKHZpZXdwb3J0LnkgLyB0ZXh0dXJlSGVpZ2h0KVxuXG4gICAgICBpZiAocmVwZWF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgeDAgKj0gcmVwZWF0XG4gICAgICAgIHgxICo9IHJlcGVhdFxuICAgICAgICB5MCAqPSByZXBlYXRcbiAgICAgICAgeTEgKj0gcmVwZWF0XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0VGV4Q29vcmRzKHgwLCB5MCwgeDEsIHkwLCB4MSwgeTEsIHgwLCB5MSlcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlXG4gICAgICovXG4gICAgc2V0VGV4Q29vcmRzQnlUZXh0dXJlICh0ZXh0dXJlKSB7XG4gICAgICBjb25zdCB4MCA9IHRleHR1cmUubWluU1xuICAgICAgY29uc3QgeTAgPSB0ZXh0dXJlLm1pblRcbiAgICAgIGNvbnN0IHgxID0gdGV4dHVyZS5tYXhTXG4gICAgICBjb25zdCB5MSA9IHRleHR1cmUubWF4VFxuXG4gICAgICB0aGlzLnNldFRleENvb3Jkcyh4MCwgeTAsIHgxLCB5MCwgeDEsIHkxLCB4MCwgeTEpXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKi9cbiAgICBzZXRTaXplICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAqIDAuNVxuICAgICAgY29uc3QgaGFsZkhlaWdodCA9IChoZWlnaHQgPT0gbnVsbCA/IHdpZHRoIDogaGVpZ2h0KSAqIDAuNVxuXG4gICAgICB0aGlzLnNldFBvczJkKFxuICAgICAgICAtaGFsZldpZHRoLCBoYWxmSGVpZ2h0LFxuICAgICAgICBoYWxmV2lkdGgsIGhhbGZIZWlnaHQsXG4gICAgICAgIGhhbGZXaWR0aCwgLWhhbGZIZWlnaHQsXG4gICAgICAgIC1oYWxmV2lkdGgsIC1oYWxmSGVpZ2h0XG4gICAgICApXG4gICAgfSxcblxuICAgIGdldCB3aWR0aCAoKSB7XG4gICAgICByZXR1cm4gdGhpcy54MSAtIHRoaXMueDNcbiAgICB9LFxuXG4gICAgZ2V0IGhlaWdodCAoKSB7XG4gICAgICByZXR1cm4gdGhpcy55MCAtIHRoaXMueTJcbiAgICB9LFxuXG4gICAgZ2V0IHJvdGF0ZURlZ3JlZSAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb3RhdGUgKiAxODAuMCAvIE1hdGguUElcbiAgICB9LFxuXG4gICAgc2V0IHJvdGF0ZURlZ3JlZSAoZGVncmVlKSB7XG4gICAgICB0aGlzLnJvdGF0ZSA9IGRlZ3JlZSAqIChNYXRoLlBJIC8gMTgwLjApXG4gICAgfSxcblxuICAgIGdldCB6ICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnowXG4gICAgfSxcblxuICAgIHNldCB6ICh6KSB7XG4gICAgICB0aGlzLnowID0gelxuICAgICAgdGhpcy56MSA9IHpcbiAgICAgIHRoaXMuejIgPSB6XG4gICAgICB0aGlzLnozID0gelxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2NvcmUvcmVzb3VyY2VzL3NpbXBsZS5qcyIsImltcG9ydCByZXQgZnJvbSAnLi9yZXQnXG5pbXBvcnQgbWF0NCBmcm9tICcuL21hdDQnXG5pbXBvcnQgbXVsIGZyb20gJy4vbXVsJ1xuaW1wb3J0IHN1YiBmcm9tICcuL3N1YidcbmltcG9ydCBhZGQgZnJvbSAnLi9hZGQnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChmdW5jTmFtZSA9ICdyb3RhdGUnLCB4ID0gMC4wLCB5ID0gMC4wLCB6ID0gMS4wKSB7XG4gIHJldHVybiBbXG5cbiAgICBgbWF0NCAke2Z1bmNOYW1lfShmbG9hdCBhbmdsZSkge2AsXG5cbiAgICAnZmxvYXQgcyA9IHNpbihhbmdsZSk7JyxcbiAgICAnZmxvYXQgYyA9IGNvcyhhbmdsZSk7JyxcbiAgICAnZmxvYXQgb2MgPSAxLjAgLSBjOycsXG5cbiAgICByZXQoXG4gICAgICBtYXQ0KFxuICAgICAgICBhZGQobXVsKCdvYycsIHggKiB4KSwgJ2MnKSwgc3ViKG11bCgnb2MnLCB4ICogeSksIG11bCh6LCAncycpKSwgYWRkKG11bCgnb2MnLCB6ICogeCksIG11bCh5LCAncycpKSwgMCxcbiAgICAgICAgYWRkKG11bCgnb2MnLCB4ICogeSksIG11bCh6LCAncycpKSwgYWRkKG11bCgnb2MnLCB5ICogeSksICdjJyksIHN1YihtdWwoJ29jJywgeSAqIHopLCBtdWwoeCwgJ3MnKSksIDAsXG4gICAgICAgIHN1YihtdWwoJ29jJywgeiAqIHgpLCBtdWwoeSwgJ3MnKSksIGFkZChtdWwoJ29jJywgeSAqIHopLCBtdWwoeCwgJ3MnKSksIGFkZChtdWwoJ29jJywgeiAqIHopLCAnYycpXG4gICAgICApXG4gICAgKSxcblxuICAgICd9J1xuXG4gIF1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay91dGlscy9zaGFkZXJfaGVscGVycy9yb3RhdGUuanMiLCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJldCAocmVzKSB7XG4gIHJldHVybiBgcmV0dXJuICR7cmVzfTtgXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvdXRpbHMvc2hhZGVyX2hlbHBlcnMvcmV0LmpzIiwiaW1wb3J0IGFzRmxvYXQgZnJvbSAnLi9hc19mbG9hdCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF0NCAobTAwID0gMCwgbTAxID0gMCwgbTAyID0gMCwgbTAzID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0xMCA9IDAsIG0xMSA9IDAsIG0xMiA9IDAsIG0xMyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtMjAgPSAwLCBtMjEgPSAwLCBtMjIgPSAwLCBtMjMgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbTMwID0gMCwgbTMxID0gMCwgbTMyID0gMCwgbTMzID0gMSwgYXMgPSBhc0Zsb2F0KSB7XG4gIGNvbnN0IHRvU3RyID0gYXMgfHwgKCh4KSA9PiB4ICsgJycpXG4gIHJldHVybiBgbWF0NCgke3RvU3RyKG0wMCl9LCAke3RvU3RyKG0wMSl9LCAke3RvU3RyKG0wMil9LCAke3RvU3RyKG0wMyl9LCAke3RvU3RyKG0xMCl9LCAke3RvU3RyKG0xMSl9LCAke3RvU3RyKG0xMil9LCAke3RvU3RyKG0xMyl9LCAke3RvU3RyKG0yMCl9LCAke3RvU3RyKG0yMSl9LCAke3RvU3RyKG0yMil9LCAke3RvU3RyKG0yMyl9LCAke3RvU3RyKG0zMCl9LCAke3RvU3RyKG0zMSl9LCAke3RvU3RyKG0zMil9LCAke3RvU3RyKG0zMyl9KWBcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay91dGlscy9zaGFkZXJfaGVscGVycy9tYXQ0LmpzIiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIGNvbnN0IHN0ciA9IChudW1iZXIgKyAnJykudHJpbSgpXG4gIGlmIChzdHIubWF0Y2goL15bMC05XSskLykpIHtcbiAgICByZXR1cm4gc3RyICsgJy4wJ1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay91dGlscy9zaGFkZXJfaGVscGVycy9hc19mbG9hdC5qcyIsIlxuZnVuY3Rpb24gaXNOdW1iZXIgKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnbnVtYmVyJ1xufVxuXG5leHBvcnQgZGVmYXVsdCAoYSwgYikgPT4ge1xuICBpZiAoaXNOdW1iZXIoYikgJiYgaXNOdW1iZXIoYSkpIHtcbiAgICByZXR1cm4gYSAqIGJcbiAgfSBlbHNlIGlmIChpc051bWJlcihhKSkge1xuICAgIHN3aXRjaCAoYSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gMFxuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gYlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGAke2F9ICogJHtifWBcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNOdW1iZXIoYikpIHtcbiAgICBzd2l0Y2ggKGIpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIGFcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBgJHthfSAqICR7Yn1gXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHthfSAqICR7Yn1gXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay91dGlscy9zaGFkZXJfaGVscGVycy9tdWwuanMiLCJcbmZ1bmN0aW9uIGlzTnVtYmVyICh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ251bWJlcidcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gIGlmIChpc051bWJlcihhKSAmJiBpc051bWJlcihiKSkge1xuICAgIHJldHVybiBhIC0gYlxuICB9IGVsc2UgaWYgKGlzTnVtYmVyKGEpKSB7XG4gICAgc3dpdGNoIChhKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBgLSR7Yn1gXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYCR7YX0gLSAke2J9YFxuICAgIH1cbiAgfSBlbHNlIGlmIChpc051bWJlcihiKSkge1xuICAgIHN3aXRjaCAoYikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gYVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGAke2F9IC0gJHtifWBcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGAke2F9IC0gJHtifWBcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL3V0aWxzL3NoYWRlcl9oZWxwZXJzL3N1Yi5qcyIsIlxuZnVuY3Rpb24gaXNOdW1iZXIgKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnbnVtYmVyJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgaWYgKGlzTnVtYmVyKGEpICYmIGlzTnVtYmVyKGIpKSB7XG4gICAgcmV0dXJuIGEgKyBiXG4gIH0gZWxzZSBpZiAoaXNOdW1iZXIoYSkpIHtcbiAgICBzd2l0Y2ggKGEpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBgJHthfSArICR7Yn1gXG4gICAgfVxuICB9IGVsc2UgaWYgKGlzTnVtYmVyKGIpKSB7XG4gICAgc3dpdGNoIChiKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBhXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYCR7YX0gKyAke2J9YFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7YX0gKyAke2J9YFxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvdXRpbHMvc2hhZGVyX2hlbHBlcnMvYWRkLmpzIiwiaW1wb3J0IENvbXBvbmVudEZhY3RvcnkgZnJvbSAnLi9jb21wb25lbnRfZmFjdG9yeSdcbmltcG9ydCBDb21wb25lbnRSZWdpc3RyeSBmcm9tICcuL2NvbXBvbmVudF9yZWdpc3RyeSdcbmltcG9ydCBFbnRpdHkgZnJvbSAnLi9lbnRpdHknXG5pbXBvcnQgRW50aXR5TWFuYWdlciBmcm9tICcuL2VudGl0eV9tYW5hZ2VyJ1xuXG5leHBvcnQge1xuICBDb21wb25lbnRGYWN0b3J5LFxuICBDb21wb25lbnRSZWdpc3RyeSxcbiAgRW50aXR5LFxuICBFbnRpdHlNYW5hZ2VyXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvZWNzL2luZGV4LmpzIiwiLyogZ2xvYmFsIGN1c3RvbUVsZW1lbnRzICovXG5pbXBvcnQgZGVmaW5lQ3VzdG9tRWxlbWVudHMgZnJvbSAnLi9kb20vZGVmaW5lQ3VzdG9tRWxlbWVudHMnXG5pbXBvcnQgKiBhcyBwdWJsaWNBcGkgZnJvbSAnLi9hcGknXG5pbXBvcnQgeyBET01fRUxFTV9DQU5WQVMgfSBmcm9tICcuL2RvbS9jb25zdGFudHMnXG5pbXBvcnQgbG9nIGZyb20gJy4uL2NvbW1vbi9sb2cnXG5cbmNvbnN0IGluaXRpYWxpemUgPSAoKSA9PiB7XG4gIGlmIChjdXN0b21FbGVtZW50cy5nZXQoRE9NX0VMRU1fQ0FOVkFTKSkge1xuICAgIGxvZygnPGJsaXRwdW5rPiBjdXN0b20gZWxlbWVudHMgaGF2ZSBhbHJlYWR5IGJlZW4gZGVmaW5lZCcpXG4gIH0gZWxzZSB7XG4gICAgbG9nKCc8YmxpdHB1bms+IGN1c3RvbSBlbGVtZW50cyBhcmUgbm93IGRlZmluZWQnKVxuICAgIGRlZmluZUN1c3RvbUVsZW1lbnRzKClcbiAgfVxuXG4gIHJldHVybiBjdXN0b21FbGVtZW50cy53aGVuRGVmaW5lZChET01fRUxFTV9DQU5WQVMpLnRoZW4oKCkgPT4gcHVibGljQXBpKVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0aWFsaXplXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvaW5pdGlhbGl6ZS5qcyIsImltcG9ydCBDYW52YXNFbGVtZW50IGZyb20gJy4vZWxlbWVudHMvQ2FudmFzRWxlbWVudCdcbmltcG9ydCBFbnRpdHlFbGVtZW50IGZyb20gJy4vZWxlbWVudHMvRW50aXR5RWxlbWVudCdcbi8vIGltcG9ydCBTY2VuZUVsZW1lbnQgZnJvbSAnLi9lbGVtZW50cy9TY2VuZUVsZW1lbnQnXG4vLyBpbXBvcnQgVGV4dHVyZUF0bGFzRWxlbWVudCBmcm9tICcuL2VsZW1lbnRzL1RleHR1cmVBdGxhc0VsZW1lbnQnXG4vLyBpbXBvcnQgU3ByaXRlR3JvdXBFbGVtZW50IGZyb20gJy4vZWxlbWVudHMvU3ByaXRlR3JvdXBFbGVtZW50J1xuXG5pbXBvcnQge1xuICBET01fRUxFTV9DQU5WQVMsXG4gIERPTV9FTEVNX0VOVElUWVxuICAvLyBET01fRUxFTV9TQ0VORSxcbiAgLy8gRE9NX0VMRU1fVEVYVFVSRV9BVExBUyxcbiAgLy8gRE9NX0VMRU1fU1BSSVRFX0dST1VQXG59IGZyb20gJy4vY29uc3RhbnRzJ1xuXG5pbXBvcnQgJy4vYmxpdHB1bmsuc2NzcydcblxuLyoqXG4gKiBEZWZpbmUgYWxsIGA8YmxpdHB1bmstKj5gIGN1c3RvbSBodG1sIGVsZW1lbnRzLlxuICogU2hvdWxkIGJlIGNhbGxlZCBvbmNlIGF0IHN0YXJ0dXAuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmluZUN1c3RvbUVsZW1lbnRzICgpIHtcbiAgLy8gZGVmaW5lIGVsZW1lbnQgaW4gdGhlIEN1c3RvbUVsZW1lbnRSZWdpc3RyeVxuICB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKERPTV9FTEVNX0NBTlZBUywgQ2FudmFzRWxlbWVudClcbiAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShET01fRUxFTV9FTlRJVFksIEVudGl0eUVsZW1lbnQpXG4gIC8vIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoRE9NX0VMRU1fU0NFTkUsIFNjZW5lRWxlbWVudClcbiAgLy8gd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShET01fRUxFTV9URVhUVVJFX0FUTEFTLCBUZXh0dXJlQXRsYXNFbGVtZW50KVxuICAvLyB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKERPTV9FTEVNX1NQUklURV9HUk9VUCwgU3ByaXRlR3JvdXBFbGVtZW50KVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JsaXRwdW5rL2RvbS9kZWZpbmVDdXN0b21FbGVtZW50cy5qcyIsImltcG9ydCBFbnRpdHlFbGVtZW50IGZyb20gJy4uL0VudGl0eUVsZW1lbnQnXG5pbXBvcnQgcmVzaXplIGZyb20gJy4vcmVzaXplJ1xuaW1wb3J0IGNyZWF0ZVdlYkdsUmVuZGVyZXIgZnJvbSAnLi9jcmVhdGVXZWJHbFJlbmRlcmVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXNFbGVtZW50IGV4dGVuZHMgRW50aXR5RWxlbWVudCB7XG4gIC8qKiBAaWdub3JlICovXG4gIGNvbnN0cnVjdG9yIChfKSB7XG4gICAgY29uc3Qgc2VsZiA9IHN1cGVyKF8pXG5cbiAgICBjb25zb2xlLmxvZygnW0NhbnZhc0VsZW1lbnRdIGNvbnN0cnVjdG9yLCBzZWxmPScsIHNlbGYpXG5cbiAgICBzZWxmLm5vdyA9IDBcbiAgICBzZWxmLmFuaW1hdGlvbkZyYW1lUmVxdWVzdElkID0gMFxuICAgIHNlbGYuYW5pbWF0aW9uRnJhbWVSZXF1ZXN0SXNTdG9wcGVkID0gZmFsc2VcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNlbGYsIHtcbiAgICAgIF93ZWJHbFJlbmRlcmVyOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgX2NsZWFyQ29sb3I6IHsgdmFsdWU6IHVuZGVmaW5lZCwgd3JpdGFibGU6IHRydWUgfVxuICAgIH0pXG5cbiAgICBzZWxmLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgc2VsZi5hcHBlbmRDaGlsZChzZWxmLmNhbnZhcylcbiAgICByZXNpemUoc2VsZilcblxuICAgIHJldHVybiBzZWxmXG4gIH1cblxuICBnZXQgd2ViR2xSZW5kZXJlciAoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl93ZWJHbFJlbmRlcmVyXG4gICAgaWYgKHJlbmRlcmVyKSByZXR1cm4gcmVuZGVyZXJcbiAgICBjb25zdCB7IHdlYkdsUmVuZGVyZXIsIGNhbnZhc0NvbnRleHRBdHRyaWJ1dGVzIH0gPSBjcmVhdGVXZWJHbFJlbmRlcmVyKHRoaXMpXG4gICAgdGhpcy5jYW52YXNDb250ZXh0QXR0cmlidXRlcyA9IGNhbnZhc0NvbnRleHRBdHRyaWJ1dGVzXG4gICAgdGhpcy5fd2ViR2xSZW5kZXJlciA9IHdlYkdsUmVuZGVyZXJcbiAgICByZXR1cm4gd2ViR2xSZW5kZXJlclxuICB9XG5cbiAgc3RhcnRBbmltYXRpb24gKCkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkZyYW1lUmVxdWVzdElkKSByZXR1cm5cbiAgICB0aGlzLmFuaW1hdGlvbkZyYW1lUmVxdWVzdElzU3RvcHBlZCA9IGZhbHNlXG4gICAgdGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3RJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKG5vdykgPT4ge1xuICAgICAgdGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3RJZCA9IDBcbiAgICAgIGlmICghdGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3RJc1N0b3BwZWQpIHtcbiAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbigpXG4gICAgICAgIHRoaXMubm93ID0gbm93IC8gMTAwMC4wIC8vIHNlY29uZHNcbiAgICAgICAgcmVzaXplKHRoaXMpXG4gICAgICAgIGNvbnN0IHsgd2ViR2xSZW5kZXJlciB9ID0gdGhpc1xuICAgICAgICB3ZWJHbFJlbmRlcmVyLnNldFZpZXdwb3J0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KVxuICAgICAgICB3ZWJHbFJlbmRlcmVyLnJlbmRlckZyYW1lKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnJlbmRlckZyYW1lKHRoaXMsIHdlYkdsUmVuZGVyZXIpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHN0b3BBbmltYXRpb24gKCkge1xuICAgIHRoaXMuYW5pbWF0aW9uRnJhbWVSZXF1ZXN0SXNTdG9wcGVkID0gdHJ1ZVxuICAgIGlmICh0aGlzLmFuaW1hdGlvbkZyYW1lUmVxdWVzdElkICE9PSAwKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3RJZClcbiAgICAgIHRoaXMuYW5pbWF0aW9uRnJhbWVSZXF1ZXN0SWQgPSAwXG4gICAgfVxuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGNvbm5lY3RlZENhbGxiYWNrICgpIHtcbiAgICBjb25zb2xlLmxvZygnW0NhbnZhc0VsZW1lbnRdIGNvbm5lY3RlZENhbGxiYWNrKCknKVxuXG4gICAgcmVzaXplKHRoaXMpXG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbigpXG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2sgKCkge1xuICAgIGNvbnNvbGUubG9nKCdbQ2FudmFzRWxlbWVudF0gZGlzY29ubmVjdGVkQ2FsbGJhY2soKScpXG5cbiAgICB0aGlzLnN0b3BBbmltYXRpb24oKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvZG9tL2VsZW1lbnRzL0NhbnZhc0VsZW1lbnQvaW5kZXguanMiLCJcbi8qKlxuICogUmVzaXplIHRoZSBjYW52YXMgZWxlbWVudCB0byB0aGUgc2FtZSBzaXplIGFzIHRoZSBgPGJsaXRwdW5rLWNhbnZhcz4ucGFyZW50Tm9kZWBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKGVsKSA9PiB7XG4gIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpXG4gIGNvbnN0IHsgY2xpZW50V2lkdGg6IHdQeCwgY2xpZW50SGVpZ2h0OiBoUHggfSA9IHN0eWxlLmRpc3BsYXkgPT09ICdpbmxpbmUnID8gZWwucGFyZW50Tm9kZSA6IGVsXG4gIGNvbnN0IHsgY2FudmFzIH0gPSBlbFxuICBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxXG5cbiAgY2FudmFzLnN0eWxlLndpZHRoID0gd1B4ICsgJ3B4J1xuICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gaFB4ICsgJ3B4J1xuXG4gIGNvbnN0IHcgPSBNYXRoLnJvdW5kKHdQeCAqIGRwcilcbiAgY29uc3QgaCA9IE1hdGgucm91bmQoaFB4ICogZHByKVxuXG4gIGlmICh3ICE9PSBjYW52YXMud2lkdGggfHwgaCAhPT0gY2FudmFzLmhlaWdodCkge1xuICAgIGNhbnZhcy53aWR0aCA9IHdcbiAgICBjYW52YXMuaGVpZ2h0ID0gaFxuICB9XG5cbiAgaWYgKHcgIT09IGVsLndpZHRoIHx8IGggIT09IGVsLmhlaWdodCkge1xuICAgIC8qKlxuICAgICAqIENhbnZhcyBzaXplIGluIF9kZXZpY2VfIHBpeGVscy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGVsLndpZHRoID0gd1xuICAgIC8qKlxuICAgICAqIENhbnZhcyBzaXplIGluIF9kZXZpY2VfIHBpeGVscy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGVsLmhlaWdodCA9IGhcblxuICAgIC8vIFRPRE8gZWwuZ2x4LmdsLnZpZXdwb3J0KDAsIDAsIHcsIGgpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9kb20vZWxlbWVudHMvQ2FudmFzRWxlbWVudC9yZXNpemUuanMiLCJpbXBvcnQgV2ViR2xDb250ZXh0IGZyb20gJ2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfY29udGV4dCdcbmltcG9ydCBXZWJHbFJlbmRlcmVyIGZyb20gJ2JsaXRwdW5rL3JlbmRlci93ZWJfZ2xfcmVuZGVyZXInXG5cbmltcG9ydCB7IGVycm9yIH0gZnJvbSAnY29tbW9uL2xvZydcblxuaW1wb3J0IHJlYWRCb29sZWFuQXR0cmlidXRlIGZyb20gJy4uLy4uL2xpYi9yZWFkQm9vbGVhbkF0dHJpYnV0ZS5qcydcblxuaW1wb3J0IHtcbiAgQVRUUl9BTFBIQSxcbiAgQVRUUl9BTlRJQUxJQVMsXG4gIEFUVFJfREVQVEgsXG4gIEFUVFJfUFJFTVVMVElQTElFRF9BTFBIQSxcbiAgQVRUUl9QUkVTRVJWRV9EUkFXLFxuICBBVFRSX1NURU5DSUxcbn0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJ1xuXG5jb25zdCBjcmVhdGVDYW52YXNDb250ZXh0QXR0cmlidXRlcyA9IChlbCkgPT4gKHtcbiAgYWxwaGE6IHJlYWRCb29sZWFuQXR0cmlidXRlKGVsLCBBVFRSX0FMUEhBLCBmYWxzZSksXG4gIGFudGlhbGlhczogcmVhZEJvb2xlYW5BdHRyaWJ1dGUoZWwsIEFUVFJfQU5USUFMSUFTLCBmYWxzZSksXG4gIGRlcHRoOiByZWFkQm9vbGVhbkF0dHJpYnV0ZShlbCwgQVRUUl9ERVBUSCwgdHJ1ZSksICAvLyBpZSAxMSBoYXMgbm8gc3VwcG9ydCBmb3IgZmFsc2VcbiAgcHJlbXVsdGlwbGllZEFscGhhOiByZWFkQm9vbGVhbkF0dHJpYnV0ZShlbCwgQVRUUl9QUkVNVUxUSVBMSUVEX0FMUEhBLCBmYWxzZSksXG4gIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogcmVhZEJvb2xlYW5BdHRyaWJ1dGUoZWwsIEFUVFJfUFJFU0VSVkVfRFJBVywgZmFsc2UpLFxuICBzdGVuY2lsOiByZWFkQm9vbGVhbkF0dHJpYnV0ZShlbCwgQVRUUl9TVEVOQ0lMLCBmYWxzZSlcbn0pXG5cbmNvbnN0IGNyZWF0ZVdlYkdsQ29udGV4dCA9IChjYW52YXMsIGF0dHJpYnV0ZXMpID0+IHtcbiAgbGV0IGdsXG5cbiAgdHJ5IHtcbiAgICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIGF0dHJpYnV0ZXMpXG4gIH0gY2F0Y2ggKGVycjApIHtcbiAgICBlcnJvcihlcnIwKVxuICB9XG5cbiAgaWYgKCFnbCkge1xuICAgIHRyeSB7XG4gICAgICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBhdHRyaWJ1dGVzKVxuICAgIH0gY2F0Y2ggKGVycjEpIHtcbiAgICAgIGVycm9yKGVycjEpXG4gICAgfVxuICB9XG5cbiAgaWYgKCFnbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGNyZWF0ZSBXZWJHTCBjb250ZXh0LCBhdHRyaWJ1dGVzPSR7SlNPTi5zdHJpbmdpZnkoYXR0cmlidXRlcyl9YClcbiAgfVxuXG4gIHJldHVybiBnbFxufVxuXG5leHBvcnQgZGVmYXVsdCAoZWwpID0+IHtcbiAgY29uc3QgY2FudmFzQ29udGV4dEF0dHJpYnV0ZXMgPSBPYmplY3QuZnJlZXplKGNyZWF0ZUNhbnZhc0NvbnRleHRBdHRyaWJ1dGVzKGVsKSlcbiAgY29uc3QgZ2x4ID0gbmV3IFdlYkdsQ29udGV4dChjcmVhdGVXZWJHbENvbnRleHQoZWwuY2FudmFzLCBjYW52YXNDb250ZXh0QXR0cmlidXRlcykpXG4gIHJldHVybiB7XG4gICAgY2FudmFzQ29udGV4dEF0dHJpYnV0ZXMsXG4gICAgd2ViR2xSZW5kZXJlcjogbmV3IFdlYkdsUmVuZGVyZXIoZ2x4KVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYmxpdHB1bmsvZG9tL2VsZW1lbnRzL0NhbnZhc0VsZW1lbnQvY3JlYXRlV2ViR2xSZW5kZXJlci5qcyIsIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGVsLCBuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKCFlbC5oYXNBdHRyaWJ1dGUobmFtZSkpIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgc3dpdGNoIChlbC5nZXRBdHRyaWJ1dGUobmFtZSkudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ3RydWUnOlxuICAgIGNhc2UgJ3llcyc6XG4gICAgY2FzZSAnb24nOlxuICAgIGNhc2UgJyc6XG4gICAgY2FzZSBuYW1lOlxuICAgICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9ibGl0cHVuay9kb20vbGliL3JlYWRCb29sZWFuQXR0cmlidXRlLmpzIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanMhLi9ibGl0cHVuay5zY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzIS4vYmxpdHB1bmsuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuL2JsaXRwdW5rLnNjc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2JsaXRwdW5rL2RvbS9ibGl0cHVuay5zY3NzXG4vLyBtb2R1bGUgaWQgPSAxOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh1bmRlZmluZWQpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYmxpdHB1bmstY2FudmFzIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogMDtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7IH1cXG4gIGJsaXRwdW5rLWNhbnZhcyA+IGNhbnZhcyB7XFxuICAgIGJvcmRlcjogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICAtbXMtdG91Y2gtYWN0aW9uOiBub25lO1xcbiAgICB0b3VjaC1hY3Rpb246IG5vbmU7XFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7IH1cXG5cXG5ibGl0cHVuay1zY2VuZSxcXG5ibGl0cHVuay10ZXh0dXJlLWF0bGFzLFxcbmJsaXRwdW5rLXNwcml0ZS1ncm91cCB7XFxuICBkaXNwbGF5OiBub25lOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYiEuL3NyYy9ibGl0cHVuay9kb20vYmxpdHB1bmsuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMTk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vW3NlbGVjdG9yXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZm4uY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1tzZWxlY3Rvcl0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bc2VsZWN0b3JdXG5cdH07XG59KShmdW5jdGlvbiAodGFyZ2V0KSB7XG5cdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldClcbn0pO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcblx0aWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC8pL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanNcbi8vIG1vZHVsZSBpZCA9IDIwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,