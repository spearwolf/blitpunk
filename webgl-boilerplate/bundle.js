/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _eventize = __webpack_require__(1);\n\nvar _eventize2 = _interopRequireDefault(_eventize);\n\nvar _generate_uuid = __webpack_require__(3);\n\nvar _generate_uuid2 = _interopRequireDefault(_generate_uuid);\n\nvar _constants = __webpack_require__(2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Common interface used by all scene graph nodes.\n */\nclass SGNode {\n\n    constructor({ nodeType, name, parentNode, priority } = {}) {\n\n        (0, _eventize2.default)(this);\n\n        /**\n         * @type {number}\n         */\n        this.nodeType = nodeType || _constants.SG_NODE_TYPE;\n\n        /**\n         * @type {string}\n         */\n        this.name = name || (0, _generate_uuid2.default)();\n\n        /**\n         * @type {SGNode}\n         */\n        this.parentNode = parentNode || null;\n\n        /**\n         * @private\n         */\n        this._priority = priority || _constants.DEFAULT_PRIORITY;\n\n        /**\n         * @type {SGNode[]}\n         */\n        this.childNodes = [];\n\n        /**\n         * @private\n         */\n        this.shouldSortChildNodes = false;\n\n        if (this.parentNode) {\n            this.parentNode.appendChild(this);\n        }\n    }\n\n    /**\n     * @type {number}\n     */\n    get priority() {\n        return this._priority;\n    }\n\n    /**\n     * @param {number} priority\n     */\n    set priority(priority) {\n        if (priority !== this._priority) {\n            this._priority = priority;\n            const { parentNode } = this;\n            if (parentNode != null) {\n                parentNode.shouldSortChildNodes = true;\n            }\n        }\n    }\n\n    /**\n     * @type {boolean}\n     */\n    get isRootNode() {\n        return !this.parentNode;\n    }\n\n    /**\n     * @type {SGNode}\n     */\n    get rootNode() {\n        return this.parentNode && this.parentNode.rootNode || this;\n    }\n\n    /**\n     * @param {number} nodeType\n     * @return {SGNode}\n     */\n    getRootNodeByType(nodeType) {\n        if (nodeType === this.nodeType) {\n            return this;\n        } else {\n            return this.parentNode && this.parentNode.getRootNodeByType(nodeType);\n        }\n    }\n\n    /**\n     * @type {boolean}\n     */\n    get hasChildNodes() {\n        return this.childNodes.length > 0;\n    }\n\n    sortChildNodesByPriority() {\n        this.childNodes.sort((a, b) => a.priority < b.priority);\n    }\n\n    reSortChildNodesByPriority() {\n        if (this.shouldSortChildNodes) {\n            this.sortChildNodesByPriority();\n            this.shouldSortChildNodes = false;\n        }\n    }\n\n    containsChild(node) {\n        const len = this.childNodes.length;\n        for (let i = 0; i < len; i++) {\n            if (this.childNodes[i] === node) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    appendChild(node) {\n        if (node && !this.containsChild(node)) {\n            this.childNodes.push(node);\n            this.shouldSortChildNodes = true;\n        }\n        return this;\n    }\n\n    forEachChild(callback, context) {\n        this.reSortChildNodesByPriority();\n        this.childNodes.forEach(node => callback.call(context, node));\n        return this;\n    }\n\n    /*\n     * Depth-first traversal.\n     * @param {function} [callbackBefore]\n     * @param {function} [callbackAfter]\n     * @param {function|function[]} [filterFunc]\n     */\n    traverse(callbackBefore, callbackAfter, filterFunc) {\n        if (Array.isArray(filterFunc)) {\n            for (let filter of filterFunc) {\n                if (!filter(this)) {\n                    return;\n                }\n            }\n        } else if (filterFunc && !filterFunc(this)) {\n            return;\n        }\n        if (callbackBefore) {\n            callbackBefore(this);\n        }\n        this.forEachChild(node => node.traverse(callbackBefore, callbackAfter, filterFunc));\n        if (callbackAfter) {\n            callbackAfter(this);\n        }\n    }\n\n    /**\n     * Find *first* node with given name.\n     * Further nodes with same name will be ignored.\n     * @param {string}Â name\n     * @returns {SGNode|undefined}\n     */\n    findByName(name) {\n        if (this.name === name) {\n            return this;\n        }\n        this.reSortChildNodesByPriority();\n        const len = this.childNodes.length;\n        for (let i = 0; i < len; ++i) {\n            let node = this.childNodes[i].findByName(name);\n            if (node) {\n                return node;\n            }\n        }\n    }\n\n}\nexports.default = SGNode;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2NlbmVfZ3JhcGgvc19nX25vZGUuanM/MGRkYSJdLCJuYW1lcyI6WyJTR05vZGUiLCJjb25zdHJ1Y3RvciIsIm5vZGVUeXBlIiwibmFtZSIsInBhcmVudE5vZGUiLCJwcmlvcml0eSIsIl9wcmlvcml0eSIsImNoaWxkTm9kZXMiLCJzaG91bGRTb3J0Q2hpbGROb2RlcyIsImFwcGVuZENoaWxkIiwiaXNSb290Tm9kZSIsInJvb3ROb2RlIiwiZ2V0Um9vdE5vZGVCeVR5cGUiLCJoYXNDaGlsZE5vZGVzIiwibGVuZ3RoIiwic29ydENoaWxkTm9kZXNCeVByaW9yaXR5Iiwic29ydCIsImEiLCJiIiwicmVTb3J0Q2hpbGROb2Rlc0J5UHJpb3JpdHkiLCJjb250YWluc0NoaWxkIiwibm9kZSIsImxlbiIsImkiLCJwdXNoIiwiZm9yRWFjaENoaWxkIiwiY2FsbGJhY2siLCJjb250ZXh0IiwiZm9yRWFjaCIsImNhbGwiLCJ0cmF2ZXJzZSIsImNhbGxiYWNrQmVmb3JlIiwiY2FsbGJhY2tBZnRlciIsImZpbHRlckZ1bmMiLCJBcnJheSIsImlzQXJyYXkiLCJmaWx0ZXIiLCJmaW5kQnlOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFFQTs7O0FBR2UsTUFBTUEsTUFBTixDQUFhOztBQUV4QkMsZ0JBQWEsRUFBRUMsUUFBRixFQUFZQyxJQUFaLEVBQWtCQyxVQUFsQixFQUE4QkMsUUFBOUIsS0FBMkMsRUFBeEQsRUFBNEQ7O0FBRXhELGdDQUFTLElBQVQ7O0FBRUE7OztBQUdBLGFBQUtILFFBQUwsR0FBZ0JBLG1DQUFoQjs7QUFFQTs7O0FBR0EsYUFBS0MsSUFBTCxHQUFZQSxRQUFRLDhCQUFwQjs7QUFFQTs7O0FBR0EsYUFBS0MsVUFBTCxHQUFrQkEsY0FBYyxJQUFoQzs7QUFFQTs7O0FBR0EsYUFBS0UsU0FBTCxHQUFpQkQsdUNBQWpCOztBQUVBOzs7QUFHQSxhQUFLRSxVQUFMLEdBQWtCLEVB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O0FBQ0g7QUFDSjtBQUNKLFNBTkQsTUFNTyxJQUFJSCxjQUFjLENBQUNBLFdBQVcsSUFBWCxDQUFuQixFQUFxQztBQUN4QztBQUNIO0FBQ0QsWUFBSUYsY0FBSixFQUFvQjtBQUNoQkEsMkJBQWUsSUFBZjtBQUNIO0FBQ0QsYUFBS04sWUFBTCxDQUFrQkosUUFBUUEsS0FBS1MsUUFBTCxDQUFjQyxjQUFkLEVBQThCQyxhQUE5QixFQUE2Q0MsVUFBN0MsQ0FBMUI7QUFDQSxZQUFJRCxhQUFKLEVBQW1CO0FBQ2ZBLDBCQUFjLElBQWQ7QUFDSDtBQUNKOztBQUVEOzs7Ozs7QUFNQUssZUFBWWxDLElBQVosRUFBa0I7QUFDZCxZQUFJLEtBQUtBLElBQUwsS0FBY0EsSUFBbEIsRUFBd0I7QUFDcEIsbUJBQU8sSUFBUDtBQUNIO0FBQ0QsYUFBS2dCLDBCQUFMO0FBQ0EsY0FBTUcsTUFBTSxLQUFLZixVQUFMLENBQWdCTyxNQUE1QjtBQUNBLGFBQUssSUFBSVMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxHQUFwQixFQUF5QixFQUFFQyxDQUEzQixFQUE4QjtBQUMxQixnQkFBSUYsT0FBTyxLQUFLZCxVQUFMLENBQWdCZ0IsQ0FBaEIsRUFBbUJjLFVBQW5CLENBQThCbEMsSUFBOUIsQ0FBWDtBQUNBLGdCQUFJa0IsSUFBSixFQUFVO0FBQ04sdUJBQU9BLElBQVA7QUFDSDtBQUNKO0FBQ0o7O0FBN0t1QjtrQkFBUHJCLE0iLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBldmVudGl6ZSBmcm9tICdAc3BlYXJ3b2xmL2V2ZW50aXplJztcblxuaW1wb3J0IGdlbmVyYXRlVVVJRCBmcm9tICcuLi91dGlscy9nZW5lcmF0ZV91dWlkJztcbmltcG9ydCB7IFNHX05PREVfVFlQRSwgREVGQVVMVF9QUklPUklUWSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuLyoqXG4gKiBDb21tb24gaW50ZXJmYWNlIHVzZWQgYnkgYWxsIHNjZW5lIGdyYXBoIG5vZGVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTR05vZGUge1xuXG4gICAgY29uc3RydWN0b3IgKHsgbm9kZVR5cGUsIG5hbWUsIHBhcmVudE5vZGUsIHByaW9yaXR5IH0gPSB7fSkge1xuXG4gICAgICAgIGV2ZW50aXplKHRoaXMpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ub2RlVHlwZSA9IG5vZGVUeXBlIHx8IFNHX05PREVfVFlQRTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWUgfHwgZ2VuZXJhdGVVVUlEKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtTR05vZGV9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBhcmVudE5vZGUgPSBwYXJlbnROb2RlIHx8wqBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcHJpb3JpdHkgPSBwcmlvcml0eSB8fCBERUZBVUxUX1BSSU9SSVRZO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7U0dOb2RlW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNoaWxkTm9kZXMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hvdWxkU29ydENoaWxkTm9kZXMgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IHByaW9yaXR5ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaW9yaXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvcml0eVxuICAgICAqL1xuICAgIHNldCBwcmlvcml0eSAocHJpb3JpdHkpIHtcbiAgICAgICAgaWYgKHByaW9yaXR5ICE9PSB0aGlzLl9wcmlvcml0eSkge1xuICAgICAgICAgICAgdGhpcy5fcHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgICAgIGNvbnN0IHvCoHBhcmVudE5vZGUgfSA9IHRoaXM7XG4gICAgICAgICAgICBpZiAocGFyZW50Tm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5zaG91bGRTb3J0Q2hpbGROb2RlcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgaXNSb290Tm9kZSAoKSB7XG4gICAgICAgIHJldHVybiAhIHRoaXMucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U0dOb2RlfVxuICAgICAqL1xuICAgIGdldCByb290Tm9kZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLnJvb3ROb2RlIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5vZGVUeXBlXG4gICAgICogQHJldHVybiB7U0dOb2RlfVxuICAgICAqL1xuICAgIGdldFJvb3ROb2RlQnlUeXBlIChub2RlVHlwZSkge1xuICAgICAgICBpZiAobm9kZVR5cGUgPT09IHRoaXMubm9kZVR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZSAmJiB0aGlzLnBhcmVudE5vZGUuZ2V0Um9vdE5vZGVCeVR5cGUobm9kZVR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IGhhc0NoaWxkTm9kZXMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgc29ydENoaWxkTm9kZXNCeVByaW9yaXR5ICgpIHtcbiAgICAgICAgdGhpcy5jaGlsZE5vZGVzLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgPCBiLnByaW9yaXR5KTtcbiAgICB9XG5cbiAgICByZVNvcnRDaGlsZE5vZGVzQnlQcmlvcml0eSAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFNvcnRDaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICB0aGlzLnNvcnRDaGlsZE5vZGVzQnlQcmlvcml0eSgpO1xuICAgICAgICAgICAgdGhpcy5zaG91bGRTb3J0Q2hpbGROb2RlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udGFpbnNDaGlsZCAobm9kZSkge1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZE5vZGVzW2ldID09PSBub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFwcGVuZENoaWxkIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlICYmICF0aGlzLmNvbnRhaW5zQ2hpbGQobm9kZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGROb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5zaG91bGRTb3J0Q2hpbGROb2RlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZm9yRWFjaENoaWxkIChjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgICB0aGlzLnJlU29ydENoaWxkTm9kZXNCeVByaW9yaXR5KCk7XG4gICAgICAgIHRoaXMuY2hpbGROb2Rlcy5mb3JFYWNoKG5vZGUgPT4gY2FsbGJhY2suY2FsbChjb250ZXh0LCBub2RlKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogRGVwdGgtZmlyc3QgdHJhdmVyc2FsLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja0JlZm9yZV1cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tBZnRlcl1cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufGZ1bmN0aW9uW119IFtmaWx0ZXJGdW5jXVxuICAgICAqL1xuICAgIHRyYXZlcnNlIChjYWxsYmFja0JlZm9yZSwgY2FsbGJhY2tBZnRlciwgZmlsdGVyRnVuYykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWx0ZXJGdW5jKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgZmlsdGVyIG9mIGZpbHRlckZ1bmMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbHRlcih0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZpbHRlckZ1bmMgJiYgIWZpbHRlckZ1bmModGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGJhY2tCZWZvcmUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrQmVmb3JlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm9yRWFjaENoaWxkKG5vZGUgPT4gbm9kZS50cmF2ZXJzZShjYWxsYmFja0JlZm9yZSwgY2FsbGJhY2tBZnRlciwgZmlsdGVyRnVuYykpO1xuICAgICAgICBpZiAoY2FsbGJhY2tBZnRlcikge1xuICAgICAgICAgICAgY2FsbGJhY2tBZnRlcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgKmZpcnN0KiBub2RlIHdpdGggZ2l2ZW4gbmFtZS5cbiAgICAgKiBGdXJ0aGVyIG5vZGVzIHdpdGggc2FtZSBuYW1lIHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ33CoG5hbWVcbiAgICAgKiBAcmV0dXJucyB7U0dOb2RlfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBmaW5kQnlOYW1lIChuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVTb3J0Q2hpbGROb2Rlc0J5UHJpb3JpdHkoKTtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgbGV0IG5vZGUgPSB0aGlzLmNoaWxkTm9kZXNbaV0uZmluZEJ5TmFtZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NjZW5lX2dyYXBoL3NfZ19ub2RlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar hasMap = canUseMap();\nvar hasSymbol = canUseSymbol();\nvar hasConsole = typeof console !== 'undefined';\n\nvar PROP_NAMESPACE  = !hasSymbol ? '@@eventize' : (function () {\n    if (!Symbol.eventize) {\n        Symbol.eventize = Symbol('eventize');\n    }\n    return Symbol.eventize;\n})();\n\nvar CATCH_ALL_EVENT = '*';\nvar LOG_NAMESPACE   = '[eventize.js]';\n\n// =====================================================================\n//\n// eventize( object )\n//\n// =====================================================================\n\nfunction eventize (o) {\n\n    if (o[PROP_NAMESPACE]) return o;\n\n    var _e = {\n        lastCallbackId : 0,\n        callbacks      : {},\n        boundObjects   : []\n    };\n\n    _e.callbacks[CATCH_ALL_EVENT] = [];\n\n    var _ePublic = definePublicPropertiesRO({}, {\n        silenced : false,\n        off      : []\n    });\n\n    defineHiddenPropertyRO(o, PROP_NAMESPACE, _ePublic);\n\n    if (eventize.PRIO_DEFAULT === undefined) {\n\n        definePublicPropertiesRO(eventize, {\n            PRIO_MAX     : Number.POSITIVE_INFINITY,\n            PRIO_A       : 1000000000,\n            PRIO_B       : 10000000,\n            PRIO_C       : 100000,\n            PRIO_DEFAULT : 0,\n            PRIO_LOW     : -100000,\n            PRIO_MIN     : Number.NEGATIVE_INFINITY\n        });\n\n    }\n\n    // -----------------------------------------------------------------\n    //\n    // object.on( eventName, [ prio, ] callbackFunc )\n    // object.on( eventName, [ prio, ] obj )\n    //\n    // object.on( callbackFunc )    => object.on( '*', callbackFunc )\n    // object.on( obj )             => object.on( '*', obj )\n    //\n    // object.on( eventName )\n    // object.on()\n    //\n    // -----------------------------------------------------------------\n\n    o.on = function (eventName, prio, fn) {  // --- {{{\n\n        var argsLen = arguments.length;\n\n        if (argsLen === 0) {\n            if (_ePublic.silenced) {\n                definePublicPropertyRO(_ePublic, 'silenced', false);\n                _ePublic.off.length = 0;\n            }\n            return;\n        }\n\n        var i;\n\n        if (argsLen === 1) {\n            if (typeof eventName === 'string') {\n\n                i = _ePublic.off.indexOf(eventName);\n                if (i >= 0) {\n                    _ePublic.off.splice(i, 1);\n                }\n                return;\n\n            } else if (typeof eventName === 'object' || typeof eventName === 'function') {\n\n                // alias for: on('*', listener)\n\n                fn = eventName;\n                eventName = CATCH_ALL_EVENT;\n                prio = eventize.PRIO_DEFAULT;\n\n            } else {\n                if (hasConsole) {\n                    console.warn(LOG_NAMESPACE, '.on() called with insufficient arguments!', arguments);\n                }\n                return;\n            }\n        }\n\n        if (argsLen === 2) {\n            fn = prio;\n            prio = eventize.PRIO_DEFAULT;\n        }\n\n        var eventizeCallbacks = _e.callbacks;\n        var eventListener = eventizeCallbacks[eventName] || (eventizeCallbacks[eventName] = []);\n        var listenerId = createId();\n        var listener = definePublicPropertiesRO({}, {\n            id         : listenerId,\n            fn         : fn,\n            prio       : (typeof prio !== 'number' ? eventize.PRIO_DEFAULT : prio),\n            isFunction : (typeof fn === 'function'),\n        });\n\n        eventListener.push(listener);\n        eventListener.sort(sortListenerByPrio);\n\n        return listenerId;\n\n    };\n\n    function createId () {\n        return ++_e.lastCallbackId;\n    }\n\n    function sortListenerByPrio (a, b) {\n        return a.prio !== b.prio ? b.prio - a.prio : a.id - b.id;\n    }\n\n    // --- on }}}\n\n    // ----------------------------------------------------------------------\n    //\n    // object.once( eventName, [ prio, ] callbackFunc )\n    // object.once( eventName, [ prio, ] obj )\n    //\n    // object.once( callbackFunc )      => object.once( '*', callbackFunc )\n    // object.once( obj )               => object.once( '*', obj )\n    //\n    // ----------------------------------------------------------------------\n\n    o.once = function (eventName, prio, fn) {  // --- {{{\n\n        var argsLen = arguments.length;\n\n        if (!argsLen || argsLen > 3) {\n            if (hasConsole) {\n                console.warn(LOG_NAMESPACE, '.once() called with insufficient arguments!', arguments);\n            }\n            return;\n        }\n\n        if (argsLen === 1) {\n\n            fn = eventName;\n            eventName = CATCH_ALL_EVENT;\n            prio = eventize.PRIO_DEFAULT;\n\n        } else if (argsLen === 2) {\n\n            fn = prio;\n            prio = eventize.PRIO_DEFAULT;\n\n        }\n\n        var id = o.on(eventName, prio, function () {\n            var res = fn.apply(this, arguments);\n            o.off(id);\n            return res;\n        });\n\n        return id;\n\n    };\n\n    // --- once }}}\n\n    // -----------------------------------------------------------------\n    //\n    // object.off( id )\n    // object.off( callback )\n    // object.off( obj )\n    // object.off( eventName )\n    // object.off()\n    //\n    // deactive listener by id or previously bound object or\n    // function reference or event name or silence all events\n    //\n    // -----------------------------------------------------------------\n\n    o.off = function (id) {  // -- {{{\n\n        if (arguments.length === 0) {\n            if (!_ePublic.silenced) {\n                definePublicPropertyRO(_ePublic, 'silenced', true);\n                _ePublic.off.length = 0;\n            }\n            return;\n        }\n\n        if (typeof id === 'string') {\n            //\n            // by event name\n            //\n            if (_ePublic.off.indexOf(id) === -1) {\n                _ePublic.off.push(id);\n            }\n            return;\n        }\n\n        var eventizeCallbacks = _e.callbacks;\n        var cb, i, j, _callbacks, keys;\n        var isObject = typeof id === 'object';\n\n        if (typeof id === 'number' || typeof id === 'function' || isObject) {\n            //\n            // by id or function reference\n            //\n            keys = Object.keys(eventizeCallbacks);\n            for (j = 0; j < keys.length; j++) {\n                _callbacks = eventizeCallbacks[keys[j]];\n                for (i = 0; i < _callbacks.length; i++) {\n                    cb = _callbacks[i];\n                    if (cb.id === id || cb.fn === id) {\n                        _callbacks.splice(i, 1);\n                        if (!isObject) return;\n                    }\n                }\n            }\n        }\n\n        if (isObject) {\n            //\n            // by bound object reference\n            //\n            i = _e.boundObjects.indexOf(id);\n            if ( i >= 0 ) {\n                _e.boundObjects.splice(i, 1);\n            }\n        }\n\n    };\n\n    // --- off }}}\n\n    // -----------------------------------------------------------------\n    //\n    // object.connect( obj )\n    // object.connect( obj, mapping )\n    //\n    // Example:\n    //\n    //   object.connect(options, {\n    //        onProjectionUpdated : [100, 'projectionUpdated'],\n    //        onFrame             : 'frame',\n    //        onFrameEnd          : 'frameEnd'\n    //   })\n    //\n    // -----------------------------------------------------------------\n\n    o.connect = function (obj, mapping) {  // --- {{{\n        var argsLen = arguments.length;\n        if (argsLen === 1) {\n            return _bindObject(obj);\n        } else if (argsLen === 2) {\n            return _connectWithMapping(this, obj, mapping);\n        } else {\n            if (hasConsole) {\n                console.warn(LOG_NAMESPACE, '.connect() called with insufficient arguments!', arguments);\n            }\n        }\n    };\n\n    function _bindObject (obj) {\n\n        // TODO connect(obj) should ..\n        // - support priority\n        // - support filters? (via only, except options)\n        // - support senderContextArgument?: 'prepend'|'append'|false\n\n        if (!obj) return;\n        var i = _e.boundObjects.indexOf(obj);\n        if (i === -1) {\n            _e.boundObjects.push(obj);\n        }\n        return obj;\n\n    }\n\n    function _connectWithMapping (obj, options, listenerMap) {\n\n        var eventName, listenName, listenFunc, prio;\n\n        for (listenName in listenerMap) {\n            if (listenerMap.hasOwnProperty(listenName)) {\n                listenFunc = options[listenName];\n                if (typeof listenFunc === 'function') {\n                    eventName = listenerMap[listenName];\n                    if (Array.isArray(eventName)) {\n                        prio = eventName[0];\n                        eventName = eventName[1];\n                    } else {\n                        prio = eventize.PRIO_DEFAULT;\n                    }\n                    obj.on(eventName, prio, listenFunc);\n                }\n            }\n        }\n\n        return obj;\n\n    }\n\n    // --- connect }}}\n\n    // -----------------------------------------------------------------\n    //\n    // object.emit( eventName [, arguments .. ] )\n    //\n    // -----------------------------------------------------------------\n\n    o.emit = function () {  // --- {{{\n\n        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n        }\n\n        var eventName;\n        var senderCtx = this;\n        var rootCtx;\n        var argsCtx;\n\n        if (args.length > 1 && typeof args[0] !== 'string' && typeof args[1] === 'string') {\n            rootCtx = args.shift();\n            eventName = args.shift();\n            args[args.length - 1] = rootCtx;\n            argsCtx = args;\n        } else {\n            eventName = args.shift();  // throw out eventName\n            argsCtx = args.concat([senderCtx]);\n        }\n\n        _dispatch(eventName, function (listener) {\n\n            if (listener.isFunction) {\n                listener.fn.apply(senderCtx, args);\n            } else {\n                var fn = listener.fn[eventName];\n                if (typeof fn === 'function') {\n                    fn.apply(listener.fn, argsCtx);\n                } else if (listener.fn[PROP_NAMESPACE]) {\n                    listener.fn.emit.apply(listener.fn, [eventName].concat(args));\n                }\n            }\n\n        }, function (fn, boundObj) {\n\n            if (fn) {\n                fn.apply(boundObj, argsCtx);\n            } else {\n                boundObj.emit.apply(boundObj, [senderCtx, eventName].concat(argsCtx));\n            }\n\n        });\n\n    }\n\n    function _dispatch (eventName, emitListener, emitBoundObject) {\n\n        if (_ePublic.silenced) return;\n        if (_ePublic.off.indexOf(eventName) >= 0) return;\n\n        var listeners              = _e.callbacks[eventName];\n        var catchAllListeners      = _e.callbacks[CATCH_ALL_EVENT];\n        var boundObjsCount         = _e.boundObjects.length;\n        var hasBoundObjectsEmitted = false;\n\n        function _emitBoundObjects () {\n            var j, bo, fn;\n            if (boundObjsCount) {\n                for (j = 0; j < boundObjsCount; j++) {\n                    bo = _e.boundObjects[j];\n                    fn = bo[eventName];\n                    if (typeof fn === 'function') {\n                        emitBoundObject(fn, bo);\n                    } else if (bo[PROP_NAMESPACE]) {\n                        emitBoundObject(null, bo);\n                    }\n                }\n            }\n        }\n\n        var i, len, listen;\n\n        if (listeners || catchAllListeners.length) {\n\n            listeners = listeners ? listeners.concat(catchAllListeners) : catchAllListeners;\n            len = listeners.length;\n\n            for (i = 0; i < len; i++) {\n                listen = listeners[i];\n                if (!hasBoundObjectsEmitted && listen && listen.prio < eventize.PRIO_DEFAULT) {\n                    _emitBoundObjects();\n                    hasBoundObjectsEmitted = true;\n                }\n                emitListener(listen);\n            }\n        }\n\n        if (!hasBoundObjectsEmitted) _emitBoundObjects();\n\n    }\n\n    // --- emit }}}\n\n    // --------------------------------------------------------------------\n    //\n    // object.emitReduce( eventName [, value= {} ] [, arguments .. ] )\n    //\n    // --------------------------------------------------------------------\n\n    o.emitReduce = function () {  // --- {{{\n\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n        }\n\n        var eventName = args.shift();\n        var value;\n\n        function setValue (val) {\n            if (val !== undefined) {\n                value = val;\n            }\n        }\n\n        if (args.length === 0) {\n            value = {};\n            args.push(value);\n        } else {\n            setValue(args[0]);\n        }\n\n        var ctx = this;\n        var argsWithEventName = [eventName].concat(args);\n        var argsCtx = args.concat([ctx]);\n\n        _dispatch(eventName, function (listener) {\n\n            if (listener.isFunction) {\n                args[0] = value;\n                setValue(listener.fn.apply(ctx, args));\n            } else {\n                var fn = listener.fn[eventName];\n                if (typeof fn === 'function') {\n                    argsCtx[0] = value;\n                    setValue(fn.apply(listener.fn, argsCtx));\n                } else if (listener.fn[PROP_NAMESPACE]) {\n                    argsWithEventName[1] = value;\n                    setValue(listener.fn.emitReduce.apply(listener.fn, argsWithEventName));\n                }\n            }\n\n        }, function (fn, boundObj) {\n\n            if (fn) {\n                argsCtx[0] = value;\n                setValue(fn.apply(boundObj, argsCtx));\n            }\n\n        });\n\n        return value;\n\n    };\n\n    // --- emit }}}\n\n    // --------------------------------------------------------------------\n    //\n    // object.from( eventName, Observable )\n    //\n    // See https://github.com/tc39/proposal-observable\n    //\n    // Example:\n    //\n    //      object\n    //          .from('foo', Rx.Observable)\n    //          .filter(x => x % 2 === 0)\n    //          .subscribe(x => console.log(x));\n    //\n    //\n    // --------------------------------------------------------------------\n\n    o.from = function (eventName, observable) {  // --- {{{\n        var self = this;\n        return new observable(function (observer) {\n\n            var id = self.on(eventName, function (data) {\n                observer.next(data);\n            });\n\n            return function () {\n                self.off(id);\n            };\n\n        });\n    };\n\n    // --- from }}}\n\n    // --------------------------------------------------------------------\n    //\n    // object.subscribe( Observable, onNext[, onError][, onComplete] )\n    //\n    // Example:\n    //\n    //      object.subscribe(a, 'value', 'error');   // a => Observable\n    //\n    // --------------------------------------------------------------------\n\n    o.subscribe = function (source, onNext, onError, onComplete) {  // --- {{{\n        var self = this;\n        return source.subscribe(function (value) {\n            self.emit(onNext, value);\n        }, onError ? function (errorValue) {\n            self.emit(onError, errorValue);\n        } : undefined, onComplete ? function (completeValue) {\n            self.emit(onComplete, completeValue);\n        } : undefined);\n    };\n\n    // --- subscribe }}}\n\n    return o;\n\n} // <= eventize()\n\n\neventize.is = function (obj) {\n    return !!( obj && obj[PROP_NAMESPACE] );\n};\n\n\ndefineHiddenPropertyRO( eventize,\n    'EventizeNamespace', PROP_NAMESPACE);\n\n\n// ==========================================================================\n//\n// eventize.queue([ queueId ][, options]) : queue\n//\n// options are:\n//    - replace: true|false  - replace previous events with same name\n//                             when queue is in collection mode\n//\n// queue.play()              - activate play (immediately emit) mode\n// queue.collect()           - activate collection (store all events) mode\n// queue.toggle()            - toggle state\n// queue.state               - 'play'|'collect'\n//\n// ==========================================================================\n\ndefineHiddenPropertyRO(eventize, 'queues', hasMap ? new Map : {});\n\neventize.queue = function (id/*, options */) {\n\n    var queue, options;\n    var len = arguments.length;\n\n    if (len >= 1) {\n        if (typeof id !== 'object' || len === 2) {\n            queue = hasMap ? eventize.queues.get(id) : eventize.queues[id];\n        }\n        if (len === 2) {\n            options = arguments[1];\n        } else if (len === 1 && typeof id === 'object') {\n            options = id;\n        }\n    }\n\n    if (!queue) {\n        queue = createQueue(id, options);\n        if (hasMap) {\n            eventize.queues.set(queue.id, queue);\n        } else {\n            eventize.queues[queue.id] = queue;\n        }\n    }\n\n    return queue;\n\n};\n\n\nvar STATE = 'state';\nvar PLAY = 'play';\nvar COLLECT = 'collect';\n\nfunction createQueue (id, options) {\n\n    var queueId = ((typeof id === 'string' || typeof id === 'symbol') && id) || createUuid();\n    var queue = eventize({});\n    var isReplace = !!(options && options.replace);\n\n    var setState = function (state) {\n        definePublicPropertyRO(queue, STATE, state);\n    };\n\n    var emit = (function (_emit) {\n            return function (args) {\n            _emit.apply(queue, args);\n        };\n    })(queue.emit);\n\n    defineHiddenPropertyRO(queue, 'events', []);\n    definePublicPropertyRO(queue, 'id', queueId);\n\n    queue.collect = function () {\n        if (queue[STATE] !== COLLECT) {\n            setState(COLLECT);\n        }\n        return queue;\n    };\n\n    queue.emit = function () {\n        var args = new Array(arguments.length);\n        var i;\n        for (i = 0; i < args.length; ++i) {\n            args[i] = arguments[i];\n        }\n        if (queue[STATE] === PLAY) {\n            emit(args);\n        } else {  // COLLECT\n            if (isReplace) {\n                var len, eventName = args[0];\n                for (i = 0, len = queue.events.length; i < len; i++) {\n                    if (queue.events[i][0] === eventName) {\n                        queue.events[i] = args;\n                        return;\n                    }\n                }\n            }\n            queue.events.push(args);\n        }\n    };\n\n    queue.play = function () {\n        if (queue[STATE] !== PLAY) {\n            setState(PLAY);\n            queue.events.forEach(emit);\n            queue.events.length = 0;\n        }\n        return queue;\n    };\n\n    queue.toggle = function () {\n        return queue[STATE] !== PLAY ? queue.play() : queue.collect();\n    };\n\n    return queue.play();\n\n}\n\n\n// =====================================================================\n//\n// helper functions\n//\n// =====================================================================\n\n\nfunction createUuid () {\n    // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n        return v.toString(16);\n    });\n    return hasSymbol ? Symbol(uuid) : uuid;\n}\n\nfunction canUseSymbol () {\n    return typeof Symbol !== 'undefined';\n}\n\nfunction canUseMap () {\n    return typeof Map !== 'undefined';\n}\n\nfunction definePublicPropertyRO (obj, name, value) {\n    Object.defineProperty(obj, name, {\n        value        : value,\n        configurable : true,\n        enumerable   : true\n    });\n    return obj;\n}\n\nfunction definePublicPropertiesRO (obj, attrs) {\n    var i, keys = Object.keys(attrs);\n    for (i = keys.length; i--;) {\n        definePublicPropertyRO(obj, keys[i], attrs[keys[i]]);\n    }\n    return obj;\n}\n\nfunction defineHiddenPropertyRO (obj, name, value) {\n    Object.defineProperty(obj, name, {\n        value        : value,\n        configurable : true\n    });\n    return obj;\n}\n\n\n// --- end\n//\nmodule.exports = eventize;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nconst SG_NODE_TYPE = 0;\n\nconst DEFAULT_PRIORITY = 0;\n\nexports.SG_NODE_TYPE = SG_NODE_TYPE;\nexports.DEFAULT_PRIORITY = DEFAULT_PRIORITY;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2NlbmVfZ3JhcGgvY29uc3RhbnRzLmpzPzJjMjkiXSwibmFtZXMiOlsiU0dfTk9ERV9UWVBFIiwiREVGQVVMVF9QUklPUklUWSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsTUFBTUEsZUFBZSxDQUFyQjs7QUFFQSxNQUFNQyxtQkFBbUIsQ0FBekI7O1FBR0lELFksR0FBQUEsWTtRQUNBQyxnQixHQUFBQSxnQiIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBTR19OT0RFX1RZUEUgPSAwO1xuXG5jb25zdCBERUZBVUxUX1BSSU9SSVRZID0gMDtcblxuZXhwb3J0IHtcbiAgICBTR19OT0RFX1RZUEUsXG4gICAgREVGQVVMVF9QUklPUklUWVxufTtcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NjZW5lX2dyYXBoL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function () {\n    let d = new Date().getTime();\n    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n    return uuid;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZ2VuZXJhdGVfdXVpZC5qcz9hZjU2Il0sIm5hbWVzIjpbImQiLCJEYXRlIiwiZ2V0VGltZSIsInV1aWQiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwiZmxvb3IiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQUVlLFlBQVk7QUFDdkIsUUFBSUEsSUFBSSxJQUFJQyxJQUFKLEdBQVdDLE9BQVgsRUFBUjtBQUNBLFVBQU1DLE9BQU8sdUNBQXVDQyxPQUF2QyxDQUErQyxPQUEvQyxFQUF3RCxVQUFTQyxDQUFULEVBQVk7QUFDN0UsWUFBSUMsSUFBSSxDQUFDTixJQUFJTyxLQUFLQyxNQUFMLEtBQWMsRUFBbkIsSUFBdUIsRUFBdkIsR0FBNEIsQ0FBcEM7QUFDQVIsWUFBSU8sS0FBS0UsS0FBTCxDQUFXVCxJQUFFLEVBQWIsQ0FBSjtBQUNBLGVBQU8sQ0FBQ0ssS0FBRyxHQUFILEdBQVNDLENBQVQsR0FBY0EsSUFBRSxHQUFGLEdBQU8sR0FBdEIsRUFBNEJJLFFBQTVCLENBQXFDLEVBQXJDLENBQVA7QUFDSCxLQUpZLENBQWI7QUFLQSxXQUFPUCxJQUFQO0FBQ0gsQyIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBodHRwczovL2pzZmlkZGxlLm5ldC9icmlndXkzNy8yTVZGZC9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHV1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkqMTYpJTE2IHwgMDtcbiAgICAgICAgZCA9IE1hdGguZmxvb3IoZC8xNik7XG4gICAgICAgIHJldHVybiAoYz09J3gnID8gciA6IChyJjB4MyB8MHg4KSkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiB1dWlkO1xufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMvZ2VuZXJhdGVfdXVpZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _s_g_node = __webpack_require__(0);\n\nvar _s_g_node2 = _interopRequireDefault(_s_g_node);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst node = new _s_g_node2.default();\n\nconsole.log(\"hello, hello\", node.name);\n\n// based on https://github.com/paulirish/webgl-boilerplate\n\nvar canvas,\n    gl,\n    buffer,\n    vertex_shader,\n    fragment_shader,\n    currentProgram,\n    vertex_position,\n    timeLocation,\n    resolutionLocation,\n    parameters = {\n    start_time: new Date().getTime(),\n    time: 0,\n    screenWidth: 0,\n    screenHeight: 0 };\n\ninit();\nanimate();\n\nfunction init() {\n\n    vertex_shader = document.getElementById('vs').textContent;\n    fragment_shader = document.getElementById('fs').textContent;\n    canvas = document.querySelector('canvas');\n\n    // Initialise WebGL\n\n    try {\n\n        gl = canvas.getContext('experimental-webgl');\n    } catch (error) {}\n\n    if (!gl) {\n\n        throw \"cannot create webgl context\";\n    }\n\n    // Create Vertex buffer (2 triangles)\n\n    buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0]), gl.STATIC_DRAW);\n\n    // Create Program\n\n    currentProgram = createProgram(vertex_shader, fragment_shader);\n\n    timeLocation = gl.getUniformLocation(currentProgram, 'time');\n    resolutionLocation = gl.getUniformLocation(currentProgram, 'resolution');\n}\n\nfunction createProgram(vertex, fragment) {\n\n    var program = gl.createProgram();\n\n    var vs = createShader(vertex, gl.VERTEX_SHADER);\n    var fs = createShader('#ifdef GL_ES\\nprecision highp float;\\n#endif\\n\\n' + fragment, gl.FRAGMENT_SHADER);\n\n    if (vs == null || fs == null) return null;\n\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n\n    gl.deleteShader(vs);\n    gl.deleteShader(fs);\n\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n\n        alert(\"ERROR:\\n\" + \"VALIDATE_STATUS: \" + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + \"\\n\" + \"ERROR: \" + gl.getError() + \"\\n\\n\" + \"- Vertex Shader -\\n\" + vertex + \"\\n\\n\" + \"- Fragment Shader -\\n\" + fragment);\n\n        return null;\n    }\n\n    return program;\n}\n\nfunction createShader(src, type) {\n\n    var shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\n        alert((type == gl.VERTEX_SHADER ? \"VERTEX\" : \"FRAGMENT\") + \" SHADER:\\n\" + gl.getShaderInfoLog(shader));\n        return null;\n    }\n\n    return shader;\n}\n\nfunction resizeCanvas(event) {\n\n    if (canvas.width != canvas.clientWidth || canvas.height != canvas.clientHeight) {\n\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n\n        parameters.screenWidth = canvas.width;\n        parameters.screenHeight = canvas.height;\n\n        gl.viewport(0, 0, canvas.width, canvas.height);\n    }\n}\n\nfunction animate() {\n\n    resizeCanvas();\n    render();\n    requestAnimationFrame(animate);\n}\n\nfunction render() {\n\n    if (!currentProgram) return;\n\n    parameters.time = new Date().getTime() - parameters.start_time;\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Load program into GPU\n\n    gl.useProgram(currentProgram);\n\n    // Set values to program variables\n\n    gl.uniform1f(timeLocation, parameters.time / 1000);\n    gl.uniform2f(resolutionLocation, parameters.screenWidth, parameters.screenHeight);\n\n    // Render geometry\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.vertexAttribPointer(vertex_position, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(vertex_position);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    gl.disableVertexAttribArray(vertex_position);\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })
/******/ ]);